
MS5611_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004f58  08004f58  00014f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc0  08004fc0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004fc0  08004fc0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fc0  08004fc0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc4  08004fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fc8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000070  08005038  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08005038  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000658f  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013ed  00000000  00000000  0002666b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  00027a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000549  00000000  00000000  00028140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001664b  00000000  00000000  00028689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009244  00000000  00000000  0003ecd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fc18  00000000  00000000  00047f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000227c  00000000  00000000  000c7b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c9dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f3c 	.word	0x08004f3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004f3c 	.word	0x08004f3c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001074:	f000 fe3c 	bl	8001cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001078:	f000 f816 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107c:	f000 f888 	bl	8001190 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001080:	f000 f858 	bl	8001134 <MX_I2C1_Init>

/**
 * MS5611 Headerguard to avoid redefinitions
 */
#ifdef MS5611_H_
  MS5611.I2C_ADDRESS = MS5611_I2C_ADDRESS_H;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <main+0x30>)
 8001086:	22ee      	movs	r2, #238	; 0xee
 8001088:	809a      	strh	r2, [r3, #4]
  MS5611.i2c = &hi2c1;
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <main+0x30>)
 800108c:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <main+0x34>)
 800108e:	601a      	str	r2, [r3, #0]
  MS5611_Init(&MS5611);
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <main+0x30>)
 8001092:	f000 f8b1 	bl	80011f8 <MS5611_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  MS5611_Read_ActVal(&MS5611);
 8001096:	4802      	ldr	r0, [pc, #8]	; (80010a0 <main+0x30>)
 8001098:	f000 fd1a 	bl	8001ad0 <MS5611_Read_ActVal>
 800109c:	e7fb      	b.n	8001096 <main+0x26>
 800109e:	bf00      	nop
 80010a0:	2000008c 	.word	0x2000008c
 80010a4:	200000c8 	.word	0x200000c8

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b090      	sub	sp, #64	; 0x40
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	2228      	movs	r2, #40	; 0x28
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f003 f806 	bl	80040c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	2301      	movs	r3, #1
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010dc:	2302      	movs	r3, #2
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 fbed 	bl	80038d0 <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010fc:	f000 f876 	bl	80011ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	230f      	movs	r3, #15
 8001102:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001104:	2302      	movs	r3, #2
 8001106:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001110:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2102      	movs	r1, #2
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fe5a 	bl	8003dd4 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001126:	f000 f861 	bl	80011ec <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3740      	adds	r7, #64	; 0x40
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <MX_I2C1_Init+0x50>)
 800113a:	4a13      	ldr	r2, [pc, #76]	; (8001188 <MX_I2C1_Init+0x54>)
 800113c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_I2C1_Init+0x50>)
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <MX_I2C1_Init+0x58>)
 8001142:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_I2C1_Init+0x50>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_I2C1_Init+0x50>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_I2C1_Init+0x50>)
 8001152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001156:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <MX_I2C1_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_I2C1_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <MX_I2C1_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_I2C1_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <MX_I2C1_Init+0x50>)
 8001172:	f001 f8bb 	bl	80022ec <HAL_I2C_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800117c:	f000 f836 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200000c8 	.word	0x200000c8
 8001188:	40005400 	.word	0x40005400
 800118c:	000186a0 	.word	0x000186a0

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_GPIO_Init+0x58>)
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <MX_GPIO_Init+0x58>)
 800119c:	f043 0320 	orr.w	r3, r3, #32
 80011a0:	6193      	str	r3, [r2, #24]
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_GPIO_Init+0x58>)
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_GPIO_Init+0x58>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <MX_GPIO_Init+0x58>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6193      	str	r3, [r2, #24]
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_GPIO_Init+0x58>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_GPIO_Init+0x58>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <MX_GPIO_Init+0x58>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	6193      	str	r3, [r2, #24]
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <MX_GPIO_Init+0x58>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	40021000 	.word	0x40021000

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <MS5611_Init>:
uint8_t adcReadCom = 0x00;	/*! Provides ADC read sequence by create an asking for getting raw pressure and temperature value */
uint8_t ResetCom   = 0x1E;	/*! Resets command byte for sensor's mcu restart and clean parameters */
/******************************************************************************
         			#### MS5611 FUNCTIONS ####
******************************************************************************/
MS5611_StatusTypeDef MS5611_Init(MS5611_HandleTypeDef *dev){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

	MS5611_Reset(dev);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f81d 	bl	8001240 <MS5611_Reset>

	 if(HAL_I2C_IsDeviceReady(dev->i2c, dev->I2C_ADDRESS, 1, 10000) != HAL_OK){
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6818      	ldr	r0, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	8899      	ldrh	r1, [r3, #4]
 800120e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001212:	2201      	movs	r2, #1
 8001214:	f001 fe12 	bl	8002e3c <HAL_I2C_IsDeviceReady>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d005      	beq.n	800122a <MS5611_Init+0x32>

			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <MS5611_Init+0x44>)
 8001226:	f001 f849 	bl	80022bc <HAL_GPIO_WritePin>

	 }

	MS5611_Get_CalibCoeff(dev);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f824 	bl	8001278 <MS5611_Get_CalibCoeff>

	return MS5611_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40011000 	.word	0x40011000

08001240 <MS5611_Reset>:



MS5611_StatusTypeDef MS5611_Reset(MS5611_HandleTypeDef *dev){
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af04      	add	r7, sp, #16
 8001246:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Write(dev->i2c, dev->I2C_ADDRESS, dev->I2C_ADDRESS, 1, &ResetCom, 1, 1000);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6818      	ldr	r0, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	8899      	ldrh	r1, [r3, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	889a      	ldrh	r2, [r3, #4]
 8001254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001258:	9302      	str	r3, [sp, #8]
 800125a:	2301      	movs	r3, #1
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <MS5611_Reset+0x34>)
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2301      	movs	r3, #1
 8001264:	f001 fcf0 	bl	8002c48 <HAL_I2C_Mem_Write>

	return MS5611_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000002 	.word	0x20000002

08001278 <MS5611_Get_CalibCoeff>:

MS5611_StatusTypeDef MS5611_Get_CalibCoeff(MS5611_HandleTypeDef *dev){
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	; 0x38
 800127c:	af02      	add	r7, sp, #8
 800127e:	6078      	str	r0, [r7, #4]

	uint8_t CalibCoefAddrss[7] = {0xA2, //C1
 8001280:	4a8c      	ldr	r2, [pc, #560]	; (80014b4 <MS5611_Get_CalibCoeff+0x23c>)
 8001282:	f107 0320 	add.w	r3, r7, #32
 8001286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128a:	6018      	str	r0, [r3, #0]
 800128c:	3304      	adds	r3, #4
 800128e:	8019      	strh	r1, [r3, #0]
 8001290:	3302      	adds	r3, #2
 8001292:	0c0a      	lsrs	r2, r1, #16
 8001294:	701a      	strb	r2, [r3, #0]
								  0xA8, //C4
								  0xAA, //C5
								  0xAC, //C6
								  0xAE}; /*! The last address is for CRC*/

	uint8_t TempryCalibCoefVal[2] = {0};	/*! Temporary buffer that gets two complement of each calibration coefficient*/
 8001296:	2300      	movs	r3, #0
 8001298:	83bb      	strh	r3, [r7, #28]
	uint8_t CalibCoefVal[14] = {0};			/*! Stable buffer that collects all complements of calibration coefficients*/
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	811a      	strh	r2, [r3, #8]
	uint8_t cnt = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	for(cnt = 0; cnt <= 6 ; cnt++){
 80012b0:	2300      	movs	r3, #0
 80012b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80012b6:	e03b      	b.n	8001330 <MS5611_Get_CalibCoeff+0xb8>

		HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &CalibCoefAddrss[cnt], 1, 1000);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6818      	ldr	r0, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	8899      	ldrh	r1, [r3, #4]
 80012c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012c4:	f107 0220 	add.w	r2, r7, #32
 80012c8:	441a      	add	r2, r3
 80012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	2301      	movs	r3, #1
 80012d2:	f001 f94f 	bl	8002574 <HAL_I2C_Master_Transmit>

				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012da:	e010      	b.n	80012fe <MS5611_Get_CalibCoeff+0x86>

					HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &TempryCalibCoefVal[cnt_2], 2, 1000);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	8899      	ldrh	r1, [r3, #4]
 80012e4:	f107 021c 	add.w	r2, r7, #28
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	441a      	add	r2, r3
 80012ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2302      	movs	r3, #2
 80012f4:	f001 fa3c 	bl	8002770 <HAL_I2C_Master_Receive>
				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 80012f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fa:	3301      	adds	r3, #1
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80012fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001300:	2b01      	cmp	r3, #1
 8001302:	ddeb      	ble.n	80012dc <MS5611_Get_CalibCoeff+0x64>

				}

		CalibCoefVal[(cnt*2)]   = TempryCalibCoefVal[0];
 8001304:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	7f3a      	ldrb	r2, [r7, #28]
 800130c:	3330      	adds	r3, #48	; 0x30
 800130e:	443b      	add	r3, r7
 8001310:	f803 2c24 	strb.w	r2, [r3, #-36]
		CalibCoefVal[(cnt*2+1)] = TempryCalibCoefVal[1];
 8001314:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	3301      	adds	r3, #1
 800131c:	7f7a      	ldrb	r2, [r7, #29]
 800131e:	3330      	adds	r3, #48	; 0x30
 8001320:	443b      	add	r3, r7
 8001322:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(cnt = 0; cnt <= 6 ; cnt++){
 8001326:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800132a:	3301      	adds	r3, #1
 800132c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001334:	2b06      	cmp	r3, #6
 8001336:	d9bf      	bls.n	80012b8 <MS5611_Get_CalibCoeff+0x40>

	}

	cnt = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/*! Complements of each calibration coefficient consists MSB and LSB bits*/
	dev->Clb_Cf.C1  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2; // uint16_t <== |MSB_C1|LSB_C1|
 800133e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001342:	3330      	adds	r3, #48	; 0x30
 8001344:	443b      	add	r3, r7
 8001346:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b21a      	sxth	r2, r3
 800134e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001352:	3301      	adds	r3, #1
 8001354:	3330      	adds	r3, #48	; 0x30
 8001356:	443b      	add	r3, r7
 8001358:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21b      	sxth	r3, r3
 8001362:	b29a      	uxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	80da      	strh	r2, [r3, #6]
 8001368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800136c:	3302      	adds	r3, #2
 800136e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C2  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001376:	3330      	adds	r3, #48	; 0x30
 8001378:	443b      	add	r3, r7
 800137a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	b21a      	sxth	r2, r3
 8001382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001386:	3301      	adds	r3, #1
 8001388:	3330      	adds	r3, #48	; 0x30
 800138a:	443b      	add	r3, r7
 800138c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001390:	b21b      	sxth	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b21b      	sxth	r3, r3
 8001396:	b29a      	uxth	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	811a      	strh	r2, [r3, #8]
 800139c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013a0:	3302      	adds	r3, #2
 80013a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C3  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80013a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013aa:	3330      	adds	r3, #48	; 0x30
 80013ac:	443b      	add	r3, r7
 80013ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ba:	3301      	adds	r3, #1
 80013bc:	3330      	adds	r3, #48	; 0x30
 80013be:	443b      	add	r3, r7
 80013c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	815a      	strh	r2, [r3, #10]
 80013d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013d4:	3302      	adds	r3, #2
 80013d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C4  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80013da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013de:	3330      	adds	r3, #48	; 0x30
 80013e0:	443b      	add	r3, r7
 80013e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80013ee:	3301      	adds	r3, #1
 80013f0:	3330      	adds	r3, #48	; 0x30
 80013f2:	443b      	add	r3, r7
 80013f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	b29a      	uxth	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	819a      	strh	r2, [r3, #12]
 8001404:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001408:	3302      	adds	r3, #2
 800140a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C5  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 800140e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001412:	3330      	adds	r3, #48	; 0x30
 8001414:	443b      	add	r3, r7
 8001416:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001422:	3301      	adds	r3, #1
 8001424:	3330      	adds	r3, #48	; 0x30
 8001426:	443b      	add	r3, r7
 8001428:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800142c:	b21b      	sxth	r3, r3
 800142e:	4313      	orrs	r3, r2
 8001430:	b21b      	sxth	r3, r3
 8001432:	b29a      	uxth	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	81da      	strh	r2, [r3, #14]
 8001438:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800143c:	3302      	adds	r3, #2
 800143e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C6  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001446:	3330      	adds	r3, #48	; 0x30
 8001448:	443b      	add	r3, r7
 800144a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001456:	3301      	adds	r3, #1
 8001458:	3330      	adds	r3, #48	; 0x30
 800145a:	443b      	add	r3, r7
 800145c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	b21b      	sxth	r3, r3
 8001466:	b29a      	uxth	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	821a      	strh	r2, [r3, #16]
 800146c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001470:	3302      	adds	r3, #2
 8001472:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.crc = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800147a:	3330      	adds	r3, #48	; 0x30
 800147c:	443b      	add	r3, r7
 800147e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	b21a      	sxth	r2, r3
 8001486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800148a:	3301      	adds	r3, #1
 800148c:	3330      	adds	r3, #48	; 0x30
 800148e:	443b      	add	r3, r7
 8001490:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001494:	b21b      	sxth	r3, r3
 8001496:	4313      	orrs	r3, r2
 8001498:	b21b      	sxth	r3, r3
 800149a:	b29a      	uxth	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	825a      	strh	r2, [r3, #18]
 80014a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014a4:	3302      	adds	r3, #2
 80014a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	return MS5611_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3730      	adds	r7, #48	; 0x30
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	08004f58 	.word	0x08004f58

080014b8 <MS5611_ReadRaw_Press_Temp>:


MS5611_StatusTypeDef MS5611_ReadRaw_Press_Temp(MS5611_HandleTypeDef *dev){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af02      	add	r7, sp, #8
 80014be:	6078      	str	r0, [r7, #4]

	uint8_t RawDataD1[3]  = {0}; /*! D1 = Raw pressure value that will be compensated at other functions*/
 80014c0:	4b39      	ldr	r3, [pc, #228]	; (80015a8 <MS5611_ReadRaw_Press_Temp+0xf0>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	81bb      	strh	r3, [r7, #12]
 80014c6:	2300      	movs	r3, #0
 80014c8:	73bb      	strb	r3, [r7, #14]
	uint8_t RawDataD2[3]  = {0}; /*! D2 = Raw temperature value that will be compensated at other functions*/
 80014ca:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <MS5611_ReadRaw_Press_Temp+0xf0>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	813b      	strh	r3, [r7, #8]
 80014d0:	2300      	movs	r3, #0
 80014d2:	72bb      	strb	r3, [r7, #10]
	 *
	 * @Attention! you must wait minimum 15 milisecond after each i2c command because of clock line and calculation times.
	 */

	/*! Gets D1(Raw Pressure)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D1, 1, 1000); //(1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	8899      	ldrh	r1, [r3, #4]
 80014dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	2301      	movs	r3, #1
 80014e4:	4a31      	ldr	r2, [pc, #196]	; (80015ac <MS5611_ReadRaw_Press_Temp+0xf4>)
 80014e6:	f001 f845 	bl	8002574 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80014ea:	2014      	movs	r0, #20
 80014ec:	f000 fc62 	bl	8001db4 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);	 //(2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	8899      	ldrh	r1, [r3, #4]
 80014f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2301      	movs	r3, #1
 8001500:	4a2b      	ldr	r2, [pc, #172]	; (80015b0 <MS5611_ReadRaw_Press_Temp+0xf8>)
 8001502:	f001 f837 	bl	8002574 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001506:	2014      	movs	r0, #20
 8001508:	f000 fc54 	bl	8001db4 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD1[0], 3, 1000);	 //(3)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	8899      	ldrh	r1, [r3, #4]
 8001514:	f107 020c 	add.w	r2, r7, #12
 8001518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2303      	movs	r3, #3
 8001520:	f001 f926 	bl	8002770 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D1 = (uint32_t)((RawDataD1[0]<<16) | (RawDataD1[1]<<8) | (RawDataD1[2]<<0)); // MSB|LSB|XLSB
 8001524:	7b3b      	ldrb	r3, [r7, #12]
 8001526:	041a      	lsls	r2, r3, #16
 8001528:	7b7b      	ldrb	r3, [r7, #13]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	4313      	orrs	r3, r2
 800152e:	7bba      	ldrb	r2, [r7, #14]
 8001530:	4313      	orrs	r3, r2
 8001532:	461a      	mov	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	615a      	str	r2, [r3, #20]

	/*! Gets D2(Raw Temperature)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D2, 1, 1000); //(1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	8899      	ldrh	r1, [r3, #4]
 8001540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <MS5611_ReadRaw_Press_Temp+0xfc>)
 800154a:	f001 f813 	bl	8002574 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800154e:	2014      	movs	r0, #20
 8001550:	f000 fc30 	bl	8001db4 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);  	 //(2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	8899      	ldrh	r1, [r3, #4]
 800155c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2301      	movs	r3, #1
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MS5611_ReadRaw_Press_Temp+0xf8>)
 8001566:	f001 f805 	bl	8002574 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800156a:	2014      	movs	r0, #20
 800156c:	f000 fc22 	bl	8001db4 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD2[0], 3, 1000);  //(3)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	8899      	ldrh	r1, [r3, #4]
 8001578:	f107 0208 	add.w	r2, r7, #8
 800157c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	2303      	movs	r3, #3
 8001584:	f001 f8f4 	bl	8002770 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D2 = (uint32_t)((RawDataD2[0]<<16) | (RawDataD2[1]<<8) | (RawDataD2[2]<<0)); // MSB|LSB|XLSB
 8001588:	7a3b      	ldrb	r3, [r7, #8]
 800158a:	041a      	lsls	r2, r3, #16
 800158c:	7a7b      	ldrb	r3, [r7, #9]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	4313      	orrs	r3, r2
 8001592:	7aba      	ldrb	r2, [r7, #10]
 8001594:	4313      	orrs	r3, r2
 8001596:	461a      	mov	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]

	return MS5611_OK;
 800159c:	2300      	movs	r3, #0

}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	08004f60 	.word	0x08004f60
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000128 	.word	0x20000128
 80015b4:	20000001 	.word	0x20000001

080015b8 <MS5611_FirstCalculateDatas>:


MS5611_StatusTypeDef MS5611_FirstCalculateDatas(MS5611_HandleTypeDef *dev){
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	dev->ClcPrms.dT   = dev->ClcPrms.D2 - dev->Clb_Cf.C5 * pow(2,8);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ff05 	bl	80003d4 <__aeabi_ui2d>
 80015ca:	4604      	mov	r4, r0
 80015cc:	460d      	mov	r5, r1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	89db      	ldrh	r3, [r3, #14]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ff0e 	bl	80003f4 <__aeabi_i2d>
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	4b6c      	ldr	r3, [pc, #432]	; (8001790 <MS5611_FirstCalculateDatas+0x1d8>)
 80015de:	f7fe ff73 	bl	80004c8 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7fe fdb5 	bl	8000158 <__aeabi_dsub>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fa17 	bl	8000a28 <__aeabi_d2f>
 80015fa:	4602      	mov	r2, r0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	61da      	str	r2, [r3, #28]
	dev->ClcPrms.OFF  = dev->Clb_Cf.C2 * pow(2,17) + (dev->Clb_Cf.C4 * dev->ClcPrms.dT) / pow(2,6);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	891b      	ldrh	r3, [r3, #8]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe fef5 	bl	80003f4 <__aeabi_i2d>
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001612:	f7fe ff59 	bl	80004c8 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4614      	mov	r4, r2
 800161c:	461d      	mov	r5, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	899b      	ldrh	r3, [r3, #12]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fb0a 	bl	8000c3c <__aeabi_i2f>
 8001628:	4602      	mov	r2, r0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4619      	mov	r1, r3
 8001630:	4610      	mov	r0, r2
 8001632:	f7ff fb57 	bl	8000ce4 <__aeabi_fmul>
 8001636:	4603      	mov	r3, r0
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe feed 	bl	8000418 <__aeabi_f2d>
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	4b54      	ldr	r3, [pc, #336]	; (8001794 <MS5611_FirstCalculateDatas+0x1dc>)
 8001644:	f7ff f86a 	bl	800071c <__aeabi_ddiv>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4620      	mov	r0, r4
 800164e:	4629      	mov	r1, r5
 8001650:	f7fe fd84 	bl	800015c <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff f9e4 	bl	8000a28 <__aeabi_d2f>
 8001660:	4602      	mov	r2, r0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
	dev->ClcPrms.SENS = dev->Clb_Cf.C1 * pow(2,16) + (dev->Clb_Cf.C3 * dev->ClcPrms.dT) / pow(2,7);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	88db      	ldrh	r3, [r3, #6]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fec2 	bl	80003f4 <__aeabi_i2d>
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b48      	ldr	r3, [pc, #288]	; (8001798 <MS5611_FirstCalculateDatas+0x1e0>)
 8001676:	f7fe ff27 	bl	80004c8 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4614      	mov	r4, r2
 8001680:	461d      	mov	r5, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	895b      	ldrh	r3, [r3, #10]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fad8 	bl	8000c3c <__aeabi_i2f>
 800168c:	4602      	mov	r2, r0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4619      	mov	r1, r3
 8001694:	4610      	mov	r0, r2
 8001696:	f7ff fb25 	bl	8000ce4 <__aeabi_fmul>
 800169a:	4603      	mov	r3, r0
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe febb 	bl	8000418 <__aeabi_f2d>
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <MS5611_FirstCalculateDatas+0x1e4>)
 80016a8:	f7ff f838 	bl	800071c <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4620      	mov	r0, r4
 80016b2:	4629      	mov	r1, r5
 80016b4:	f7fe fd52 	bl	800015c <__adddf3>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff f9b2 	bl	8000a28 <__aeabi_d2f>
 80016c4:	4602      	mov	r2, r0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	62da      	str	r2, [r3, #44]	; 0x2c

	dev->ClcPrms.TEMP = 2000 + dev->ClcPrms.dT * dev->Clb_Cf.C6 / pow(2,23);								//Actual temperature data
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69dc      	ldr	r4, [r3, #28]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	8a1b      	ldrh	r3, [r3, #16]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fab2 	bl	8000c3c <__aeabi_i2f>
 80016d8:	4603      	mov	r3, r0
 80016da:	4619      	mov	r1, r3
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff fb01 	bl	8000ce4 <__aeabi_fmul>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe fe97 	bl	8000418 <__aeabi_f2d>
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <MS5611_FirstCalculateDatas+0x1e8>)
 80016f0:	f7ff f814 	bl	800071c <__aeabi_ddiv>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b28      	ldr	r3, [pc, #160]	; (80017a4 <MS5611_FirstCalculateDatas+0x1ec>)
 8001702:	f7fe fd2b 	bl	800015c <__adddf3>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff f98b 	bl	8000a28 <__aeabi_d2f>
 8001712:	4602      	mov	r2, r0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	621a      	str	r2, [r3, #32]
	dev->ClcPrms.P	  = ((dev->ClcPrms.D1 * dev->ClcPrms.SENS / pow(2,21) - dev->ClcPrms.OFF))/pow(2,15);	//Actual pressure data
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fa89 	bl	8000c34 <__aeabi_ui2f>
 8001722:	4602      	mov	r2, r0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	4619      	mov	r1, r3
 800172a:	4610      	mov	r0, r2
 800172c:	f7ff fada 	bl	8000ce4 <__aeabi_fmul>
 8001730:	4603      	mov	r3, r0
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe fe70 	bl	8000418 <__aeabi_f2d>
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MS5611_FirstCalculateDatas+0x1f0>)
 800173e:	f7fe ffed 	bl	800071c <__aeabi_ddiv>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4614      	mov	r4, r2
 8001748:	461d      	mov	r5, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	4618      	mov	r0, r3
 8001750:	f7fe fe62 	bl	8000418 <__aeabi_f2d>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4620      	mov	r0, r4
 800175a:	4629      	mov	r1, r5
 800175c:	f7fe fcfc 	bl	8000158 <__aeabi_dsub>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MS5611_FirstCalculateDatas+0x1f4>)
 800176e:	f7fe ffd5 	bl	800071c <__aeabi_ddiv>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff f955 	bl	8000a28 <__aeabi_d2f>
 800177e:	4602      	mov	r2, r0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001784:	bf00      	nop
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bdb0      	pop	{r4, r5, r7, pc}
 800178e:	bf00      	nop
 8001790:	40700000 	.word	0x40700000
 8001794:	40500000 	.word	0x40500000
 8001798:	40f00000 	.word	0x40f00000
 800179c:	40600000 	.word	0x40600000
 80017a0:	41600000 	.word	0x41600000
 80017a4:	409f4000 	.word	0x409f4000
 80017a8:	41400000 	.word	0x41400000
 80017ac:	40e00000 	.word	0x40e00000

080017b0 <MS5611_SecondCalculateDatas>:


MS5611_StatusTypeDef MS5611_SecondCalculateDatas(MS5611_HandleTypeDef *dev){
 80017b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

	if(dev->ClcPrms.TEMP < 2000){
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4985      	ldr	r1, [pc, #532]	; (80019d4 <MS5611_SecondCalculateDatas+0x224>)
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fc2e 	bl	8001020 <__aeabi_fcmplt>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8110 	beq.w	80019ec <MS5611_SecondCalculateDatas+0x23c>

			/*! Low Temperature */
			dev->ClcPrms.TEMP2 = (dev->ClcPrms.dT * dev->ClcPrms.dT) / pow(2,31);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69da      	ldr	r2, [r3, #28]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69db      	ldr	r3, [r3, #28]
 80017d4:	4619      	mov	r1, r3
 80017d6:	4610      	mov	r0, r2
 80017d8:	f7ff fa84 	bl	8000ce4 <__aeabi_fmul>
 80017dc:	4603      	mov	r3, r0
 80017de:	f04f 419e 	mov.w	r1, #1325400064	; 0x4f000000
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fb32 	bl	8000e4c <__aeabi_fdiv>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	639a      	str	r2, [r3, #56]	; 0x38
			dev->ClcPrms.OFF2  = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4977      	ldr	r1, [pc, #476]	; (80019d4 <MS5611_SecondCalculateDatas+0x224>)
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff f96a 	bl	8000ad0 <__aeabi_fsub>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461c      	mov	r4, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4973      	ldr	r1, [pc, #460]	; (80019d4 <MS5611_SecondCalculateDatas+0x224>)
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff f962 	bl	8000ad0 <__aeabi_fsub>
 800180c:	4603      	mov	r3, r0
 800180e:	4619      	mov	r1, r3
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fa67 	bl	8000ce4 <__aeabi_fmul>
 8001816:	4603      	mov	r3, r0
 8001818:	496f      	ldr	r1, [pc, #444]	; (80019d8 <MS5611_SecondCalculateDatas+0x228>)
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fa62 	bl	8000ce4 <__aeabi_fmul>
 8001820:	4603      	mov	r3, r0
 8001822:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fb10 	bl	8000e4c <__aeabi_fdiv>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
			dev->ClcPrms.SENS2 = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,2);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4966      	ldr	r1, [pc, #408]	; (80019d4 <MS5611_SecondCalculateDatas+0x224>)
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff f948 	bl	8000ad0 <__aeabi_fsub>
 8001840:	4603      	mov	r3, r0
 8001842:	461c      	mov	r4, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4962      	ldr	r1, [pc, #392]	; (80019d4 <MS5611_SecondCalculateDatas+0x224>)
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f940 	bl	8000ad0 <__aeabi_fsub>
 8001850:	4603      	mov	r3, r0
 8001852:	4619      	mov	r1, r3
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff fa45 	bl	8000ce4 <__aeabi_fmul>
 800185a:	4603      	mov	r3, r0
 800185c:	495e      	ldr	r1, [pc, #376]	; (80019d8 <MS5611_SecondCalculateDatas+0x228>)
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fa40 	bl	8000ce4 <__aeabi_fmul>
 8001864:	4603      	mov	r3, r0
 8001866:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff faee 	bl	8000e4c <__aeabi_fdiv>
 8001870:	4603      	mov	r3, r0
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	635a      	str	r2, [r3, #52]	; 0x34

					if(dev->ClcPrms.TEMP < -1500){
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4957      	ldr	r1, [pc, #348]	; (80019dc <MS5611_SecondCalculateDatas+0x22c>)
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fbce 	bl	8001020 <__aeabi_fcmplt>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d07f      	beq.n	800198a <MS5611_SecondCalculateDatas+0x1da>
						/*! Very Low Temperature */
						dev->ClcPrms.OFF2  = dev->ClcPrms.OFF2 + 7 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a1b      	ldr	r3, [r3, #32]
 8001892:	4953      	ldr	r1, [pc, #332]	; (80019e0 <MS5611_SecondCalculateDatas+0x230>)
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff f91d 	bl	8000ad4 <__addsf3>
 800189a:	4603      	mov	r3, r0
 800189c:	461d      	mov	r5, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	494f      	ldr	r1, [pc, #316]	; (80019e0 <MS5611_SecondCalculateDatas+0x230>)
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff f915 	bl	8000ad4 <__addsf3>
 80018aa:	4603      	mov	r3, r0
 80018ac:	4619      	mov	r1, r3
 80018ae:	4628      	mov	r0, r5
 80018b0:	f7ff fa18 	bl	8000ce4 <__aeabi_fmul>
 80018b4:	4603      	mov	r3, r0
 80018b6:	494b      	ldr	r1, [pc, #300]	; (80019e4 <MS5611_SecondCalculateDatas+0x234>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fa13 	bl	8000ce4 <__aeabi_fmul>
 80018be:	4603      	mov	r3, r0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff f906 	bl	8000ad4 <__addsf3>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	631a      	str	r2, [r3, #48]	; 0x30
						dev->ClcPrms.SENS2 = dev->ClcPrms.SENS2 + 11 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500)) / pow(2,1);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fd9f 	bl	8000418 <__aeabi_f2d>
 80018da:	4604      	mov	r4, r0
 80018dc:	460d      	mov	r5, r1
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	493f      	ldr	r1, [pc, #252]	; (80019e0 <MS5611_SecondCalculateDatas+0x230>)
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff f8f5 	bl	8000ad4 <__addsf3>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461e      	mov	r6, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	493b      	ldr	r1, [pc, #236]	; (80019e0 <MS5611_SecondCalculateDatas+0x230>)
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff f8ed 	bl	8000ad4 <__addsf3>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4619      	mov	r1, r3
 80018fe:	4630      	mov	r0, r6
 8001900:	f7ff f9f0 	bl	8000ce4 <__aeabi_fmul>
 8001904:	4603      	mov	r3, r0
 8001906:	4938      	ldr	r1, [pc, #224]	; (80019e8 <MS5611_SecondCalculateDatas+0x238>)
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff f9eb 	bl	8000ce4 <__aeabi_fmul>
 800190e:	4603      	mov	r3, r0
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fd81 	bl	8000418 <__aeabi_f2d>
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800191e:	f7fe fefd 	bl	800071c <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f7fe fc17 	bl	800015c <__adddf3>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f877 	bl	8000a28 <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	635a      	str	r2, [r3, #52]	; 0x34

						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1a      	ldr	r2, [r3, #32]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001948:	4619      	mov	r1, r3
 800194a:	4610      	mov	r0, r2
 800194c:	f7ff f8c0 	bl	8000ad0 <__aeabi_fsub>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	621a      	str	r2, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	4619      	mov	r1, r3
 8001962:	4610      	mov	r0, r2
 8001964:	f7ff f8b4 	bl	8000ad0 <__aeabi_fsub>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	629a      	str	r2, [r3, #40]	; 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001978:	4619      	mov	r1, r3
 800197a:	4610      	mov	r0, r2
 800197c:	f7ff f8a8 	bl	8000ad0 <__aeabi_fsub>
 8001980:	4603      	mov	r3, r0
 8001982:	461a      	mov	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
 8001988:	e060      	b.n	8001a4c <MS5611_SecondCalculateDatas+0x29c>

					}
					else{

						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a1a      	ldr	r2, [r3, #32]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001992:	4619      	mov	r1, r3
 8001994:	4610      	mov	r0, r2
 8001996:	f7ff f89b 	bl	8000ad0 <__aeabi_fsub>
 800199a:	4603      	mov	r3, r0
 800199c:	461a      	mov	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	621a      	str	r2, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4619      	mov	r1, r3
 80019ac:	4610      	mov	r0, r2
 80019ae:	f7ff f88f 	bl	8000ad0 <__aeabi_fsub>
 80019b2:	4603      	mov	r3, r0
 80019b4:	461a      	mov	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c2:	4619      	mov	r1, r3
 80019c4:	4610      	mov	r0, r2
 80019c6:	f7ff f883 	bl	8000ad0 <__aeabi_fsub>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d2:	e03b      	b.n	8001a4c <MS5611_SecondCalculateDatas+0x29c>
 80019d4:	44fa0000 	.word	0x44fa0000
 80019d8:	40a00000 	.word	0x40a00000
 80019dc:	c4bb8000 	.word	0xc4bb8000
 80019e0:	44bb8000 	.word	0x44bb8000
 80019e4:	40e00000 	.word	0x40e00000
 80019e8:	41300000 	.word	0x41300000


		}
		else{
			/*! High Temperature */
			dev->ClcPrms.TEMP2 = 0;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	639a      	str	r2, [r3, #56]	; 0x38
			dev->ClcPrms.OFF2  = 0;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
			dev->ClcPrms.SENS2 = 0;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34

			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1a      	ldr	r2, [r3, #32]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f7ff f85e 	bl	8000ad0 <__aeabi_fsub>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	621a      	str	r2, [r3, #32]
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	4619      	mov	r1, r3
 8001a26:	4610      	mov	r0, r2
 8001a28:	f7ff f852 	bl	8000ad0 <__aeabi_fsub>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f7ff f846 	bl	8000ad0 <__aeabi_fsub>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	62da      	str	r2, [r3, #44]	; 0x2c

		}
}
 8001a4c:	bf00      	nop
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a56:	bf00      	nop

08001a58 <MS5611_Calc_Altitude>:

float MS5611_Calc_Altitude(MS5611_HandleTypeDef *dev){
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

	return (SeaLevelTemp / GradientTemp) * (1 - pow((dev->ClcPrms.P / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel)));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	4918      	ldr	r1, [pc, #96]	; (8001ac8 <MS5611_Calc_Altitude+0x70>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f9f0 	bl	8000e4c <__aeabi_fdiv>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fcd2 	bl	8000418 <__aeabi_f2d>
 8001a74:	a310      	add	r3, pc, #64	; (adr r3, 8001ab8 <MS5611_Calc_Altitude+0x60>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f002 fb57 	bl	800412c <pow>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	f04f 0000 	mov.w	r0, #0
 8001a86:	4911      	ldr	r1, [pc, #68]	; (8001acc <MS5611_Calc_Altitude+0x74>)
 8001a88:	f7fe fb66 	bl	8000158 <__aeabi_dsub>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	a30a      	add	r3, pc, #40	; (adr r3, 8001ac0 <MS5611_Calc_Altitude+0x68>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f7fe fd15 	bl	80004c8 <__aeabi_dmul>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4610      	mov	r0, r2
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f7fe ffbf 	bl	8000a28 <__aeabi_d2f>
 8001aaa:	4603      	mov	r3, r0

}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	a0829b73 	.word	0xa0829b73
 8001abc:	3fc85a7a 	.word	0x3fc85a7a
 8001ac0:	9d89d89d 	.word	0x9d89d89d
 8001ac4:	40e5a558 	.word	0x40e5a558
 8001ac8:	47c5e680 	.word	0x47c5e680
 8001acc:	3ff00000 	.word	0x3ff00000

08001ad0 <MS5611_Read_ActVal>:

MS5611_StatusTypeDef MS5611_Read_ActVal(MS5611_HandleTypeDef *dev){
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

	/*! Read raw pressure and temperature MSB | LSB | XLSB values from the sensor*/
	MS5611_ReadRaw_Press_Temp(dev);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fced 	bl	80014b8 <MS5611_ReadRaw_Press_Temp>

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	MS5611_FirstCalculateDatas(dev);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fd6a 	bl	80015b8 <MS5611_FirstCalculateDatas>

	/*! If it's needed, Calculate 2st order temperature and pressure  according to MS5611 2st order algorithm */
	MS5611_SecondCalculateDatas(dev);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff fe63 	bl	80017b0 <MS5611_SecondCalculateDatas>

	/*! Vertical Altitude is calculated by using pressure and some coefficients */
	MS5611_Altitude = MS5611_Calc_Altitude(dev);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffb4 	bl	8001a58 <MS5611_Calc_Altitude>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a19      	ldr	r2, [pc, #100]	; (8001b58 <MS5611_Read_ActVal+0x88>)
 8001af4:	6013      	str	r3, [r2, #0]

	/*! Pressure unit is mBar and Temperature unit is celcius degress*/
	MS5611_Press = dev->ClcPrms.P * 0.01 ;			//1001.25mBar
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fc8c 	bl	8000418 <__aeabi_f2d>
 8001b00:	a313      	add	r3, pc, #76	; (adr r3, 8001b50 <MS5611_Read_ActVal+0x80>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7fe fcdf 	bl	80004c8 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7fe ff89 	bl	8000a28 <__aeabi_d2f>
 8001b16:	4603      	mov	r3, r0
 8001b18:	4a10      	ldr	r2, [pc, #64]	; (8001b5c <MS5611_Read_ActVal+0x8c>)
 8001b1a:	6013      	str	r3, [r2, #0]
	MS5611_Temp  = dev->ClcPrms.TEMP * 0.01 ;		//25.57 CelciusDegress
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fc79 	bl	8000418 <__aeabi_f2d>
 8001b26:	a30a      	add	r3, pc, #40	; (adr r3, 8001b50 <MS5611_Read_ActVal+0x80>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	f7fe fccc 	bl	80004c8 <__aeabi_dmul>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f7fe ff76 	bl	8000a28 <__aeabi_d2f>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <MS5611_Read_ActVal+0x90>)
 8001b40:	6013      	str	r3, [r2, #0]

	return MS5611_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	f3af 8000 	nop.w
 8001b50:	47ae147b 	.word	0x47ae147b
 8001b54:	3f847ae1 	.word	0x3f847ae1
 8001b58:	20000124 	.word	0x20000124
 8001b5c:	2000011c 	.word	0x2000011c
 8001b60:	20000120 	.word	0x20000120

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6193      	str	r3, [r2, #24]
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_MspInit+0x5c>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_MspInit+0x60>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_MspInit+0x60>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000

08001bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <HAL_I2C_MspInit+0x74>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d125      	bne.n	8001c34 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_I2C_MspInit+0x78>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <HAL_I2C_MspInit+0x78>)
 8001bee:	f043 0308 	orr.w	r3, r3, #8
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_I2C_MspInit+0x78>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c00:	23c0      	movs	r3, #192	; 0xc0
 8001c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c04:	2312      	movs	r3, #18
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	4619      	mov	r1, r3
 8001c16:	480b      	ldr	r0, [pc, #44]	; (8001c44 <HAL_I2C_MspInit+0x7c>)
 8001c18:	f000 f9d4 	bl	8001fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <HAL_I2C_MspInit+0x78>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	4a07      	ldr	r2, [pc, #28]	; (8001c40 <HAL_I2C_MspInit+0x78>)
 8001c22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c26:	61d3      	str	r3, [r2, #28]
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_I2C_MspInit+0x78>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c34:	bf00      	nop
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40005400 	.word	0x40005400
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010c00 	.word	0x40010c00

08001c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <NMI_Handler+0x4>

08001c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8e:	f000 f875 	bl	8001d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr
	...

08001ca4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ca4:	f7ff fff7 	bl	8001c96 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca8:	480b      	ldr	r0, [pc, #44]	; (8001cd8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001caa:	490c      	ldr	r1, [pc, #48]	; (8001cdc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001cac:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb0:	e002      	b.n	8001cb8 <LoopCopyDataInit>

08001cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cb6:	3304      	adds	r3, #4

08001cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cbc:	d3f9      	bcc.n	8001cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cbe:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cc0:	4c09      	ldr	r4, [pc, #36]	; (8001ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cc4:	e001      	b.n	8001cca <LoopFillZerobss>

08001cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc8:	3204      	adds	r2, #4

08001cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ccc:	d3fb      	bcc.n	8001cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cce:	f002 fa09 	bl	80040e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cd2:	f7ff f9cd 	bl	8001070 <main>
  bx lr
 8001cd6:	4770      	bx	lr
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ce0:	08004fc8 	.word	0x08004fc8
  ldr r2, =_sbss
 8001ce4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ce8:	20000268 	.word	0x20000268

08001cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC1_2_IRQHandler>
	...

08001cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_Init+0x28>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <HAL_Init+0x28>)
 8001cfa:	f043 0310 	orr.w	r3, r3, #16
 8001cfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f000 f92b 	bl	8001f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d06:	200f      	movs	r0, #15
 8001d08:	f000 f808 	bl	8001d1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d0c:	f7ff ff2a 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40022000 	.word	0x40022000

08001d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d24:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_InitTick+0x54>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <HAL_InitTick+0x58>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 f935 	bl	8001faa <HAL_SYSTICK_Config>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e00e      	b.n	8001d68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0f      	cmp	r3, #15
 8001d4e:	d80a      	bhi.n	8001d66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d50:	2200      	movs	r2, #0
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	f000 f90b 	bl	8001f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d5c:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <HAL_InitTick+0x5c>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e000      	b.n	8001d68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000004 	.word	0x20000004
 8001d74:	2000000c 	.word	0x2000000c
 8001d78:	20000008 	.word	0x20000008

08001d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_IncTick+0x1c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_IncTick+0x20>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <HAL_IncTick+0x20>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	2000000c 	.word	0x2000000c
 8001d9c:	2000012c 	.word	0x2000012c

08001da0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return uwTick;
 8001da4:	4b02      	ldr	r3, [pc, #8]	; (8001db0 <HAL_GetTick+0x10>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	2000012c 	.word	0x2000012c

08001db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff fff0 	bl	8001da0 <HAL_GetTick>
 8001dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d005      	beq.n	8001dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_Delay+0x44>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dda:	bf00      	nop
 8001ddc:	f7ff ffe0 	bl	8001da0 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d8f7      	bhi.n	8001ddc <HAL_Delay+0x28>
  {
  }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	2000000c 	.word	0x2000000c

08001dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e2e:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <__NVIC_SetPriorityGrouping+0x44>)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	60d3      	str	r3, [r2, #12]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <__NVIC_GetPriorityGrouping+0x18>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	f003 0307 	and.w	r3, r3, #7
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	db0a      	blt.n	8001e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	490c      	ldr	r1, [pc, #48]	; (8001eac <__NVIC_SetPriority+0x4c>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	0112      	lsls	r2, r2, #4
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	440b      	add	r3, r1
 8001e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e88:	e00a      	b.n	8001ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4908      	ldr	r1, [pc, #32]	; (8001eb0 <__NVIC_SetPriority+0x50>)
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	3b04      	subs	r3, #4
 8001e98:	0112      	lsls	r2, r2, #4
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	761a      	strb	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000e100 	.word	0xe000e100
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f1c3 0307 	rsb	r3, r3, #7
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	bf28      	it	cs
 8001ed2:	2304      	movcs	r3, #4
 8001ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3304      	adds	r3, #4
 8001eda:	2b06      	cmp	r3, #6
 8001edc:	d902      	bls.n	8001ee4 <NVIC_EncodePriority+0x30>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3b03      	subs	r3, #3
 8001ee2:	e000      	b.n	8001ee6 <NVIC_EncodePriority+0x32>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43da      	mvns	r2, r3
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001efc:	f04f 31ff 	mov.w	r1, #4294967295
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	fa01 f303 	lsl.w	r3, r1, r3
 8001f06:	43d9      	mvns	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	4313      	orrs	r3, r2
         );
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f28:	d301      	bcc.n	8001f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00f      	b.n	8001f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <SysTick_Config+0x40>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f36:	210f      	movs	r1, #15
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f7ff ff90 	bl	8001e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <SysTick_Config+0x40>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f46:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <SysTick_Config+0x40>)
 8001f48:	2207      	movs	r2, #7
 8001f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	e000e010 	.word	0xe000e010

08001f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff49 	bl	8001dfc <__NVIC_SetPriorityGrouping>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f84:	f7ff ff5e 	bl	8001e44 <__NVIC_GetPriorityGrouping>
 8001f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	68b9      	ldr	r1, [r7, #8]
 8001f8e:	6978      	ldr	r0, [r7, #20]
 8001f90:	f7ff ff90 	bl	8001eb4 <NVIC_EncodePriority>
 8001f94:	4602      	mov	r2, r0
 8001f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff5f 	bl	8001e60 <__NVIC_SetPriority>
}
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffb0 	bl	8001f18 <SysTick_Config>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b08b      	sub	sp, #44	; 0x2c
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd6:	e161      	b.n	800229c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	f040 8150 	bne.w	8002296 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4a97      	ldr	r2, [pc, #604]	; (8002258 <HAL_GPIO_Init+0x294>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d05e      	beq.n	80020be <HAL_GPIO_Init+0xfa>
 8002000:	4a95      	ldr	r2, [pc, #596]	; (8002258 <HAL_GPIO_Init+0x294>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d875      	bhi.n	80020f2 <HAL_GPIO_Init+0x12e>
 8002006:	4a95      	ldr	r2, [pc, #596]	; (800225c <HAL_GPIO_Init+0x298>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d058      	beq.n	80020be <HAL_GPIO_Init+0xfa>
 800200c:	4a93      	ldr	r2, [pc, #588]	; (800225c <HAL_GPIO_Init+0x298>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d86f      	bhi.n	80020f2 <HAL_GPIO_Init+0x12e>
 8002012:	4a93      	ldr	r2, [pc, #588]	; (8002260 <HAL_GPIO_Init+0x29c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d052      	beq.n	80020be <HAL_GPIO_Init+0xfa>
 8002018:	4a91      	ldr	r2, [pc, #580]	; (8002260 <HAL_GPIO_Init+0x29c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d869      	bhi.n	80020f2 <HAL_GPIO_Init+0x12e>
 800201e:	4a91      	ldr	r2, [pc, #580]	; (8002264 <HAL_GPIO_Init+0x2a0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d04c      	beq.n	80020be <HAL_GPIO_Init+0xfa>
 8002024:	4a8f      	ldr	r2, [pc, #572]	; (8002264 <HAL_GPIO_Init+0x2a0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d863      	bhi.n	80020f2 <HAL_GPIO_Init+0x12e>
 800202a:	4a8f      	ldr	r2, [pc, #572]	; (8002268 <HAL_GPIO_Init+0x2a4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d046      	beq.n	80020be <HAL_GPIO_Init+0xfa>
 8002030:	4a8d      	ldr	r2, [pc, #564]	; (8002268 <HAL_GPIO_Init+0x2a4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d85d      	bhi.n	80020f2 <HAL_GPIO_Init+0x12e>
 8002036:	2b12      	cmp	r3, #18
 8002038:	d82a      	bhi.n	8002090 <HAL_GPIO_Init+0xcc>
 800203a:	2b12      	cmp	r3, #18
 800203c:	d859      	bhi.n	80020f2 <HAL_GPIO_Init+0x12e>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <HAL_GPIO_Init+0x80>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	080020bf 	.word	0x080020bf
 8002048:	08002099 	.word	0x08002099
 800204c:	080020ab 	.word	0x080020ab
 8002050:	080020ed 	.word	0x080020ed
 8002054:	080020f3 	.word	0x080020f3
 8002058:	080020f3 	.word	0x080020f3
 800205c:	080020f3 	.word	0x080020f3
 8002060:	080020f3 	.word	0x080020f3
 8002064:	080020f3 	.word	0x080020f3
 8002068:	080020f3 	.word	0x080020f3
 800206c:	080020f3 	.word	0x080020f3
 8002070:	080020f3 	.word	0x080020f3
 8002074:	080020f3 	.word	0x080020f3
 8002078:	080020f3 	.word	0x080020f3
 800207c:	080020f3 	.word	0x080020f3
 8002080:	080020f3 	.word	0x080020f3
 8002084:	080020f3 	.word	0x080020f3
 8002088:	080020a1 	.word	0x080020a1
 800208c:	080020b5 	.word	0x080020b5
 8002090:	4a76      	ldr	r2, [pc, #472]	; (800226c <HAL_GPIO_Init+0x2a8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002096:	e02c      	b.n	80020f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	623b      	str	r3, [r7, #32]
          break;
 800209e:	e029      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	3304      	adds	r3, #4
 80020a6:	623b      	str	r3, [r7, #32]
          break;
 80020a8:	e024      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	3308      	adds	r3, #8
 80020b0:	623b      	str	r3, [r7, #32]
          break;
 80020b2:	e01f      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	330c      	adds	r3, #12
 80020ba:	623b      	str	r3, [r7, #32]
          break;
 80020bc:	e01a      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020c6:	2304      	movs	r3, #4
 80020c8:	623b      	str	r3, [r7, #32]
          break;
 80020ca:	e013      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020d4:	2308      	movs	r3, #8
 80020d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	611a      	str	r2, [r3, #16]
          break;
 80020de:	e009      	b.n	80020f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e0:	2308      	movs	r3, #8
 80020e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	615a      	str	r2, [r3, #20]
          break;
 80020ea:	e003      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020ec:	2300      	movs	r3, #0
 80020ee:	623b      	str	r3, [r7, #32]
          break;
 80020f0:	e000      	b.n	80020f4 <HAL_GPIO_Init+0x130>
          break;
 80020f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2bff      	cmp	r3, #255	; 0xff
 80020f8:	d801      	bhi.n	80020fe <HAL_GPIO_Init+0x13a>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	e001      	b.n	8002102 <HAL_GPIO_Init+0x13e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3304      	adds	r3, #4
 8002102:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2bff      	cmp	r3, #255	; 0xff
 8002108:	d802      	bhi.n	8002110 <HAL_GPIO_Init+0x14c>
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	e002      	b.n	8002116 <HAL_GPIO_Init+0x152>
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	3b08      	subs	r3, #8
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	210f      	movs	r1, #15
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	401a      	ands	r2, r3
 8002128:	6a39      	ldr	r1, [r7, #32]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	fa01 f303 	lsl.w	r3, r1, r3
 8002130:	431a      	orrs	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80a9 	beq.w	8002296 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002144:	4b4a      	ldr	r3, [pc, #296]	; (8002270 <HAL_GPIO_Init+0x2ac>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4a49      	ldr	r2, [pc, #292]	; (8002270 <HAL_GPIO_Init+0x2ac>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6193      	str	r3, [r2, #24]
 8002150:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_GPIO_Init+0x2ac>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800215c:	4a45      	ldr	r2, [pc, #276]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002168:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	220f      	movs	r2, #15
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4013      	ands	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3d      	ldr	r2, [pc, #244]	; (8002278 <HAL_GPIO_Init+0x2b4>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00d      	beq.n	80021a4 <HAL_GPIO_Init+0x1e0>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3c      	ldr	r2, [pc, #240]	; (800227c <HAL_GPIO_Init+0x2b8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <HAL_GPIO_Init+0x1dc>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a3b      	ldr	r2, [pc, #236]	; (8002280 <HAL_GPIO_Init+0x2bc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d101      	bne.n	800219c <HAL_GPIO_Init+0x1d8>
 8002198:	2302      	movs	r3, #2
 800219a:	e004      	b.n	80021a6 <HAL_GPIO_Init+0x1e2>
 800219c:	2303      	movs	r3, #3
 800219e:	e002      	b.n	80021a6 <HAL_GPIO_Init+0x1e2>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_GPIO_Init+0x1e2>
 80021a4:	2300      	movs	r3, #0
 80021a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a8:	f002 0203 	and.w	r2, r2, #3
 80021ac:	0092      	lsls	r2, r2, #2
 80021ae:	4093      	lsls	r3, r2
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021b6:	492f      	ldr	r1, [pc, #188]	; (8002274 <HAL_GPIO_Init+0x2b0>)
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021d0:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	492b      	ldr	r1, [pc, #172]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021de:	4b29      	ldr	r3, [pc, #164]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	4927      	ldr	r1, [pc, #156]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d006      	beq.n	8002206 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	4921      	ldr	r1, [pc, #132]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002206:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	43db      	mvns	r3, r3
 800220e:	491d      	ldr	r1, [pc, #116]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 8002210:	4013      	ands	r3, r2
 8002212:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002220:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4917      	ldr	r1, [pc, #92]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
 800222c:	e006      	b.n	800223c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	43db      	mvns	r3, r3
 8002236:	4913      	ldr	r1, [pc, #76]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 8002238:	4013      	ands	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01f      	beq.n	8002288 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002248:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	490d      	ldr	r1, [pc, #52]	; (8002284 <HAL_GPIO_Init+0x2c0>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
 8002254:	e01f      	b.n	8002296 <HAL_GPIO_Init+0x2d2>
 8002256:	bf00      	nop
 8002258:	10320000 	.word	0x10320000
 800225c:	10310000 	.word	0x10310000
 8002260:	10220000 	.word	0x10220000
 8002264:	10210000 	.word	0x10210000
 8002268:	10120000 	.word	0x10120000
 800226c:	10110000 	.word	0x10110000
 8002270:	40021000 	.word	0x40021000
 8002274:	40010000 	.word	0x40010000
 8002278:	40010800 	.word	0x40010800
 800227c:	40010c00 	.word	0x40010c00
 8002280:	40011000 	.word	0x40011000
 8002284:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_GPIO_Init+0x2f4>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	43db      	mvns	r3, r3
 8002290:	4909      	ldr	r1, [pc, #36]	; (80022b8 <HAL_GPIO_Init+0x2f4>)
 8002292:	4013      	ands	r3, r2
 8002294:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	3301      	adds	r3, #1
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	fa22 f303 	lsr.w	r3, r2, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f47f ae96 	bne.w	8001fd8 <HAL_GPIO_Init+0x14>
  }
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	372c      	adds	r7, #44	; 0x2c
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	40010400 	.word	0x40010400

080022bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
 80022c8:	4613      	mov	r3, r2
 80022ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022cc:	787b      	ldrb	r3, [r7, #1]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022d8:	e003      	b.n	80022e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022da:	887b      	ldrh	r3, [r7, #2]
 80022dc:	041a      	lsls	r2, r3, #16
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	611a      	str	r2, [r3, #16]
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e12b      	b.n	8002556 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff fc58 	bl	8001bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2224      	movs	r2, #36	; 0x24
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800233e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800234e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002350:	f001 fe88 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8002354:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	4a81      	ldr	r2, [pc, #516]	; (8002560 <HAL_I2C_Init+0x274>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d807      	bhi.n	8002370 <HAL_I2C_Init+0x84>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4a80      	ldr	r2, [pc, #512]	; (8002564 <HAL_I2C_Init+0x278>)
 8002364:	4293      	cmp	r3, r2
 8002366:	bf94      	ite	ls
 8002368:	2301      	movls	r3, #1
 800236a:	2300      	movhi	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	e006      	b.n	800237e <HAL_I2C_Init+0x92>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4a7d      	ldr	r2, [pc, #500]	; (8002568 <HAL_I2C_Init+0x27c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	bf94      	ite	ls
 8002378:	2301      	movls	r3, #1
 800237a:	2300      	movhi	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e0e7      	b.n	8002556 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4a78      	ldr	r2, [pc, #480]	; (800256c <HAL_I2C_Init+0x280>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	0c9b      	lsrs	r3, r3, #18
 8002390:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	430a      	orrs	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4a6a      	ldr	r2, [pc, #424]	; (8002560 <HAL_I2C_Init+0x274>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d802      	bhi.n	80023c0 <HAL_I2C_Init+0xd4>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	3301      	adds	r3, #1
 80023be:	e009      	b.n	80023d4 <HAL_I2C_Init+0xe8>
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	4a69      	ldr	r2, [pc, #420]	; (8002570 <HAL_I2C_Init+0x284>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	3301      	adds	r3, #1
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	430b      	orrs	r3, r1
 80023da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	495c      	ldr	r1, [pc, #368]	; (8002560 <HAL_I2C_Init+0x274>)
 80023f0:	428b      	cmp	r3, r1
 80023f2:	d819      	bhi.n	8002428 <HAL_I2C_Init+0x13c>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1e59      	subs	r1, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002402:	1c59      	adds	r1, r3, #1
 8002404:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002408:	400b      	ands	r3, r1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_I2C_Init+0x138>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1e59      	subs	r1, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fbb1 f3f3 	udiv	r3, r1, r3
 800241c:	3301      	adds	r3, #1
 800241e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002422:	e051      	b.n	80024c8 <HAL_I2C_Init+0x1dc>
 8002424:	2304      	movs	r3, #4
 8002426:	e04f      	b.n	80024c8 <HAL_I2C_Init+0x1dc>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d111      	bne.n	8002454 <HAL_I2C_Init+0x168>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e58      	subs	r0, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	440b      	add	r3, r1
 800243e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002442:	3301      	adds	r3, #1
 8002444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	e012      	b.n	800247a <HAL_I2C_Init+0x18e>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1e58      	subs	r0, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	0099      	lsls	r1, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	fbb0 f3f3 	udiv	r3, r0, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002470:	2b00      	cmp	r3, #0
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Init+0x196>
 800247e:	2301      	movs	r3, #1
 8002480:	e022      	b.n	80024c8 <HAL_I2C_Init+0x1dc>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10e      	bne.n	80024a8 <HAL_I2C_Init+0x1bc>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1e58      	subs	r0, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6859      	ldr	r1, [r3, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	440b      	add	r3, r1
 8002498:	fbb0 f3f3 	udiv	r3, r0, r3
 800249c:	3301      	adds	r3, #1
 800249e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a6:	e00f      	b.n	80024c8 <HAL_I2C_Init+0x1dc>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1e58      	subs	r0, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6859      	ldr	r1, [r3, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	0099      	lsls	r1, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80024be:	3301      	adds	r3, #1
 80024c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	6809      	ldr	r1, [r1, #0]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69da      	ldr	r2, [r3, #28]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6911      	ldr	r1, [r2, #16]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68d2      	ldr	r2, [r2, #12]
 8002502:	4311      	orrs	r1, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6812      	ldr	r2, [r2, #0]
 8002508:	430b      	orrs	r3, r1
 800250a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695a      	ldr	r2, [r3, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	000186a0 	.word	0x000186a0
 8002564:	001e847f 	.word	0x001e847f
 8002568:	003d08ff 	.word	0x003d08ff
 800256c:	431bde83 	.word	0x431bde83
 8002570:	10624dd3 	.word	0x10624dd3

08002574 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	461a      	mov	r2, r3
 8002580:	460b      	mov	r3, r1
 8002582:	817b      	strh	r3, [r7, #10]
 8002584:	4613      	mov	r3, r2
 8002586:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff fc0a 	bl	8001da0 <HAL_GetTick>
 800258c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b20      	cmp	r3, #32
 8002598:	f040 80e0 	bne.w	800275c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	2319      	movs	r3, #25
 80025a2:	2201      	movs	r2, #1
 80025a4:	4970      	ldr	r1, [pc, #448]	; (8002768 <HAL_I2C_Master_Transmit+0x1f4>)
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 ff5c 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025b2:	2302      	movs	r3, #2
 80025b4:	e0d3      	b.n	800275e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_I2C_Master_Transmit+0x50>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e0cc      	b.n	800275e <HAL_I2C_Master_Transmit+0x1ea>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d007      	beq.n	80025ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2221      	movs	r2, #33	; 0x21
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2210      	movs	r2, #16
 8002606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	893a      	ldrh	r2, [r7, #8]
 800261a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4a50      	ldr	r2, [pc, #320]	; (800276c <HAL_I2C_Master_Transmit+0x1f8>)
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800262c:	8979      	ldrh	r1, [r7, #10]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	6a3a      	ldr	r2, [r7, #32]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fd30 	bl	8003098 <I2C_MasterRequestWrite>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e08d      	b.n	800275e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002658:	e066      	b.n	8002728 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	6a39      	ldr	r1, [r7, #32]
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f001 f81a 	bl	8003698 <I2C_WaitOnTXEFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00d      	beq.n	8002686 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	2b04      	cmp	r3, #4
 8002670:	d107      	bne.n	8002682 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002680:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e06b      	b.n	800275e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	781a      	ldrb	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d11b      	bne.n	80026fc <HAL_I2C_Master_Transmit+0x188>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d017      	beq.n	80026fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	781a      	ldrb	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	6a39      	ldr	r1, [r7, #32]
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f001 f811 	bl	8003728 <I2C_WaitOnBTFFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	2b04      	cmp	r3, #4
 8002712:	d107      	bne.n	8002724 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002722:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e01a      	b.n	800275e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	d194      	bne.n	800265a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	e000      	b.n	800275e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800275c:	2302      	movs	r3, #2
  }
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	00100002 	.word	0x00100002
 800276c:	ffff0000 	.word	0xffff0000

08002770 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08c      	sub	sp, #48	; 0x30
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	461a      	mov	r2, r3
 800277c:	460b      	mov	r3, r1
 800277e:	817b      	strh	r3, [r7, #10]
 8002780:	4613      	mov	r3, r2
 8002782:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002784:	2300      	movs	r3, #0
 8002786:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002788:	f7ff fb0a 	bl	8001da0 <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b20      	cmp	r3, #32
 8002798:	f040 824b 	bne.w	8002c32 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2319      	movs	r3, #25
 80027a2:	2201      	movs	r2, #1
 80027a4:	497f      	ldr	r1, [pc, #508]	; (80029a4 <HAL_I2C_Master_Receive+0x234>)
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fe5c 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80027b2:	2302      	movs	r3, #2
 80027b4:	e23e      	b.n	8002c34 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_I2C_Master_Receive+0x54>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e237      	b.n	8002c34 <HAL_I2C_Master_Receive+0x4c4>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d007      	beq.n	80027ea <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0201 	orr.w	r2, r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2222      	movs	r2, #34	; 0x22
 80027fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2210      	movs	r2, #16
 8002806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	893a      	ldrh	r2, [r7, #8]
 800281a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a5f      	ldr	r2, [pc, #380]	; (80029a8 <HAL_I2C_Master_Receive+0x238>)
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800282c:	8979      	ldrh	r1, [r7, #10]
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fcb2 	bl	800319c <I2C_MasterRequestRead>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e1f8      	b.n	8002c34 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002846:	2b00      	cmp	r3, #0
 8002848:	d113      	bne.n	8002872 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	61fb      	str	r3, [r7, #28]
 800285e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e1cc      	b.n	8002c0c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	2b01      	cmp	r3, #1
 8002878:	d11e      	bne.n	80028b8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002888:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800288a:	b672      	cpsid	i
}
 800288c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028b4:	b662      	cpsie	i
}
 80028b6:	e035      	b.n	8002924 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d11e      	bne.n	80028fe <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028d0:	b672      	cpsid	i
}
 80028d2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80028fa:	b662      	cpsie	i
}
 80028fc:	e012      	b.n	8002924 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800290c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002924:	e172      	b.n	8002c0c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	2b03      	cmp	r3, #3
 800292c:	f200 811f 	bhi.w	8002b6e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	2b01      	cmp	r3, #1
 8002936:	d123      	bne.n	8002980 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 ff3b 	bl	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e173      	b.n	8002c34 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29b      	uxth	r3, r3
 8002976:	3b01      	subs	r3, #1
 8002978:	b29a      	uxth	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800297e:	e145      	b.n	8002c0c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002984:	2b02      	cmp	r3, #2
 8002986:	d152      	bne.n	8002a2e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	2200      	movs	r2, #0
 8002990:	4906      	ldr	r1, [pc, #24]	; (80029ac <HAL_I2C_Master_Receive+0x23c>)
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fd66 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e148      	b.n	8002c34 <HAL_I2C_Master_Receive+0x4c4>
 80029a2:	bf00      	nop
 80029a4:	00100002 	.word	0x00100002
 80029a8:	ffff0000 	.word	0xffff0000
 80029ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80029b0:	b672      	cpsid	i
}
 80029b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029f6:	b662      	cpsie	i
}
 80029f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	1c5a      	adds	r2, r3, #1
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	3b01      	subs	r3, #1
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a2c:	e0ee      	b.n	8002c0c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	2200      	movs	r2, #0
 8002a36:	4981      	ldr	r1, [pc, #516]	; (8002c3c <HAL_I2C_Master_Receive+0x4cc>)
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fd13 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0f5      	b.n	8002c34 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a58:	b672      	cpsid	i
}
 8002a5a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002a8e:	4b6c      	ldr	r3, [pc, #432]	; (8002c40 <HAL_I2C_Master_Receive+0x4d0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	08db      	lsrs	r3, r3, #3
 8002a94:	4a6b      	ldr	r2, [pc, #428]	; (8002c44 <HAL_I2C_Master_Receive+0x4d4>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0a1a      	lsrs	r2, r3, #8
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00da      	lsls	r2, r3, #3
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d118      	bne.n	8002ae6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	f043 0220 	orr.w	r2, r3, #32
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ad6:	b662      	cpsie	i
}
 8002ad8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e0a6      	b.n	8002c34 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d1d9      	bne.n	8002aa8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b36:	b662      	cpsie	i
}
 8002b38:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b6c:	e04e      	b.n	8002c0c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fe20 	bl	80037b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e058      	b.n	8002c34 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d124      	bne.n	8002c0c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d107      	bne.n	8002bda <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f47f ae88 	bne.w	8002926 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002c32:	2302      	movs	r3, #2
  }
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3728      	adds	r7, #40	; 0x28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	00010004 	.word	0x00010004
 8002c40:	20000004 	.word	0x20000004
 8002c44:	14f8b589 	.word	0x14f8b589

08002c48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	4608      	mov	r0, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	817b      	strh	r3, [r7, #10]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	813b      	strh	r3, [r7, #8]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c62:	f7ff f89d 	bl	8001da0 <HAL_GetTick>
 8002c66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	f040 80d9 	bne.w	8002e28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2319      	movs	r3, #25
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	496d      	ldr	r1, [pc, #436]	; (8002e34 <HAL_I2C_Mem_Write+0x1ec>)
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fbef 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e0cc      	b.n	8002e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_I2C_Mem_Write+0x56>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e0c5      	b.n	8002e2a <HAL_I2C_Mem_Write+0x1e2>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0301 	and.w	r3, r3, #1
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d007      	beq.n	8002cc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2221      	movs	r2, #33	; 0x21
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2240      	movs	r2, #64	; 0x40
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a4d      	ldr	r2, [pc, #308]	; (8002e38 <HAL_I2C_Mem_Write+0x1f0>)
 8002d04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d06:	88f8      	ldrh	r0, [r7, #6]
 8002d08:	893a      	ldrh	r2, [r7, #8]
 8002d0a:	8979      	ldrh	r1, [r7, #10]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	4603      	mov	r3, r0
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fb0e 	bl	8003338 <I2C_RequestMemoryWrite>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d052      	beq.n	8002dc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e081      	b.n	8002e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fcb4 	bl	8003698 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00d      	beq.n	8002d52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d107      	bne.n	8002d4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e06b      	b.n	8002e2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d11b      	bne.n	8002dc8 <HAL_I2C_Mem_Write+0x180>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d017      	beq.n	8002dc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	781a      	ldrb	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1aa      	bne.n	8002d26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 fca7 	bl	8003728 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00d      	beq.n	8002dfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d107      	bne.n	8002df8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e016      	b.n	8002e2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	e000      	b.n	8002e2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
  }
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	00100002 	.word	0x00100002
 8002e38:	ffff0000 	.word	0xffff0000

08002e3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e4c:	f7fe ffa8 	bl	8001da0 <HAL_GetTick>
 8002e50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	f040 8111 	bne.w	8003086 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	2319      	movs	r3, #25
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4988      	ldr	r1, [pc, #544]	; (8003090 <HAL_I2C_IsDeviceReady+0x254>)
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 faf8 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e104      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_I2C_IsDeviceReady+0x50>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e0fd      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x24c>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d007      	beq.n	8002eb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0201 	orr.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ec0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2224      	movs	r2, #36	; 0x24
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4a70      	ldr	r2, [pc, #448]	; (8003094 <HAL_I2C_IsDeviceReady+0x258>)
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fab6 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00d      	beq.n	8002f1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f0c:	d103      	bne.n	8002f16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0b6      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f1a:	897b      	ldrh	r3, [r7, #10]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe ff39 	bl	8001da0 <HAL_GetTick>
 8002f2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	bf0c      	ite	eq
 8002f3e:	2301      	moveq	r3, #1
 8002f40:	2300      	movne	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f54:	bf0c      	ite	eq
 8002f56:	2301      	moveq	r3, #1
 8002f58:	2300      	movne	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f5e:	e025      	b.n	8002fac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f60:	f7fe ff1e 	bl	8001da0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d302      	bcc.n	8002f76 <HAL_I2C_IsDeviceReady+0x13a>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d103      	bne.n	8002f7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	22a0      	movs	r2, #160	; 0xa0
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2ba0      	cmp	r3, #160	; 0xa0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_I2C_IsDeviceReady+0x188>
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d102      	bne.n	8002fc4 <HAL_I2C_IsDeviceReady+0x188>
 8002fbe:	7dbb      	ldrb	r3, [r7, #22]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0cd      	beq.n	8002f60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d129      	bne.n	800302e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	613b      	str	r3, [r7, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	2319      	movs	r3, #25
 8003006:	2201      	movs	r2, #1
 8003008:	4921      	ldr	r1, [pc, #132]	; (8003090 <HAL_I2C_IsDeviceReady+0x254>)
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 fa2a 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e036      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800302a:	2300      	movs	r3, #0
 800302c:	e02c      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800303c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003046:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2319      	movs	r3, #25
 800304e:	2201      	movs	r2, #1
 8003050:	490f      	ldr	r1, [pc, #60]	; (8003090 <HAL_I2C_IsDeviceReady+0x254>)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 fa06 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e012      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	3301      	adds	r3, #1
 8003066:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	f4ff af32 	bcc.w	8002ed6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e000      	b.n	8003088 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003086:	2302      	movs	r3, #2
  }
}
 8003088:	4618      	mov	r0, r3
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	00100002 	.word	0x00100002
 8003094:	ffff0000 	.word	0xffff0000

08003098 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	460b      	mov	r3, r1
 80030a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d006      	beq.n	80030c2 <I2C_MasterRequestWrite+0x2a>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d003      	beq.n	80030c2 <I2C_MasterRequestWrite+0x2a>
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030c0:	d108      	bne.n	80030d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	e00b      	b.n	80030ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	2b12      	cmp	r3, #18
 80030da:	d107      	bne.n	80030ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f9b3 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00d      	beq.n	8003120 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003112:	d103      	bne.n	800311c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800311a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e035      	b.n	800318c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003128:	d108      	bne.n	800313c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800312a:	897b      	ldrh	r3, [r7, #10]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003138:	611a      	str	r2, [r3, #16]
 800313a:	e01b      	b.n	8003174 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800313c:	897b      	ldrh	r3, [r7, #10]
 800313e:	11db      	asrs	r3, r3, #7
 8003140:	b2db      	uxtb	r3, r3
 8003142:	f003 0306 	and.w	r3, r3, #6
 8003146:	b2db      	uxtb	r3, r3
 8003148:	f063 030f 	orn	r3, r3, #15
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	490e      	ldr	r1, [pc, #56]	; (8003194 <I2C_MasterRequestWrite+0xfc>)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f9fc 	bl	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e010      	b.n	800318c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800316a:	897b      	ldrh	r3, [r7, #10]
 800316c:	b2da      	uxtb	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	4907      	ldr	r1, [pc, #28]	; (8003198 <I2C_MasterRequestWrite+0x100>)
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f9ec 	bl	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3718      	adds	r7, #24
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	00010008 	.word	0x00010008
 8003198:	00010002 	.word	0x00010002

0800319c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af02      	add	r7, sp, #8
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	603b      	str	r3, [r7, #0]
 80031a8:	460b      	mov	r3, r1
 80031aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d006      	beq.n	80031d6 <I2C_MasterRequestRead+0x3a>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d003      	beq.n	80031d6 <I2C_MasterRequestRead+0x3a>
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031d4:	d108      	bne.n	80031e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e00b      	b.n	8003200 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	2b11      	cmp	r3, #17
 80031ee:	d107      	bne.n	8003200 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f929 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00d      	beq.n	8003234 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003226:	d103      	bne.n	8003230 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800322e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e079      	b.n	8003328 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800323c:	d108      	bne.n	8003250 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800323e:	897b      	ldrh	r3, [r7, #10]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	b2da      	uxtb	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	611a      	str	r2, [r3, #16]
 800324e:	e05f      	b.n	8003310 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003250:	897b      	ldrh	r3, [r7, #10]
 8003252:	11db      	asrs	r3, r3, #7
 8003254:	b2db      	uxtb	r3, r3
 8003256:	f003 0306 	and.w	r3, r3, #6
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f063 030f 	orn	r3, r3, #15
 8003260:	b2da      	uxtb	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	4930      	ldr	r1, [pc, #192]	; (8003330 <I2C_MasterRequestRead+0x194>)
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f972 	bl	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e054      	b.n	8003328 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800327e:	897b      	ldrh	r3, [r7, #10]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4929      	ldr	r1, [pc, #164]	; (8003334 <I2C_MasterRequestRead+0x198>)
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f962 	bl	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e044      	b.n	8003328 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329e:	2300      	movs	r3, #0
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f8c7 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ea:	d103      	bne.n	80032f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e017      	b.n	8003328 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80032f8:	897b      	ldrh	r3, [r7, #10]
 80032fa:	11db      	asrs	r3, r3, #7
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	f003 0306 	and.w	r3, r3, #6
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f063 030e 	orn	r3, r3, #14
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4907      	ldr	r1, [pc, #28]	; (8003334 <I2C_MasterRequestRead+0x198>)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f91e 	bl	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	00010008 	.word	0x00010008
 8003334:	00010002 	.word	0x00010002

08003338 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b088      	sub	sp, #32
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	461a      	mov	r2, r3
 8003346:	4603      	mov	r3, r0
 8003348:	817b      	strh	r3, [r7, #10]
 800334a:	460b      	mov	r3, r1
 800334c:	813b      	strh	r3, [r7, #8]
 800334e:	4613      	mov	r3, r2
 8003350:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003360:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	2200      	movs	r2, #0
 800336a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f878 	bl	8003464 <I2C_WaitOnFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00d      	beq.n	8003396 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003388:	d103      	bne.n	8003392 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e05f      	b.n	8003456 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	6a3a      	ldr	r2, [r7, #32]
 80033aa:	492d      	ldr	r1, [pc, #180]	; (8003460 <I2C_RequestMemoryWrite+0x128>)
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f8d3 	bl	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e04c      	b.n	8003456 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d4:	6a39      	ldr	r1, [r7, #32]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f95e 	bl	8003698 <I2C_WaitOnTXEFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d107      	bne.n	80033fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e02b      	b.n	8003456 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d105      	bne.n	8003410 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003404:	893b      	ldrh	r3, [r7, #8]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	611a      	str	r2, [r3, #16]
 800340e:	e021      	b.n	8003454 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003410:	893b      	ldrh	r3, [r7, #8]
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	b29b      	uxth	r3, r3
 8003416:	b2da      	uxtb	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003420:	6a39      	ldr	r1, [r7, #32]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f938 	bl	8003698 <I2C_WaitOnTXEFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00d      	beq.n	800344a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b04      	cmp	r3, #4
 8003434:	d107      	bne.n	8003446 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003444:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e005      	b.n	8003456 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800344a:	893b      	ldrh	r3, [r7, #8]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	00010002 	.word	0x00010002

08003464 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003474:	e048      	b.n	8003508 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d044      	beq.n	8003508 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7fe fc8f 	bl	8001da0 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_WaitOnFlagUntilTimeout+0x30>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d139      	bne.n	8003508 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	0c1b      	lsrs	r3, r3, #16
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	d10d      	bne.n	80034ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	43da      	mvns	r2, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	e00c      	b.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	43da      	mvns	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	4013      	ands	r3, r2
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf0c      	ite	eq
 80034cc:	2301      	moveq	r3, #1
 80034ce:	2300      	movne	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d116      	bne.n	8003508 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f043 0220 	orr.w	r2, r3, #32
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e023      	b.n	8003550 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	0c1b      	lsrs	r3, r3, #16
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b01      	cmp	r3, #1
 8003510:	d10d      	bne.n	800352e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	43da      	mvns	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	4013      	ands	r3, r2
 800351e:	b29b      	uxth	r3, r3
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf0c      	ite	eq
 8003524:	2301      	moveq	r3, #1
 8003526:	2300      	movne	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	e00c      	b.n	8003548 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	43da      	mvns	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4013      	ands	r3, r2
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	79fb      	ldrb	r3, [r7, #7]
 800354a:	429a      	cmp	r2, r3
 800354c:	d093      	beq.n	8003476 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003566:	e071      	b.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003576:	d123      	bne.n	80035c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003586:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003590:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	f043 0204 	orr.w	r2, r3, #4
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e067      	b.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c6:	d041      	beq.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c8:	f7fe fbea 	bl	8001da0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d302      	bcc.n	80035de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d136      	bne.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d10c      	bne.n	8003602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4013      	ands	r3, r2
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	bf14      	ite	ne
 80035fa:	2301      	movne	r3, #1
 80035fc:	2300      	moveq	r3, #0
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	e00b      	b.n	800361a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	43da      	mvns	r2, r3
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4013      	ands	r3, r2
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf14      	ite	ne
 8003614:	2301      	movne	r3, #1
 8003616:	2300      	moveq	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e021      	b.n	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	0c1b      	lsrs	r3, r3, #16
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10c      	bne.n	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	43da      	mvns	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	4013      	ands	r3, r2
 8003662:	b29b      	uxth	r3, r3
 8003664:	2b00      	cmp	r3, #0
 8003666:	bf14      	ite	ne
 8003668:	2301      	movne	r3, #1
 800366a:	2300      	moveq	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	e00b      	b.n	8003688 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	43da      	mvns	r2, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4013      	ands	r3, r2
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	bf14      	ite	ne
 8003682:	2301      	movne	r3, #1
 8003684:	2300      	moveq	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	f47f af6d 	bne.w	8003568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a4:	e034      	b.n	8003710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f8e3 	bl	8003872 <I2C_IsAcknowledgeFailed>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e034      	b.n	8003720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036bc:	d028      	beq.n	8003710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036be:	f7fe fb6f 	bl	8001da0 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d302      	bcc.n	80036d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d11d      	bne.n	8003710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036de:	2b80      	cmp	r3, #128	; 0x80
 80036e0:	d016      	beq.n	8003710 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e007      	b.n	8003720 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371a:	2b80      	cmp	r3, #128	; 0x80
 800371c:	d1c3      	bne.n	80036a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003734:	e034      	b.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f89b 	bl	8003872 <I2C_IsAcknowledgeFailed>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e034      	b.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d028      	beq.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374e:	f7fe fb27 	bl	8001da0 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	429a      	cmp	r2, r3
 800375c:	d302      	bcc.n	8003764 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d11d      	bne.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b04      	cmp	r3, #4
 8003770:	d016      	beq.n	80037a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f043 0220 	orr.w	r2, r3, #32
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e007      	b.n	80037b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d1c3      	bne.n	8003736 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037c4:	e049      	b.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d119      	bne.n	8003808 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0210 	mvn.w	r2, #16
 80037dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e030      	b.n	800386a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003808:	f7fe faca 	bl	8001da0 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d302      	bcc.n	800381e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11d      	bne.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003828:	2b40      	cmp	r3, #64	; 0x40
 800382a:	d016      	beq.n	800385a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e007      	b.n	800386a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	d1ae      	bne.n	80037c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003888:	d11b      	bne.n	80038c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003892:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f043 0204 	orr.w	r2, r3, #4
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc80      	pop	{r7}
 80038cc:	4770      	bx	lr
	...

080038d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e272      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f000 8087 	beq.w	80039fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038f0:	4b92      	ldr	r3, [pc, #584]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d00c      	beq.n	8003916 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038fc:	4b8f      	ldr	r3, [pc, #572]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 030c 	and.w	r3, r3, #12
 8003904:	2b08      	cmp	r3, #8
 8003906:	d112      	bne.n	800392e <HAL_RCC_OscConfig+0x5e>
 8003908:	4b8c      	ldr	r3, [pc, #560]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003914:	d10b      	bne.n	800392e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003916:	4b89      	ldr	r3, [pc, #548]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d06c      	beq.n	80039fc <HAL_RCC_OscConfig+0x12c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d168      	bne.n	80039fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e24c      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003936:	d106      	bne.n	8003946 <HAL_RCC_OscConfig+0x76>
 8003938:	4b80      	ldr	r3, [pc, #512]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a7f      	ldr	r2, [pc, #508]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800393e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e02e      	b.n	80039a4 <HAL_RCC_OscConfig+0xd4>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x98>
 800394e:	4b7b      	ldr	r3, [pc, #492]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a7a      	ldr	r2, [pc, #488]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b78      	ldr	r3, [pc, #480]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a77      	ldr	r2, [pc, #476]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e01d      	b.n	80039a4 <HAL_RCC_OscConfig+0xd4>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0xbc>
 8003972:	4b72      	ldr	r3, [pc, #456]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a71      	ldr	r2, [pc, #452]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b6f      	ldr	r3, [pc, #444]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6e      	ldr	r2, [pc, #440]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0xd4>
 800398c:	4b6b      	ldr	r3, [pc, #428]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a6a      	ldr	r2, [pc, #424]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b68      	ldr	r3, [pc, #416]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a67      	ldr	r2, [pc, #412]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 800399e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe f9f8 	bl	8001da0 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fe f9f4 	bl	8001da0 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e200      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b5d      	ldr	r3, [pc, #372]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0xe4>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe f9e4 	bl	8001da0 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fe f9e0 	bl	8001da0 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e1ec      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	4b53      	ldr	r3, [pc, #332]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x10c>
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d063      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a0a:	4b4c      	ldr	r3, [pc, #304]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a16:	4b49      	ldr	r3, [pc, #292]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d11c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x18c>
 8003a22:	4b46      	ldr	r3, [pc, #280]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d116      	bne.n	8003a5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	4b43      	ldr	r3, [pc, #268]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_RCC_OscConfig+0x176>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e1c0      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a46:	4b3d      	ldr	r3, [pc, #244]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4939      	ldr	r1, [pc, #228]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5a:	e03a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a64:	4b36      	ldr	r3, [pc, #216]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fe f999 	bl	8001da0 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fe f995 	bl	8001da0 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e1a1      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	4b2d      	ldr	r3, [pc, #180]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4927      	ldr	r1, [pc, #156]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
 8003aa4:	e015      	b.n	8003ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa6:	4b26      	ldr	r3, [pc, #152]	; (8003b40 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fe f978 	bl	8001da0 <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab4:	f7fe f974 	bl	8001da0 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e180      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	4b1d      	ldr	r3, [pc, #116]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d03a      	beq.n	8003b54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d019      	beq.n	8003b1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae6:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <HAL_RCC_OscConfig+0x274>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aec:	f7fe f958 	bl	8001da0 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af4:	f7fe f954 	bl	8001da0 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e160      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <HAL_RCC_OscConfig+0x26c>)
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b12:	2001      	movs	r0, #1
 8003b14:	f000 faba 	bl	800408c <RCC_Delay>
 8003b18:	e01c      	b.n	8003b54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <HAL_RCC_OscConfig+0x274>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b20:	f7fe f93e 	bl	8001da0 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b26:	e00f      	b.n	8003b48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b28:	f7fe f93a 	bl	8001da0 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d908      	bls.n	8003b48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e146      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	42420000 	.word	0x42420000
 8003b44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b48:	4b92      	ldr	r3, [pc, #584]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e9      	bne.n	8003b28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80a6 	beq.w	8003cae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b62:	2300      	movs	r3, #0
 8003b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b66:	4b8b      	ldr	r3, [pc, #556]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10d      	bne.n	8003b8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b72:	4b88      	ldr	r3, [pc, #544]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	4a87      	ldr	r2, [pc, #540]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7c:	61d3      	str	r3, [r2, #28]
 8003b7e:	4b85      	ldr	r3, [pc, #532]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8e:	4b82      	ldr	r3, [pc, #520]	; (8003d98 <HAL_RCC_OscConfig+0x4c8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d118      	bne.n	8003bcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9a:	4b7f      	ldr	r3, [pc, #508]	; (8003d98 <HAL_RCC_OscConfig+0x4c8>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a7e      	ldr	r2, [pc, #504]	; (8003d98 <HAL_RCC_OscConfig+0x4c8>)
 8003ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba6:	f7fe f8fb 	bl	8001da0 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bae:	f7fe f8f7 	bl	8001da0 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b64      	cmp	r3, #100	; 0x64
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e103      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	4b75      	ldr	r3, [pc, #468]	; (8003d98 <HAL_RCC_OscConfig+0x4c8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCC_OscConfig+0x312>
 8003bd4:	4b6f      	ldr	r3, [pc, #444]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4a6e      	ldr	r2, [pc, #440]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	6213      	str	r3, [r2, #32]
 8003be0:	e02d      	b.n	8003c3e <HAL_RCC_OscConfig+0x36e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x334>
 8003bea:	4b6a      	ldr	r3, [pc, #424]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4a69      	ldr	r2, [pc, #420]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	6213      	str	r3, [r2, #32]
 8003bf6:	4b67      	ldr	r3, [pc, #412]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	4a66      	ldr	r2, [pc, #408]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	f023 0304 	bic.w	r3, r3, #4
 8003c00:	6213      	str	r3, [r2, #32]
 8003c02:	e01c      	b.n	8003c3e <HAL_RCC_OscConfig+0x36e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	2b05      	cmp	r3, #5
 8003c0a:	d10c      	bne.n	8003c26 <HAL_RCC_OscConfig+0x356>
 8003c0c:	4b61      	ldr	r3, [pc, #388]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4a60      	ldr	r2, [pc, #384]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c12:	f043 0304 	orr.w	r3, r3, #4
 8003c16:	6213      	str	r3, [r2, #32]
 8003c18:	4b5e      	ldr	r3, [pc, #376]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	4a5d      	ldr	r2, [pc, #372]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6213      	str	r3, [r2, #32]
 8003c24:	e00b      	b.n	8003c3e <HAL_RCC_OscConfig+0x36e>
 8003c26:	4b5b      	ldr	r3, [pc, #364]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	4a5a      	ldr	r2, [pc, #360]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	6213      	str	r3, [r2, #32]
 8003c32:	4b58      	ldr	r3, [pc, #352]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	4a57      	ldr	r2, [pc, #348]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c38:	f023 0304 	bic.w	r3, r3, #4
 8003c3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d015      	beq.n	8003c72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c46:	f7fe f8ab 	bl	8001da0 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	e00a      	b.n	8003c64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4e:	f7fe f8a7 	bl	8001da0 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e0b1      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c64:	4b4b      	ldr	r3, [pc, #300]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0ee      	beq.n	8003c4e <HAL_RCC_OscConfig+0x37e>
 8003c70:	e014      	b.n	8003c9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c72:	f7fe f895 	bl	8001da0 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fe f891 	bl	8001da0 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e09b      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c90:	4b40      	ldr	r3, [pc, #256]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ee      	bne.n	8003c7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d105      	bne.n	8003cae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca2:	4b3c      	ldr	r3, [pc, #240]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	4a3b      	ldr	r2, [pc, #236]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8087 	beq.w	8003dc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb8:	4b36      	ldr	r3, [pc, #216]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d061      	beq.n	8003d88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d146      	bne.n	8003d5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ccc:	4b33      	ldr	r3, [pc, #204]	; (8003d9c <HAL_RCC_OscConfig+0x4cc>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd2:	f7fe f865 	bl	8001da0 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cda:	f7fe f861 	bl	8001da0 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e06d      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cec:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d00:	d108      	bne.n	8003d14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d02:	4b24      	ldr	r3, [pc, #144]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	4921      	ldr	r1, [pc, #132]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d14:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a19      	ldr	r1, [r3, #32]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	430b      	orrs	r3, r1
 8003d26:	491b      	ldr	r1, [pc, #108]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <HAL_RCC_OscConfig+0x4cc>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d32:	f7fe f835 	bl	8001da0 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3a:	f7fe f831 	bl	8001da0 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e03d      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0f0      	beq.n	8003d3a <HAL_RCC_OscConfig+0x46a>
 8003d58:	e035      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_RCC_OscConfig+0x4cc>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d60:	f7fe f81e 	bl	8001da0 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fe f81a 	bl	8001da0 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e026      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x498>
 8003d86:	e01e      	b.n	8003dc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e019      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40007000 	.word	0x40007000
 8003d9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_OscConfig+0x500>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d106      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d001      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e000      	b.n	8003dc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40021000 	.word	0x40021000

08003dd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e0d0      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d910      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b67      	ldr	r3, [pc, #412]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 0207 	bic.w	r2, r3, #7
 8003dfe:	4965      	ldr	r1, [pc, #404]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b63      	ldr	r3, [pc, #396]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0b8      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e30:	4b59      	ldr	r3, [pc, #356]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a58      	ldr	r2, [pc, #352]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e48:	4b53      	ldr	r3, [pc, #332]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	4a52      	ldr	r2, [pc, #328]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e54:	4b50      	ldr	r3, [pc, #320]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	494d      	ldr	r1, [pc, #308]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d040      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7a:	4b47      	ldr	r3, [pc, #284]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d115      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e07f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e073      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea2:	4b3d      	ldr	r3, [pc, #244]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06b      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eb2:	4b39      	ldr	r3, [pc, #228]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f023 0203 	bic.w	r2, r3, #3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4936      	ldr	r1, [pc, #216]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ec4:	f7fd ff6c 	bl	8001da0 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ecc:	f7fd ff68 	bl	8001da0 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e053      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 020c 	and.w	r2, r3, #12
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d1eb      	bne.n	8003ecc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef4:	4b27      	ldr	r3, [pc, #156]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d210      	bcs.n	8003f24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f02:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 0207 	bic.w	r2, r3, #7
 8003f0a:	4922      	ldr	r1, [pc, #136]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <HAL_RCC_ClockConfig+0x1c0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e032      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4916      	ldr	r1, [pc, #88]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f4e:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	490e      	ldr	r1, [pc, #56]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f62:	f000 f821 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003f66:	4602      	mov	r2, r0
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	490a      	ldr	r1, [pc, #40]	; (8003f9c <HAL_RCC_ClockConfig+0x1c8>)
 8003f74:	5ccb      	ldrb	r3, [r1, r3]
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_RCC_ClockConfig+0x1cc>)
 8003f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_RCC_ClockConfig+0x1d0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd feca 	bl	8001d1c <HAL_InitTick>

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40022000 	.word	0x40022000
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	08004f64 	.word	0x08004f64
 8003fa0:	20000004 	.word	0x20000004
 8003fa4:	20000008 	.word	0x20000008

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	617b      	str	r3, [r7, #20]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	; (800403c <HAL_RCC_GetSysClockFreq+0x94>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d002      	beq.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x30>
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d003      	beq.n	8003fde <HAL_RCC_GetSysClockFreq+0x36>
 8003fd6:	e027      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fd8:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fda:	613b      	str	r3, [r7, #16]
      break;
 8003fdc:	e027      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	0c9b      	lsrs	r3, r3, #18
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	4a17      	ldr	r2, [pc, #92]	; (8004044 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003fe8:	5cd3      	ldrb	r3, [r2, r3]
 8003fea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d010      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	0c5b      	lsrs	r3, r3, #17
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	4a11      	ldr	r2, [pc, #68]	; (8004048 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004002:	5cd3      	ldrb	r3, [r2, r3]
 8004004:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a0d      	ldr	r2, [pc, #52]	; (8004040 <HAL_RCC_GetSysClockFreq+0x98>)
 800400a:	fb03 f202 	mul.w	r2, r3, r2
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	e004      	b.n	8004022 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a0c      	ldr	r2, [pc, #48]	; (800404c <HAL_RCC_GetSysClockFreq+0xa4>)
 800401c:	fb02 f303 	mul.w	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	613b      	str	r3, [r7, #16]
      break;
 8004026:	e002      	b.n	800402e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_RCC_GetSysClockFreq+0x98>)
 800402a:	613b      	str	r3, [r7, #16]
      break;
 800402c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402e:	693b      	ldr	r3, [r7, #16]
}
 8004030:	4618      	mov	r0, r3
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000
 8004040:	007a1200 	.word	0x007a1200
 8004044:	08004f7c 	.word	0x08004f7c
 8004048:	08004f8c 	.word	0x08004f8c
 800404c:	003d0900 	.word	0x003d0900

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b02      	ldr	r3, [pc, #8]	; (8004060 <HAL_RCC_GetHCLKFreq+0x10>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	20000004 	.word	0x20000004

08004064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004068:	f7ff fff2 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800406c:	4602      	mov	r2, r0
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4903      	ldr	r1, [pc, #12]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800407a:	5ccb      	ldrb	r3, [r1, r3]
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	08004f74 	.word	0x08004f74

0800408c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004094:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <RCC_Delay+0x34>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a0a      	ldr	r2, [pc, #40]	; (80040c4 <RCC_Delay+0x38>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0a5b      	lsrs	r3, r3, #9
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040a8:	bf00      	nop
  }
  while (Delay --);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1e5a      	subs	r2, r3, #1
 80040ae:	60fa      	str	r2, [r7, #12]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f9      	bne.n	80040a8 <RCC_Delay+0x1c>
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	20000004 	.word	0x20000004
 80040c4:	10624dd3 	.word	0x10624dd3

080040c8 <memset>:
 80040c8:	4603      	mov	r3, r0
 80040ca:	4402      	add	r2, r0
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d100      	bne.n	80040d2 <memset+0xa>
 80040d0:	4770      	bx	lr
 80040d2:	f803 1b01 	strb.w	r1, [r3], #1
 80040d6:	e7f9      	b.n	80040cc <memset+0x4>

080040d8 <__errno>:
 80040d8:	4b01      	ldr	r3, [pc, #4]	; (80040e0 <__errno+0x8>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	2000005c 	.word	0x2000005c

080040e4 <__libc_init_array>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	2600      	movs	r6, #0
 80040e8:	4d0c      	ldr	r5, [pc, #48]	; (800411c <__libc_init_array+0x38>)
 80040ea:	4c0d      	ldr	r4, [pc, #52]	; (8004120 <__libc_init_array+0x3c>)
 80040ec:	1b64      	subs	r4, r4, r5
 80040ee:	10a4      	asrs	r4, r4, #2
 80040f0:	42a6      	cmp	r6, r4
 80040f2:	d109      	bne.n	8004108 <__libc_init_array+0x24>
 80040f4:	f000 ff22 	bl	8004f3c <_init>
 80040f8:	2600      	movs	r6, #0
 80040fa:	4d0a      	ldr	r5, [pc, #40]	; (8004124 <__libc_init_array+0x40>)
 80040fc:	4c0a      	ldr	r4, [pc, #40]	; (8004128 <__libc_init_array+0x44>)
 80040fe:	1b64      	subs	r4, r4, r5
 8004100:	10a4      	asrs	r4, r4, #2
 8004102:	42a6      	cmp	r6, r4
 8004104:	d105      	bne.n	8004112 <__libc_init_array+0x2e>
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	f855 3b04 	ldr.w	r3, [r5], #4
 800410c:	4798      	blx	r3
 800410e:	3601      	adds	r6, #1
 8004110:	e7ee      	b.n	80040f0 <__libc_init_array+0xc>
 8004112:	f855 3b04 	ldr.w	r3, [r5], #4
 8004116:	4798      	blx	r3
 8004118:	3601      	adds	r6, #1
 800411a:	e7f2      	b.n	8004102 <__libc_init_array+0x1e>
 800411c:	08004fc0 	.word	0x08004fc0
 8004120:	08004fc0 	.word	0x08004fc0
 8004124:	08004fc0 	.word	0x08004fc0
 8004128:	08004fc4 	.word	0x08004fc4

0800412c <pow>:
 800412c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004130:	4614      	mov	r4, r2
 8004132:	461d      	mov	r5, r3
 8004134:	4680      	mov	r8, r0
 8004136:	4689      	mov	r9, r1
 8004138:	f000 f866 	bl	8004208 <__ieee754_pow>
 800413c:	4622      	mov	r2, r4
 800413e:	4606      	mov	r6, r0
 8004140:	460f      	mov	r7, r1
 8004142:	462b      	mov	r3, r5
 8004144:	4620      	mov	r0, r4
 8004146:	4629      	mov	r1, r5
 8004148:	f7fc fc58 	bl	80009fc <__aeabi_dcmpun>
 800414c:	bbc8      	cbnz	r0, 80041c2 <pow+0x96>
 800414e:	2200      	movs	r2, #0
 8004150:	2300      	movs	r3, #0
 8004152:	4640      	mov	r0, r8
 8004154:	4649      	mov	r1, r9
 8004156:	f7fc fc1f 	bl	8000998 <__aeabi_dcmpeq>
 800415a:	b1b8      	cbz	r0, 800418c <pow+0x60>
 800415c:	2200      	movs	r2, #0
 800415e:	2300      	movs	r3, #0
 8004160:	4620      	mov	r0, r4
 8004162:	4629      	mov	r1, r5
 8004164:	f7fc fc18 	bl	8000998 <__aeabi_dcmpeq>
 8004168:	2800      	cmp	r0, #0
 800416a:	d141      	bne.n	80041f0 <pow+0xc4>
 800416c:	4620      	mov	r0, r4
 800416e:	4629      	mov	r1, r5
 8004170:	f000 f844 	bl	80041fc <finite>
 8004174:	b328      	cbz	r0, 80041c2 <pow+0x96>
 8004176:	2200      	movs	r2, #0
 8004178:	2300      	movs	r3, #0
 800417a:	4620      	mov	r0, r4
 800417c:	4629      	mov	r1, r5
 800417e:	f7fc fc15 	bl	80009ac <__aeabi_dcmplt>
 8004182:	b1f0      	cbz	r0, 80041c2 <pow+0x96>
 8004184:	f7ff ffa8 	bl	80040d8 <__errno>
 8004188:	2322      	movs	r3, #34	; 0x22
 800418a:	e019      	b.n	80041c0 <pow+0x94>
 800418c:	4630      	mov	r0, r6
 800418e:	4639      	mov	r1, r7
 8004190:	f000 f834 	bl	80041fc <finite>
 8004194:	b9c8      	cbnz	r0, 80041ca <pow+0x9e>
 8004196:	4640      	mov	r0, r8
 8004198:	4649      	mov	r1, r9
 800419a:	f000 f82f 	bl	80041fc <finite>
 800419e:	b1a0      	cbz	r0, 80041ca <pow+0x9e>
 80041a0:	4620      	mov	r0, r4
 80041a2:	4629      	mov	r1, r5
 80041a4:	f000 f82a 	bl	80041fc <finite>
 80041a8:	b178      	cbz	r0, 80041ca <pow+0x9e>
 80041aa:	4632      	mov	r2, r6
 80041ac:	463b      	mov	r3, r7
 80041ae:	4630      	mov	r0, r6
 80041b0:	4639      	mov	r1, r7
 80041b2:	f7fc fc23 	bl	80009fc <__aeabi_dcmpun>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	d0e4      	beq.n	8004184 <pow+0x58>
 80041ba:	f7ff ff8d 	bl	80040d8 <__errno>
 80041be:	2321      	movs	r3, #33	; 0x21
 80041c0:	6003      	str	r3, [r0, #0]
 80041c2:	4630      	mov	r0, r6
 80041c4:	4639      	mov	r1, r7
 80041c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ca:	2200      	movs	r2, #0
 80041cc:	2300      	movs	r3, #0
 80041ce:	4630      	mov	r0, r6
 80041d0:	4639      	mov	r1, r7
 80041d2:	f7fc fbe1 	bl	8000998 <__aeabi_dcmpeq>
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d0f3      	beq.n	80041c2 <pow+0x96>
 80041da:	4640      	mov	r0, r8
 80041dc:	4649      	mov	r1, r9
 80041de:	f000 f80d 	bl	80041fc <finite>
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d0ed      	beq.n	80041c2 <pow+0x96>
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	f000 f807 	bl	80041fc <finite>
 80041ee:	e7c8      	b.n	8004182 <pow+0x56>
 80041f0:	2600      	movs	r6, #0
 80041f2:	4f01      	ldr	r7, [pc, #4]	; (80041f8 <pow+0xcc>)
 80041f4:	e7e5      	b.n	80041c2 <pow+0x96>
 80041f6:	bf00      	nop
 80041f8:	3ff00000 	.word	0x3ff00000

080041fc <finite>:
 80041fc:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8004200:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004204:	0fc0      	lsrs	r0, r0, #31
 8004206:	4770      	bx	lr

08004208 <__ieee754_pow>:
 8004208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420c:	b093      	sub	sp, #76	; 0x4c
 800420e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004212:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8004216:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800421a:	4689      	mov	r9, r1
 800421c:	ea56 0102 	orrs.w	r1, r6, r2
 8004220:	4680      	mov	r8, r0
 8004222:	d111      	bne.n	8004248 <__ieee754_pow+0x40>
 8004224:	1803      	adds	r3, r0, r0
 8004226:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 800422a:	4152      	adcs	r2, r2
 800422c:	4299      	cmp	r1, r3
 800422e:	4b82      	ldr	r3, [pc, #520]	; (8004438 <__ieee754_pow+0x230>)
 8004230:	4193      	sbcs	r3, r2
 8004232:	f080 84ba 	bcs.w	8004baa <__ieee754_pow+0x9a2>
 8004236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800423a:	4640      	mov	r0, r8
 800423c:	4649      	mov	r1, r9
 800423e:	f7fb ff8d 	bl	800015c <__adddf3>
 8004242:	4683      	mov	fp, r0
 8004244:	468c      	mov	ip, r1
 8004246:	e06f      	b.n	8004328 <__ieee754_pow+0x120>
 8004248:	4b7c      	ldr	r3, [pc, #496]	; (800443c <__ieee754_pow+0x234>)
 800424a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 800424e:	429c      	cmp	r4, r3
 8004250:	464d      	mov	r5, r9
 8004252:	4682      	mov	sl, r0
 8004254:	dc06      	bgt.n	8004264 <__ieee754_pow+0x5c>
 8004256:	d101      	bne.n	800425c <__ieee754_pow+0x54>
 8004258:	2800      	cmp	r0, #0
 800425a:	d1ec      	bne.n	8004236 <__ieee754_pow+0x2e>
 800425c:	429e      	cmp	r6, r3
 800425e:	dc01      	bgt.n	8004264 <__ieee754_pow+0x5c>
 8004260:	d10f      	bne.n	8004282 <__ieee754_pow+0x7a>
 8004262:	b172      	cbz	r2, 8004282 <__ieee754_pow+0x7a>
 8004264:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004268:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800426c:	ea55 050a 	orrs.w	r5, r5, sl
 8004270:	d1e1      	bne.n	8004236 <__ieee754_pow+0x2e>
 8004272:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004276:	18db      	adds	r3, r3, r3
 8004278:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800427c:	4152      	adcs	r2, r2
 800427e:	429d      	cmp	r5, r3
 8004280:	e7d5      	b.n	800422e <__ieee754_pow+0x26>
 8004282:	2d00      	cmp	r5, #0
 8004284:	da39      	bge.n	80042fa <__ieee754_pow+0xf2>
 8004286:	4b6e      	ldr	r3, [pc, #440]	; (8004440 <__ieee754_pow+0x238>)
 8004288:	429e      	cmp	r6, r3
 800428a:	dc52      	bgt.n	8004332 <__ieee754_pow+0x12a>
 800428c:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004290:	429e      	cmp	r6, r3
 8004292:	f340 849d 	ble.w	8004bd0 <__ieee754_pow+0x9c8>
 8004296:	1533      	asrs	r3, r6, #20
 8004298:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800429c:	2b14      	cmp	r3, #20
 800429e:	dd0f      	ble.n	80042c0 <__ieee754_pow+0xb8>
 80042a0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80042a4:	fa22 f103 	lsr.w	r1, r2, r3
 80042a8:	fa01 f303 	lsl.w	r3, r1, r3
 80042ac:	4293      	cmp	r3, r2
 80042ae:	f040 848f 	bne.w	8004bd0 <__ieee754_pow+0x9c8>
 80042b2:	f001 0101 	and.w	r1, r1, #1
 80042b6:	f1c1 0302 	rsb	r3, r1, #2
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	b182      	cbz	r2, 80042e0 <__ieee754_pow+0xd8>
 80042be:	e05d      	b.n	800437c <__ieee754_pow+0x174>
 80042c0:	2a00      	cmp	r2, #0
 80042c2:	d159      	bne.n	8004378 <__ieee754_pow+0x170>
 80042c4:	f1c3 0314 	rsb	r3, r3, #20
 80042c8:	fa46 f103 	asr.w	r1, r6, r3
 80042cc:	fa01 f303 	lsl.w	r3, r1, r3
 80042d0:	42b3      	cmp	r3, r6
 80042d2:	f040 847a 	bne.w	8004bca <__ieee754_pow+0x9c2>
 80042d6:	f001 0101 	and.w	r1, r1, #1
 80042da:	f1c1 0302 	rsb	r3, r1, #2
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	4b58      	ldr	r3, [pc, #352]	; (8004444 <__ieee754_pow+0x23c>)
 80042e2:	429e      	cmp	r6, r3
 80042e4:	d132      	bne.n	800434c <__ieee754_pow+0x144>
 80042e6:	2f00      	cmp	r7, #0
 80042e8:	f280 846b 	bge.w	8004bc2 <__ieee754_pow+0x9ba>
 80042ec:	4642      	mov	r2, r8
 80042ee:	464b      	mov	r3, r9
 80042f0:	2000      	movs	r0, #0
 80042f2:	4954      	ldr	r1, [pc, #336]	; (8004444 <__ieee754_pow+0x23c>)
 80042f4:	f7fc fa12 	bl	800071c <__aeabi_ddiv>
 80042f8:	e7a3      	b.n	8004242 <__ieee754_pow+0x3a>
 80042fa:	2300      	movs	r3, #0
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	2a00      	cmp	r2, #0
 8004300:	d13c      	bne.n	800437c <__ieee754_pow+0x174>
 8004302:	4b4e      	ldr	r3, [pc, #312]	; (800443c <__ieee754_pow+0x234>)
 8004304:	429e      	cmp	r6, r3
 8004306:	d1eb      	bne.n	80042e0 <__ieee754_pow+0xd8>
 8004308:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800430c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004310:	ea53 030a 	orrs.w	r3, r3, sl
 8004314:	f000 8449 	beq.w	8004baa <__ieee754_pow+0x9a2>
 8004318:	4b4b      	ldr	r3, [pc, #300]	; (8004448 <__ieee754_pow+0x240>)
 800431a:	429c      	cmp	r4, r3
 800431c:	dd0b      	ble.n	8004336 <__ieee754_pow+0x12e>
 800431e:	2f00      	cmp	r7, #0
 8004320:	f2c0 8449 	blt.w	8004bb6 <__ieee754_pow+0x9ae>
 8004324:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8004328:	4658      	mov	r0, fp
 800432a:	4661      	mov	r1, ip
 800432c:	b013      	add	sp, #76	; 0x4c
 800432e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004332:	2302      	movs	r3, #2
 8004334:	e7e2      	b.n	80042fc <__ieee754_pow+0xf4>
 8004336:	2f00      	cmp	r7, #0
 8004338:	f04f 0b00 	mov.w	fp, #0
 800433c:	f04f 0c00 	mov.w	ip, #0
 8004340:	daf2      	bge.n	8004328 <__ieee754_pow+0x120>
 8004342:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8004346:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800434a:	e7ed      	b.n	8004328 <__ieee754_pow+0x120>
 800434c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8004350:	d106      	bne.n	8004360 <__ieee754_pow+0x158>
 8004352:	4642      	mov	r2, r8
 8004354:	464b      	mov	r3, r9
 8004356:	4640      	mov	r0, r8
 8004358:	4649      	mov	r1, r9
 800435a:	f7fc f8b5 	bl	80004c8 <__aeabi_dmul>
 800435e:	e770      	b.n	8004242 <__ieee754_pow+0x3a>
 8004360:	4b3a      	ldr	r3, [pc, #232]	; (800444c <__ieee754_pow+0x244>)
 8004362:	429f      	cmp	r7, r3
 8004364:	d10a      	bne.n	800437c <__ieee754_pow+0x174>
 8004366:	2d00      	cmp	r5, #0
 8004368:	db08      	blt.n	800437c <__ieee754_pow+0x174>
 800436a:	4640      	mov	r0, r8
 800436c:	4649      	mov	r1, r9
 800436e:	b013      	add	sp, #76	; 0x4c
 8004370:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004374:	f000 bd0a 	b.w	8004d8c <__ieee754_sqrt>
 8004378:	2300      	movs	r3, #0
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4640      	mov	r0, r8
 800437e:	4649      	mov	r1, r9
 8004380:	f000 fc58 	bl	8004c34 <fabs>
 8004384:	4683      	mov	fp, r0
 8004386:	468c      	mov	ip, r1
 8004388:	f1ba 0f00 	cmp.w	sl, #0
 800438c:	d128      	bne.n	80043e0 <__ieee754_pow+0x1d8>
 800438e:	b124      	cbz	r4, 800439a <__ieee754_pow+0x192>
 8004390:	4b2c      	ldr	r3, [pc, #176]	; (8004444 <__ieee754_pow+0x23c>)
 8004392:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004396:	429a      	cmp	r2, r3
 8004398:	d122      	bne.n	80043e0 <__ieee754_pow+0x1d8>
 800439a:	2f00      	cmp	r7, #0
 800439c:	da07      	bge.n	80043ae <__ieee754_pow+0x1a6>
 800439e:	465a      	mov	r2, fp
 80043a0:	4663      	mov	r3, ip
 80043a2:	2000      	movs	r0, #0
 80043a4:	4927      	ldr	r1, [pc, #156]	; (8004444 <__ieee754_pow+0x23c>)
 80043a6:	f7fc f9b9 	bl	800071c <__aeabi_ddiv>
 80043aa:	4683      	mov	fp, r0
 80043ac:	468c      	mov	ip, r1
 80043ae:	2d00      	cmp	r5, #0
 80043b0:	daba      	bge.n	8004328 <__ieee754_pow+0x120>
 80043b2:	9b00      	ldr	r3, [sp, #0]
 80043b4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80043b8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80043bc:	431c      	orrs	r4, r3
 80043be:	d108      	bne.n	80043d2 <__ieee754_pow+0x1ca>
 80043c0:	465a      	mov	r2, fp
 80043c2:	4663      	mov	r3, ip
 80043c4:	4658      	mov	r0, fp
 80043c6:	4661      	mov	r1, ip
 80043c8:	f7fb fec6 	bl	8000158 <__aeabi_dsub>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	e790      	b.n	80042f4 <__ieee754_pow+0xec>
 80043d2:	9b00      	ldr	r3, [sp, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d1a7      	bne.n	8004328 <__ieee754_pow+0x120>
 80043d8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80043dc:	469c      	mov	ip, r3
 80043de:	e7a3      	b.n	8004328 <__ieee754_pow+0x120>
 80043e0:	0feb      	lsrs	r3, r5, #31
 80043e2:	3b01      	subs	r3, #1
 80043e4:	930c      	str	r3, [sp, #48]	; 0x30
 80043e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043e8:	9b00      	ldr	r3, [sp, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	d104      	bne.n	80043f8 <__ieee754_pow+0x1f0>
 80043ee:	4642      	mov	r2, r8
 80043f0:	464b      	mov	r3, r9
 80043f2:	4640      	mov	r0, r8
 80043f4:	4649      	mov	r1, r9
 80043f6:	e7e7      	b.n	80043c8 <__ieee754_pow+0x1c0>
 80043f8:	4b15      	ldr	r3, [pc, #84]	; (8004450 <__ieee754_pow+0x248>)
 80043fa:	429e      	cmp	r6, r3
 80043fc:	f340 80f6 	ble.w	80045ec <__ieee754_pow+0x3e4>
 8004400:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004404:	429e      	cmp	r6, r3
 8004406:	4b10      	ldr	r3, [pc, #64]	; (8004448 <__ieee754_pow+0x240>)
 8004408:	dd09      	ble.n	800441e <__ieee754_pow+0x216>
 800440a:	429c      	cmp	r4, r3
 800440c:	dc0c      	bgt.n	8004428 <__ieee754_pow+0x220>
 800440e:	2f00      	cmp	r7, #0
 8004410:	da0c      	bge.n	800442c <__ieee754_pow+0x224>
 8004412:	2000      	movs	r0, #0
 8004414:	b013      	add	sp, #76	; 0x4c
 8004416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441a:	f000 bcb2 	b.w	8004d82 <__math_oflow>
 800441e:	429c      	cmp	r4, r3
 8004420:	dbf5      	blt.n	800440e <__ieee754_pow+0x206>
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <__ieee754_pow+0x23c>)
 8004424:	429c      	cmp	r4, r3
 8004426:	dd15      	ble.n	8004454 <__ieee754_pow+0x24c>
 8004428:	2f00      	cmp	r7, #0
 800442a:	dcf2      	bgt.n	8004412 <__ieee754_pow+0x20a>
 800442c:	2000      	movs	r0, #0
 800442e:	b013      	add	sp, #76	; 0x4c
 8004430:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	f000 bca0 	b.w	8004d78 <__math_uflow>
 8004438:	fff00000 	.word	0xfff00000
 800443c:	7ff00000 	.word	0x7ff00000
 8004440:	433fffff 	.word	0x433fffff
 8004444:	3ff00000 	.word	0x3ff00000
 8004448:	3fefffff 	.word	0x3fefffff
 800444c:	3fe00000 	.word	0x3fe00000
 8004450:	41e00000 	.word	0x41e00000
 8004454:	4661      	mov	r1, ip
 8004456:	2200      	movs	r2, #0
 8004458:	4658      	mov	r0, fp
 800445a:	4b5f      	ldr	r3, [pc, #380]	; (80045d8 <__ieee754_pow+0x3d0>)
 800445c:	f7fb fe7c 	bl	8000158 <__aeabi_dsub>
 8004460:	a355      	add	r3, pc, #340	; (adr r3, 80045b8 <__ieee754_pow+0x3b0>)
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	4604      	mov	r4, r0
 8004468:	460d      	mov	r5, r1
 800446a:	f7fc f82d 	bl	80004c8 <__aeabi_dmul>
 800446e:	a354      	add	r3, pc, #336	; (adr r3, 80045c0 <__ieee754_pow+0x3b8>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	4606      	mov	r6, r0
 8004476:	460f      	mov	r7, r1
 8004478:	4620      	mov	r0, r4
 800447a:	4629      	mov	r1, r5
 800447c:	f7fc f824 	bl	80004c8 <__aeabi_dmul>
 8004480:	2200      	movs	r2, #0
 8004482:	4682      	mov	sl, r0
 8004484:	468b      	mov	fp, r1
 8004486:	4620      	mov	r0, r4
 8004488:	4629      	mov	r1, r5
 800448a:	4b54      	ldr	r3, [pc, #336]	; (80045dc <__ieee754_pow+0x3d4>)
 800448c:	f7fc f81c 	bl	80004c8 <__aeabi_dmul>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	a14c      	add	r1, pc, #304	; (adr r1, 80045c8 <__ieee754_pow+0x3c0>)
 8004496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800449a:	f7fb fe5d 	bl	8000158 <__aeabi_dsub>
 800449e:	4622      	mov	r2, r4
 80044a0:	462b      	mov	r3, r5
 80044a2:	f7fc f811 	bl	80004c8 <__aeabi_dmul>
 80044a6:	4602      	mov	r2, r0
 80044a8:	460b      	mov	r3, r1
 80044aa:	2000      	movs	r0, #0
 80044ac:	494c      	ldr	r1, [pc, #304]	; (80045e0 <__ieee754_pow+0x3d8>)
 80044ae:	f7fb fe53 	bl	8000158 <__aeabi_dsub>
 80044b2:	4622      	mov	r2, r4
 80044b4:	462b      	mov	r3, r5
 80044b6:	4680      	mov	r8, r0
 80044b8:	4689      	mov	r9, r1
 80044ba:	4620      	mov	r0, r4
 80044bc:	4629      	mov	r1, r5
 80044be:	f7fc f803 	bl	80004c8 <__aeabi_dmul>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4640      	mov	r0, r8
 80044c8:	4649      	mov	r1, r9
 80044ca:	f7fb fffd 	bl	80004c8 <__aeabi_dmul>
 80044ce:	a340      	add	r3, pc, #256	; (adr r3, 80045d0 <__ieee754_pow+0x3c8>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	f7fb fff8 	bl	80004c8 <__aeabi_dmul>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4650      	mov	r0, sl
 80044de:	4659      	mov	r1, fp
 80044e0:	f7fb fe3a 	bl	8000158 <__aeabi_dsub>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4604      	mov	r4, r0
 80044ea:	460d      	mov	r5, r1
 80044ec:	4630      	mov	r0, r6
 80044ee:	4639      	mov	r1, r7
 80044f0:	f7fb fe34 	bl	800015c <__adddf3>
 80044f4:	2000      	movs	r0, #0
 80044f6:	4632      	mov	r2, r6
 80044f8:	463b      	mov	r3, r7
 80044fa:	4682      	mov	sl, r0
 80044fc:	468b      	mov	fp, r1
 80044fe:	f7fb fe2b 	bl	8000158 <__aeabi_dsub>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4620      	mov	r0, r4
 8004508:	4629      	mov	r1, r5
 800450a:	f7fb fe25 	bl	8000158 <__aeabi_dsub>
 800450e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004512:	9b00      	ldr	r3, [sp, #0]
 8004514:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004516:	3b01      	subs	r3, #1
 8004518:	4313      	orrs	r3, r2
 800451a:	f04f 0600 	mov.w	r6, #0
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	bf0c      	ite	eq
 8004524:	4b2f      	ldreq	r3, [pc, #188]	; (80045e4 <__ieee754_pow+0x3dc>)
 8004526:	4b2c      	ldrne	r3, [pc, #176]	; (80045d8 <__ieee754_pow+0x3d0>)
 8004528:	4604      	mov	r4, r0
 800452a:	460d      	mov	r5, r1
 800452c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004530:	e9cd 2300 	strd	r2, r3, [sp]
 8004534:	4632      	mov	r2, r6
 8004536:	463b      	mov	r3, r7
 8004538:	f7fb fe0e 	bl	8000158 <__aeabi_dsub>
 800453c:	4652      	mov	r2, sl
 800453e:	465b      	mov	r3, fp
 8004540:	f7fb ffc2 	bl	80004c8 <__aeabi_dmul>
 8004544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004548:	4680      	mov	r8, r0
 800454a:	4689      	mov	r9, r1
 800454c:	4620      	mov	r0, r4
 800454e:	4629      	mov	r1, r5
 8004550:	f7fb ffba 	bl	80004c8 <__aeabi_dmul>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4640      	mov	r0, r8
 800455a:	4649      	mov	r1, r9
 800455c:	f7fb fdfe 	bl	800015c <__adddf3>
 8004560:	4632      	mov	r2, r6
 8004562:	463b      	mov	r3, r7
 8004564:	4680      	mov	r8, r0
 8004566:	4689      	mov	r9, r1
 8004568:	4650      	mov	r0, sl
 800456a:	4659      	mov	r1, fp
 800456c:	f7fb ffac 	bl	80004c8 <__aeabi_dmul>
 8004570:	4604      	mov	r4, r0
 8004572:	460d      	mov	r5, r1
 8004574:	460b      	mov	r3, r1
 8004576:	4602      	mov	r2, r0
 8004578:	4649      	mov	r1, r9
 800457a:	4640      	mov	r0, r8
 800457c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004580:	f7fb fdec 	bl	800015c <__adddf3>
 8004584:	4b18      	ldr	r3, [pc, #96]	; (80045e8 <__ieee754_pow+0x3e0>)
 8004586:	4682      	mov	sl, r0
 8004588:	4299      	cmp	r1, r3
 800458a:	460f      	mov	r7, r1
 800458c:	460e      	mov	r6, r1
 800458e:	f340 82e7 	ble.w	8004b60 <__ieee754_pow+0x958>
 8004592:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004596:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800459a:	4303      	orrs	r3, r0
 800459c:	f000 81e2 	beq.w	8004964 <__ieee754_pow+0x75c>
 80045a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045a4:	2200      	movs	r2, #0
 80045a6:	2300      	movs	r3, #0
 80045a8:	f7fc fa00 	bl	80009ac <__aeabi_dcmplt>
 80045ac:	3800      	subs	r0, #0
 80045ae:	bf18      	it	ne
 80045b0:	2001      	movne	r0, #1
 80045b2:	e72f      	b.n	8004414 <__ieee754_pow+0x20c>
 80045b4:	f3af 8000 	nop.w
 80045b8:	60000000 	.word	0x60000000
 80045bc:	3ff71547 	.word	0x3ff71547
 80045c0:	f85ddf44 	.word	0xf85ddf44
 80045c4:	3e54ae0b 	.word	0x3e54ae0b
 80045c8:	55555555 	.word	0x55555555
 80045cc:	3fd55555 	.word	0x3fd55555
 80045d0:	652b82fe 	.word	0x652b82fe
 80045d4:	3ff71547 	.word	0x3ff71547
 80045d8:	3ff00000 	.word	0x3ff00000
 80045dc:	3fd00000 	.word	0x3fd00000
 80045e0:	3fe00000 	.word	0x3fe00000
 80045e4:	bff00000 	.word	0xbff00000
 80045e8:	408fffff 	.word	0x408fffff
 80045ec:	4bd4      	ldr	r3, [pc, #848]	; (8004940 <__ieee754_pow+0x738>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	402b      	ands	r3, r5
 80045f2:	b943      	cbnz	r3, 8004606 <__ieee754_pow+0x3fe>
 80045f4:	4658      	mov	r0, fp
 80045f6:	4661      	mov	r1, ip
 80045f8:	4bd2      	ldr	r3, [pc, #840]	; (8004944 <__ieee754_pow+0x73c>)
 80045fa:	f7fb ff65 	bl	80004c8 <__aeabi_dmul>
 80045fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004602:	4683      	mov	fp, r0
 8004604:	460c      	mov	r4, r1
 8004606:	1523      	asrs	r3, r4, #20
 8004608:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800460c:	4413      	add	r3, r2
 800460e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004610:	4bcd      	ldr	r3, [pc, #820]	; (8004948 <__ieee754_pow+0x740>)
 8004612:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004616:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800461a:	429c      	cmp	r4, r3
 800461c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004620:	dd08      	ble.n	8004634 <__ieee754_pow+0x42c>
 8004622:	4bca      	ldr	r3, [pc, #808]	; (800494c <__ieee754_pow+0x744>)
 8004624:	429c      	cmp	r4, r3
 8004626:	f340 8164 	ble.w	80048f2 <__ieee754_pow+0x6ea>
 800462a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800462c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004630:	3301      	adds	r3, #1
 8004632:	930b      	str	r3, [sp, #44]	; 0x2c
 8004634:	2600      	movs	r6, #0
 8004636:	00f3      	lsls	r3, r6, #3
 8004638:	930d      	str	r3, [sp, #52]	; 0x34
 800463a:	4bc5      	ldr	r3, [pc, #788]	; (8004950 <__ieee754_pow+0x748>)
 800463c:	4658      	mov	r0, fp
 800463e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004642:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004646:	4629      	mov	r1, r5
 8004648:	461a      	mov	r2, r3
 800464a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800464e:	4623      	mov	r3, r4
 8004650:	f7fb fd82 	bl	8000158 <__aeabi_dsub>
 8004654:	46da      	mov	sl, fp
 8004656:	462b      	mov	r3, r5
 8004658:	4652      	mov	r2, sl
 800465a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800465e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004662:	f7fb fd7b 	bl	800015c <__adddf3>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	2000      	movs	r0, #0
 800466c:	49b9      	ldr	r1, [pc, #740]	; (8004954 <__ieee754_pow+0x74c>)
 800466e:	f7fc f855 	bl	800071c <__aeabi_ddiv>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800467a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800467e:	f7fb ff23 	bl	80004c8 <__aeabi_dmul>
 8004682:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004686:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800468a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800468e:	2300      	movs	r3, #0
 8004690:	2200      	movs	r2, #0
 8004692:	46ab      	mov	fp, r5
 8004694:	106d      	asrs	r5, r5, #1
 8004696:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800469a:	9304      	str	r3, [sp, #16]
 800469c:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80046a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80046a4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80046a8:	4640      	mov	r0, r8
 80046aa:	4649      	mov	r1, r9
 80046ac:	4614      	mov	r4, r2
 80046ae:	461d      	mov	r5, r3
 80046b0:	f7fb ff0a 	bl	80004c8 <__aeabi_dmul>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80046bc:	f7fb fd4c 	bl	8000158 <__aeabi_dsub>
 80046c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80046c4:	4606      	mov	r6, r0
 80046c6:	460f      	mov	r7, r1
 80046c8:	4620      	mov	r0, r4
 80046ca:	4629      	mov	r1, r5
 80046cc:	f7fb fd44 	bl	8000158 <__aeabi_dsub>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4650      	mov	r0, sl
 80046d6:	4659      	mov	r1, fp
 80046d8:	f7fb fd3e 	bl	8000158 <__aeabi_dsub>
 80046dc:	4642      	mov	r2, r8
 80046de:	464b      	mov	r3, r9
 80046e0:	f7fb fef2 	bl	80004c8 <__aeabi_dmul>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4630      	mov	r0, r6
 80046ea:	4639      	mov	r1, r7
 80046ec:	f7fb fd34 	bl	8000158 <__aeabi_dsub>
 80046f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046f4:	f7fb fee8 	bl	80004c8 <__aeabi_dmul>
 80046f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80046fc:	4682      	mov	sl, r0
 80046fe:	468b      	mov	fp, r1
 8004700:	4610      	mov	r0, r2
 8004702:	4619      	mov	r1, r3
 8004704:	f7fb fee0 	bl	80004c8 <__aeabi_dmul>
 8004708:	a37b      	add	r3, pc, #492	; (adr r3, 80048f8 <__ieee754_pow+0x6f0>)
 800470a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470e:	4604      	mov	r4, r0
 8004710:	460d      	mov	r5, r1
 8004712:	f7fb fed9 	bl	80004c8 <__aeabi_dmul>
 8004716:	a37a      	add	r3, pc, #488	; (adr r3, 8004900 <__ieee754_pow+0x6f8>)
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	f7fb fd1e 	bl	800015c <__adddf3>
 8004720:	4622      	mov	r2, r4
 8004722:	462b      	mov	r3, r5
 8004724:	f7fb fed0 	bl	80004c8 <__aeabi_dmul>
 8004728:	a377      	add	r3, pc, #476	; (adr r3, 8004908 <__ieee754_pow+0x700>)
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f7fb fd15 	bl	800015c <__adddf3>
 8004732:	4622      	mov	r2, r4
 8004734:	462b      	mov	r3, r5
 8004736:	f7fb fec7 	bl	80004c8 <__aeabi_dmul>
 800473a:	a375      	add	r3, pc, #468	; (adr r3, 8004910 <__ieee754_pow+0x708>)
 800473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004740:	f7fb fd0c 	bl	800015c <__adddf3>
 8004744:	4622      	mov	r2, r4
 8004746:	462b      	mov	r3, r5
 8004748:	f7fb febe 	bl	80004c8 <__aeabi_dmul>
 800474c:	a372      	add	r3, pc, #456	; (adr r3, 8004918 <__ieee754_pow+0x710>)
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	f7fb fd03 	bl	800015c <__adddf3>
 8004756:	4622      	mov	r2, r4
 8004758:	462b      	mov	r3, r5
 800475a:	f7fb feb5 	bl	80004c8 <__aeabi_dmul>
 800475e:	a370      	add	r3, pc, #448	; (adr r3, 8004920 <__ieee754_pow+0x718>)
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	f7fb fcfa 	bl	800015c <__adddf3>
 8004768:	4622      	mov	r2, r4
 800476a:	4606      	mov	r6, r0
 800476c:	460f      	mov	r7, r1
 800476e:	462b      	mov	r3, r5
 8004770:	4620      	mov	r0, r4
 8004772:	4629      	mov	r1, r5
 8004774:	f7fb fea8 	bl	80004c8 <__aeabi_dmul>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4630      	mov	r0, r6
 800477e:	4639      	mov	r1, r7
 8004780:	f7fb fea2 	bl	80004c8 <__aeabi_dmul>
 8004784:	4604      	mov	r4, r0
 8004786:	460d      	mov	r5, r1
 8004788:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800478c:	4642      	mov	r2, r8
 800478e:	464b      	mov	r3, r9
 8004790:	f7fb fce4 	bl	800015c <__adddf3>
 8004794:	4652      	mov	r2, sl
 8004796:	465b      	mov	r3, fp
 8004798:	f7fb fe96 	bl	80004c8 <__aeabi_dmul>
 800479c:	4622      	mov	r2, r4
 800479e:	462b      	mov	r3, r5
 80047a0:	f7fb fcdc 	bl	800015c <__adddf3>
 80047a4:	4642      	mov	r2, r8
 80047a6:	4606      	mov	r6, r0
 80047a8:	460f      	mov	r7, r1
 80047aa:	464b      	mov	r3, r9
 80047ac:	4640      	mov	r0, r8
 80047ae:	4649      	mov	r1, r9
 80047b0:	f7fb fe8a 	bl	80004c8 <__aeabi_dmul>
 80047b4:	4602      	mov	r2, r0
 80047b6:	460b      	mov	r3, r1
 80047b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80047bc:	2200      	movs	r2, #0
 80047be:	4b66      	ldr	r3, [pc, #408]	; (8004958 <__ieee754_pow+0x750>)
 80047c0:	f7fb fccc 	bl	800015c <__adddf3>
 80047c4:	4632      	mov	r2, r6
 80047c6:	463b      	mov	r3, r7
 80047c8:	f7fb fcc8 	bl	800015c <__adddf3>
 80047cc:	2400      	movs	r4, #0
 80047ce:	460d      	mov	r5, r1
 80047d0:	4622      	mov	r2, r4
 80047d2:	460b      	mov	r3, r1
 80047d4:	4640      	mov	r0, r8
 80047d6:	4649      	mov	r1, r9
 80047d8:	f7fb fe76 	bl	80004c8 <__aeabi_dmul>
 80047dc:	2200      	movs	r2, #0
 80047de:	4680      	mov	r8, r0
 80047e0:	4689      	mov	r9, r1
 80047e2:	4620      	mov	r0, r4
 80047e4:	4629      	mov	r1, r5
 80047e6:	4b5c      	ldr	r3, [pc, #368]	; (8004958 <__ieee754_pow+0x750>)
 80047e8:	f7fb fcb6 	bl	8000158 <__aeabi_dsub>
 80047ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80047f0:	f7fb fcb2 	bl	8000158 <__aeabi_dsub>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4630      	mov	r0, r6
 80047fa:	4639      	mov	r1, r7
 80047fc:	f7fb fcac 	bl	8000158 <__aeabi_dsub>
 8004800:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004804:	f7fb fe60 	bl	80004c8 <__aeabi_dmul>
 8004808:	4622      	mov	r2, r4
 800480a:	4606      	mov	r6, r0
 800480c:	460f      	mov	r7, r1
 800480e:	462b      	mov	r3, r5
 8004810:	4650      	mov	r0, sl
 8004812:	4659      	mov	r1, fp
 8004814:	f7fb fe58 	bl	80004c8 <__aeabi_dmul>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4630      	mov	r0, r6
 800481e:	4639      	mov	r1, r7
 8004820:	f7fb fc9c 	bl	800015c <__adddf3>
 8004824:	2400      	movs	r4, #0
 8004826:	4606      	mov	r6, r0
 8004828:	460f      	mov	r7, r1
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4640      	mov	r0, r8
 8004830:	4649      	mov	r1, r9
 8004832:	f7fb fc93 	bl	800015c <__adddf3>
 8004836:	a33c      	add	r3, pc, #240	; (adr r3, 8004928 <__ieee754_pow+0x720>)
 8004838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483c:	4620      	mov	r0, r4
 800483e:	460d      	mov	r5, r1
 8004840:	f7fb fe42 	bl	80004c8 <__aeabi_dmul>
 8004844:	4642      	mov	r2, r8
 8004846:	464b      	mov	r3, r9
 8004848:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800484c:	4620      	mov	r0, r4
 800484e:	4629      	mov	r1, r5
 8004850:	f7fb fc82 	bl	8000158 <__aeabi_dsub>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4630      	mov	r0, r6
 800485a:	4639      	mov	r1, r7
 800485c:	f7fb fc7c 	bl	8000158 <__aeabi_dsub>
 8004860:	a333      	add	r3, pc, #204	; (adr r3, 8004930 <__ieee754_pow+0x728>)
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	f7fb fe2f 	bl	80004c8 <__aeabi_dmul>
 800486a:	a333      	add	r3, pc, #204	; (adr r3, 8004938 <__ieee754_pow+0x730>)
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	4606      	mov	r6, r0
 8004872:	460f      	mov	r7, r1
 8004874:	4620      	mov	r0, r4
 8004876:	4629      	mov	r1, r5
 8004878:	f7fb fe26 	bl	80004c8 <__aeabi_dmul>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4630      	mov	r0, r6
 8004882:	4639      	mov	r1, r7
 8004884:	f7fb fc6a 	bl	800015c <__adddf3>
 8004888:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800488a:	4b34      	ldr	r3, [pc, #208]	; (800495c <__ieee754_pow+0x754>)
 800488c:	4413      	add	r3, r2
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	f7fb fc63 	bl	800015c <__adddf3>
 8004896:	4680      	mov	r8, r0
 8004898:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800489a:	4689      	mov	r9, r1
 800489c:	f7fb fdaa 	bl	80003f4 <__aeabi_i2d>
 80048a0:	4604      	mov	r4, r0
 80048a2:	460d      	mov	r5, r1
 80048a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80048aa:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <__ieee754_pow+0x758>)
 80048ac:	4413      	add	r3, r2
 80048ae:	e9d3 6700 	ldrd	r6, r7, [r3]
 80048b2:	4642      	mov	r2, r8
 80048b4:	464b      	mov	r3, r9
 80048b6:	f7fb fc51 	bl	800015c <__adddf3>
 80048ba:	4632      	mov	r2, r6
 80048bc:	463b      	mov	r3, r7
 80048be:	f7fb fc4d 	bl	800015c <__adddf3>
 80048c2:	4622      	mov	r2, r4
 80048c4:	462b      	mov	r3, r5
 80048c6:	f7fb fc49 	bl	800015c <__adddf3>
 80048ca:	2000      	movs	r0, #0
 80048cc:	4622      	mov	r2, r4
 80048ce:	462b      	mov	r3, r5
 80048d0:	4682      	mov	sl, r0
 80048d2:	468b      	mov	fp, r1
 80048d4:	f7fb fc40 	bl	8000158 <__aeabi_dsub>
 80048d8:	4632      	mov	r2, r6
 80048da:	463b      	mov	r3, r7
 80048dc:	f7fb fc3c 	bl	8000158 <__aeabi_dsub>
 80048e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048e4:	f7fb fc38 	bl	8000158 <__aeabi_dsub>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4640      	mov	r0, r8
 80048ee:	4649      	mov	r1, r9
 80048f0:	e60b      	b.n	800450a <__ieee754_pow+0x302>
 80048f2:	2601      	movs	r6, #1
 80048f4:	e69f      	b.n	8004636 <__ieee754_pow+0x42e>
 80048f6:	bf00      	nop
 80048f8:	4a454eef 	.word	0x4a454eef
 80048fc:	3fca7e28 	.word	0x3fca7e28
 8004900:	93c9db65 	.word	0x93c9db65
 8004904:	3fcd864a 	.word	0x3fcd864a
 8004908:	a91d4101 	.word	0xa91d4101
 800490c:	3fd17460 	.word	0x3fd17460
 8004910:	518f264d 	.word	0x518f264d
 8004914:	3fd55555 	.word	0x3fd55555
 8004918:	db6fabff 	.word	0xdb6fabff
 800491c:	3fdb6db6 	.word	0x3fdb6db6
 8004920:	33333303 	.word	0x33333303
 8004924:	3fe33333 	.word	0x3fe33333
 8004928:	e0000000 	.word	0xe0000000
 800492c:	3feec709 	.word	0x3feec709
 8004930:	dc3a03fd 	.word	0xdc3a03fd
 8004934:	3feec709 	.word	0x3feec709
 8004938:	145b01f5 	.word	0x145b01f5
 800493c:	be3e2fe0 	.word	0xbe3e2fe0
 8004940:	7ff00000 	.word	0x7ff00000
 8004944:	43400000 	.word	0x43400000
 8004948:	0003988e 	.word	0x0003988e
 800494c:	000bb679 	.word	0x000bb679
 8004950:	08004f90 	.word	0x08004f90
 8004954:	3ff00000 	.word	0x3ff00000
 8004958:	40080000 	.word	0x40080000
 800495c:	08004fb0 	.word	0x08004fb0
 8004960:	08004fa0 	.word	0x08004fa0
 8004964:	a39c      	add	r3, pc, #624	; (adr r3, 8004bd8 <__ieee754_pow+0x9d0>)
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	4640      	mov	r0, r8
 800496c:	4649      	mov	r1, r9
 800496e:	f7fb fbf5 	bl	800015c <__adddf3>
 8004972:	4622      	mov	r2, r4
 8004974:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004978:	462b      	mov	r3, r5
 800497a:	4650      	mov	r0, sl
 800497c:	4639      	mov	r1, r7
 800497e:	f7fb fbeb 	bl	8000158 <__aeabi_dsub>
 8004982:	4602      	mov	r2, r0
 8004984:	460b      	mov	r3, r1
 8004986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800498a:	f7fc f82d 	bl	80009e8 <__aeabi_dcmpgt>
 800498e:	2800      	cmp	r0, #0
 8004990:	f47f ae06 	bne.w	80045a0 <__ieee754_pow+0x398>
 8004994:	4aa2      	ldr	r2, [pc, #648]	; (8004c20 <__ieee754_pow+0xa18>)
 8004996:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800499a:	4293      	cmp	r3, r2
 800499c:	f340 8100 	ble.w	8004ba0 <__ieee754_pow+0x998>
 80049a0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80049a4:	151b      	asrs	r3, r3, #20
 80049a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80049aa:	fa4a fa03 	asr.w	sl, sl, r3
 80049ae:	44b2      	add	sl, r6
 80049b0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80049b4:	489b      	ldr	r0, [pc, #620]	; (8004c24 <__ieee754_pow+0xa1c>)
 80049b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80049ba:	4108      	asrs	r0, r1
 80049bc:	ea00 030a 	and.w	r3, r0, sl
 80049c0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80049c4:	f1c1 0114 	rsb	r1, r1, #20
 80049c8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80049cc:	fa4a fa01 	asr.w	sl, sl, r1
 80049d0:	2e00      	cmp	r6, #0
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	4620      	mov	r0, r4
 80049d8:	4629      	mov	r1, r5
 80049da:	bfb8      	it	lt
 80049dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80049e0:	f7fb fbba 	bl	8000158 <__aeabi_dsub>
 80049e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049ec:	2400      	movs	r4, #0
 80049ee:	4642      	mov	r2, r8
 80049f0:	464b      	mov	r3, r9
 80049f2:	f7fb fbb3 	bl	800015c <__adddf3>
 80049f6:	a37a      	add	r3, pc, #488	; (adr r3, 8004be0 <__ieee754_pow+0x9d8>)
 80049f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fc:	4620      	mov	r0, r4
 80049fe:	460d      	mov	r5, r1
 8004a00:	f7fb fd62 	bl	80004c8 <__aeabi_dmul>
 8004a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a08:	4606      	mov	r6, r0
 8004a0a:	460f      	mov	r7, r1
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	4629      	mov	r1, r5
 8004a10:	f7fb fba2 	bl	8000158 <__aeabi_dsub>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4640      	mov	r0, r8
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	f7fb fb9c 	bl	8000158 <__aeabi_dsub>
 8004a20:	a371      	add	r3, pc, #452	; (adr r3, 8004be8 <__ieee754_pow+0x9e0>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f7fb fd4f 	bl	80004c8 <__aeabi_dmul>
 8004a2a:	a371      	add	r3, pc, #452	; (adr r3, 8004bf0 <__ieee754_pow+0x9e8>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	4680      	mov	r8, r0
 8004a32:	4689      	mov	r9, r1
 8004a34:	4620      	mov	r0, r4
 8004a36:	4629      	mov	r1, r5
 8004a38:	f7fb fd46 	bl	80004c8 <__aeabi_dmul>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4640      	mov	r0, r8
 8004a42:	4649      	mov	r1, r9
 8004a44:	f7fb fb8a 	bl	800015c <__adddf3>
 8004a48:	4604      	mov	r4, r0
 8004a4a:	460d      	mov	r5, r1
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4630      	mov	r0, r6
 8004a52:	4639      	mov	r1, r7
 8004a54:	f7fb fb82 	bl	800015c <__adddf3>
 8004a58:	4632      	mov	r2, r6
 8004a5a:	463b      	mov	r3, r7
 8004a5c:	4680      	mov	r8, r0
 8004a5e:	4689      	mov	r9, r1
 8004a60:	f7fb fb7a 	bl	8000158 <__aeabi_dsub>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4620      	mov	r0, r4
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	f7fb fb74 	bl	8000158 <__aeabi_dsub>
 8004a70:	4642      	mov	r2, r8
 8004a72:	4606      	mov	r6, r0
 8004a74:	460f      	mov	r7, r1
 8004a76:	464b      	mov	r3, r9
 8004a78:	4640      	mov	r0, r8
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f7fb fd24 	bl	80004c8 <__aeabi_dmul>
 8004a80:	a35d      	add	r3, pc, #372	; (adr r3, 8004bf8 <__ieee754_pow+0x9f0>)
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	4604      	mov	r4, r0
 8004a88:	460d      	mov	r5, r1
 8004a8a:	f7fb fd1d 	bl	80004c8 <__aeabi_dmul>
 8004a8e:	a35c      	add	r3, pc, #368	; (adr r3, 8004c00 <__ieee754_pow+0x9f8>)
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f7fb fb60 	bl	8000158 <__aeabi_dsub>
 8004a98:	4622      	mov	r2, r4
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	f7fb fd14 	bl	80004c8 <__aeabi_dmul>
 8004aa0:	a359      	add	r3, pc, #356	; (adr r3, 8004c08 <__ieee754_pow+0xa00>)
 8004aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa6:	f7fb fb59 	bl	800015c <__adddf3>
 8004aaa:	4622      	mov	r2, r4
 8004aac:	462b      	mov	r3, r5
 8004aae:	f7fb fd0b 	bl	80004c8 <__aeabi_dmul>
 8004ab2:	a357      	add	r3, pc, #348	; (adr r3, 8004c10 <__ieee754_pow+0xa08>)
 8004ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab8:	f7fb fb4e 	bl	8000158 <__aeabi_dsub>
 8004abc:	4622      	mov	r2, r4
 8004abe:	462b      	mov	r3, r5
 8004ac0:	f7fb fd02 	bl	80004c8 <__aeabi_dmul>
 8004ac4:	a354      	add	r3, pc, #336	; (adr r3, 8004c18 <__ieee754_pow+0xa10>)
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	f7fb fb47 	bl	800015c <__adddf3>
 8004ace:	4622      	mov	r2, r4
 8004ad0:	462b      	mov	r3, r5
 8004ad2:	f7fb fcf9 	bl	80004c8 <__aeabi_dmul>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4640      	mov	r0, r8
 8004adc:	4649      	mov	r1, r9
 8004ade:	f7fb fb3b 	bl	8000158 <__aeabi_dsub>
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	460d      	mov	r5, r1
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4640      	mov	r0, r8
 8004aec:	4649      	mov	r1, r9
 8004aee:	f7fb fceb 	bl	80004c8 <__aeabi_dmul>
 8004af2:	2200      	movs	r2, #0
 8004af4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004afc:	4620      	mov	r0, r4
 8004afe:	4629      	mov	r1, r5
 8004b00:	f7fb fb2a 	bl	8000158 <__aeabi_dsub>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b0c:	f7fb fe06 	bl	800071c <__aeabi_ddiv>
 8004b10:	4632      	mov	r2, r6
 8004b12:	4604      	mov	r4, r0
 8004b14:	460d      	mov	r5, r1
 8004b16:	463b      	mov	r3, r7
 8004b18:	4640      	mov	r0, r8
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	f7fb fcd4 	bl	80004c8 <__aeabi_dmul>
 8004b20:	4632      	mov	r2, r6
 8004b22:	463b      	mov	r3, r7
 8004b24:	f7fb fb1a 	bl	800015c <__adddf3>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	4629      	mov	r1, r5
 8004b30:	f7fb fb12 	bl	8000158 <__aeabi_dsub>
 8004b34:	4642      	mov	r2, r8
 8004b36:	464b      	mov	r3, r9
 8004b38:	f7fb fb0e 	bl	8000158 <__aeabi_dsub>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	2000      	movs	r0, #0
 8004b42:	4939      	ldr	r1, [pc, #228]	; (8004c28 <__ieee754_pow+0xa20>)
 8004b44:	f7fb fb08 	bl	8000158 <__aeabi_dsub>
 8004b48:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004b4c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004b50:	da29      	bge.n	8004ba6 <__ieee754_pow+0x99e>
 8004b52:	4652      	mov	r2, sl
 8004b54:	f000 f874 	bl	8004c40 <scalbn>
 8004b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b5c:	f7ff bbfd 	b.w	800435a <__ieee754_pow+0x152>
 8004b60:	4b32      	ldr	r3, [pc, #200]	; (8004c2c <__ieee754_pow+0xa24>)
 8004b62:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8004b66:	429f      	cmp	r7, r3
 8004b68:	f77f af14 	ble.w	8004994 <__ieee754_pow+0x78c>
 8004b6c:	4b30      	ldr	r3, [pc, #192]	; (8004c30 <__ieee754_pow+0xa28>)
 8004b6e:	440b      	add	r3, r1
 8004b70:	4303      	orrs	r3, r0
 8004b72:	d009      	beq.n	8004b88 <__ieee754_pow+0x980>
 8004b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f7fb ff16 	bl	80009ac <__aeabi_dcmplt>
 8004b80:	3800      	subs	r0, #0
 8004b82:	bf18      	it	ne
 8004b84:	2001      	movne	r0, #1
 8004b86:	e452      	b.n	800442e <__ieee754_pow+0x226>
 8004b88:	4622      	mov	r2, r4
 8004b8a:	462b      	mov	r3, r5
 8004b8c:	f7fb fae4 	bl	8000158 <__aeabi_dsub>
 8004b90:	4642      	mov	r2, r8
 8004b92:	464b      	mov	r3, r9
 8004b94:	f7fb ff1e 	bl	80009d4 <__aeabi_dcmpge>
 8004b98:	2800      	cmp	r0, #0
 8004b9a:	f43f aefb 	beq.w	8004994 <__ieee754_pow+0x78c>
 8004b9e:	e7e9      	b.n	8004b74 <__ieee754_pow+0x96c>
 8004ba0:	f04f 0a00 	mov.w	sl, #0
 8004ba4:	e720      	b.n	80049e8 <__ieee754_pow+0x7e0>
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	e7d6      	b.n	8004b58 <__ieee754_pow+0x950>
 8004baa:	f04f 0b00 	mov.w	fp, #0
 8004bae:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004c28 <__ieee754_pow+0xa20>
 8004bb2:	f7ff bbb9 	b.w	8004328 <__ieee754_pow+0x120>
 8004bb6:	f04f 0b00 	mov.w	fp, #0
 8004bba:	f04f 0c00 	mov.w	ip, #0
 8004bbe:	f7ff bbb3 	b.w	8004328 <__ieee754_pow+0x120>
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	f7ff bb3c 	b.w	8004242 <__ieee754_pow+0x3a>
 8004bca:	9200      	str	r2, [sp, #0]
 8004bcc:	f7ff bb88 	b.w	80042e0 <__ieee754_pow+0xd8>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f7ff bb72 	b.w	80042ba <__ieee754_pow+0xb2>
 8004bd6:	bf00      	nop
 8004bd8:	652b82fe 	.word	0x652b82fe
 8004bdc:	3c971547 	.word	0x3c971547
 8004be0:	00000000 	.word	0x00000000
 8004be4:	3fe62e43 	.word	0x3fe62e43
 8004be8:	fefa39ef 	.word	0xfefa39ef
 8004bec:	3fe62e42 	.word	0x3fe62e42
 8004bf0:	0ca86c39 	.word	0x0ca86c39
 8004bf4:	be205c61 	.word	0xbe205c61
 8004bf8:	72bea4d0 	.word	0x72bea4d0
 8004bfc:	3e663769 	.word	0x3e663769
 8004c00:	c5d26bf1 	.word	0xc5d26bf1
 8004c04:	3ebbbd41 	.word	0x3ebbbd41
 8004c08:	af25de2c 	.word	0xaf25de2c
 8004c0c:	3f11566a 	.word	0x3f11566a
 8004c10:	16bebd93 	.word	0x16bebd93
 8004c14:	3f66c16c 	.word	0x3f66c16c
 8004c18:	5555553e 	.word	0x5555553e
 8004c1c:	3fc55555 	.word	0x3fc55555
 8004c20:	3fe00000 	.word	0x3fe00000
 8004c24:	fff00000 	.word	0xfff00000
 8004c28:	3ff00000 	.word	0x3ff00000
 8004c2c:	4090cbff 	.word	0x4090cbff
 8004c30:	3f6f3400 	.word	0x3f6f3400

08004c34 <fabs>:
 8004c34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4770      	bx	lr
 8004c3c:	0000      	movs	r0, r0
	...

08004c40 <scalbn>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	4616      	mov	r6, r2
 8004c44:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004c48:	4604      	mov	r4, r0
 8004c4a:	460d      	mov	r5, r1
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	b992      	cbnz	r2, 8004c76 <scalbn+0x36>
 8004c50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004c54:	4303      	orrs	r3, r0
 8004c56:	d03c      	beq.n	8004cd2 <scalbn+0x92>
 8004c58:	4b31      	ldr	r3, [pc, #196]	; (8004d20 <scalbn+0xe0>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f7fb fc34 	bl	80004c8 <__aeabi_dmul>
 8004c60:	4b30      	ldr	r3, [pc, #192]	; (8004d24 <scalbn+0xe4>)
 8004c62:	4604      	mov	r4, r0
 8004c64:	429e      	cmp	r6, r3
 8004c66:	460d      	mov	r5, r1
 8004c68:	da0f      	bge.n	8004c8a <scalbn+0x4a>
 8004c6a:	a329      	add	r3, pc, #164	; (adr r3, 8004d10 <scalbn+0xd0>)
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f7fb fc2a 	bl	80004c8 <__aeabi_dmul>
 8004c74:	e006      	b.n	8004c84 <scalbn+0x44>
 8004c76:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004c7a:	42ba      	cmp	r2, r7
 8004c7c:	d109      	bne.n	8004c92 <scalbn+0x52>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	f7fb fa6c 	bl	800015c <__adddf3>
 8004c84:	4604      	mov	r4, r0
 8004c86:	460d      	mov	r5, r1
 8004c88:	e023      	b.n	8004cd2 <scalbn+0x92>
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004c90:	3a36      	subs	r2, #54	; 0x36
 8004c92:	f24c 3150 	movw	r1, #50000	; 0xc350
 8004c96:	428e      	cmp	r6, r1
 8004c98:	dd0e      	ble.n	8004cb8 <scalbn+0x78>
 8004c9a:	a31f      	add	r3, pc, #124	; (adr r3, 8004d18 <scalbn+0xd8>)
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004ca4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8004ca8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8004cac:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8004cb0:	481d      	ldr	r0, [pc, #116]	; (8004d28 <scalbn+0xe8>)
 8004cb2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8004cb6:	e7db      	b.n	8004c70 <scalbn+0x30>
 8004cb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004cbc:	4432      	add	r2, r6
 8004cbe:	428a      	cmp	r2, r1
 8004cc0:	dceb      	bgt.n	8004c9a <scalbn+0x5a>
 8004cc2:	2a00      	cmp	r2, #0
 8004cc4:	dd08      	ble.n	8004cd8 <scalbn+0x98>
 8004cc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004cca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004cce:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cd8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004cdc:	da0c      	bge.n	8004cf8 <scalbn+0xb8>
 8004cde:	a30c      	add	r3, pc, #48	; (adr r3, 8004d10 <scalbn+0xd0>)
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8004ce8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8004cec:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8004cf0:	480e      	ldr	r0, [pc, #56]	; (8004d2c <scalbn+0xec>)
 8004cf2:	f041 011f 	orr.w	r1, r1, #31
 8004cf6:	e7bb      	b.n	8004c70 <scalbn+0x30>
 8004cf8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004cfc:	3236      	adds	r2, #54	; 0x36
 8004cfe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d06:	4620      	mov	r0, r4
 8004d08:	4629      	mov	r1, r5
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <scalbn+0xf0>)
 8004d0e:	e7af      	b.n	8004c70 <scalbn+0x30>
 8004d10:	c2f8f359 	.word	0xc2f8f359
 8004d14:	01a56e1f 	.word	0x01a56e1f
 8004d18:	8800759c 	.word	0x8800759c
 8004d1c:	7e37e43c 	.word	0x7e37e43c
 8004d20:	43500000 	.word	0x43500000
 8004d24:	ffff3cb0 	.word	0xffff3cb0
 8004d28:	8800759c 	.word	0x8800759c
 8004d2c:	c2f8f359 	.word	0xc2f8f359
 8004d30:	3c900000 	.word	0x3c900000

08004d34 <with_errno>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	4604      	mov	r4, r0
 8004d38:	460d      	mov	r5, r1
 8004d3a:	4616      	mov	r6, r2
 8004d3c:	f7ff f9cc 	bl	80040d8 <__errno>
 8004d40:	4629      	mov	r1, r5
 8004d42:	6006      	str	r6, [r0, #0]
 8004d44:	4620      	mov	r0, r4
 8004d46:	bd70      	pop	{r4, r5, r6, pc}

08004d48 <xflow>:
 8004d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d4a:	4615      	mov	r5, r2
 8004d4c:	461c      	mov	r4, r3
 8004d4e:	b180      	cbz	r0, 8004d72 <xflow+0x2a>
 8004d50:	4610      	mov	r0, r2
 8004d52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004d56:	e9cd 0100 	strd	r0, r1, [sp]
 8004d5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d5e:	4628      	mov	r0, r5
 8004d60:	4621      	mov	r1, r4
 8004d62:	f7fb fbb1 	bl	80004c8 <__aeabi_dmul>
 8004d66:	2222      	movs	r2, #34	; 0x22
 8004d68:	b003      	add	sp, #12
 8004d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d6e:	f7ff bfe1 	b.w	8004d34 <with_errno>
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	e7ee      	b.n	8004d56 <xflow+0xe>

08004d78 <__math_uflow>:
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004d7e:	f7ff bfe3 	b.w	8004d48 <xflow>

08004d82 <__math_oflow>:
 8004d82:	2200      	movs	r2, #0
 8004d84:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004d88:	f7ff bfde 	b.w	8004d48 <xflow>

08004d8c <__ieee754_sqrt>:
 8004d8c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8004f30 <__ieee754_sqrt+0x1a4>
 8004d90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	ea3c 0c01 	bics.w	ip, ip, r1
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4606      	mov	r6, r0
 8004d9c:	460d      	mov	r5, r1
 8004d9e:	460a      	mov	r2, r1
 8004da0:	4604      	mov	r4, r0
 8004da2:	d10e      	bne.n	8004dc2 <__ieee754_sqrt+0x36>
 8004da4:	4602      	mov	r2, r0
 8004da6:	f7fb fb8f 	bl	80004c8 <__aeabi_dmul>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4630      	mov	r0, r6
 8004db0:	4629      	mov	r1, r5
 8004db2:	f7fb f9d3 	bl	800015c <__adddf3>
 8004db6:	4606      	mov	r6, r0
 8004db8:	460d      	mov	r5, r1
 8004dba:	4630      	mov	r0, r6
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc2:	2900      	cmp	r1, #0
 8004dc4:	dc0d      	bgt.n	8004de2 <__ieee754_sqrt+0x56>
 8004dc6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004dca:	ea5c 0c00 	orrs.w	ip, ip, r0
 8004dce:	d0f4      	beq.n	8004dba <__ieee754_sqrt+0x2e>
 8004dd0:	b139      	cbz	r1, 8004de2 <__ieee754_sqrt+0x56>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	f7fb f9c0 	bl	8000158 <__aeabi_dsub>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	f7fb fc9e 	bl	800071c <__aeabi_ddiv>
 8004de0:	e7e9      	b.n	8004db6 <__ieee754_sqrt+0x2a>
 8004de2:	1512      	asrs	r2, r2, #20
 8004de4:	f000 8089 	beq.w	8004efa <__ieee754_sqrt+0x16e>
 8004de8:	2500      	movs	r5, #0
 8004dea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dee:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004df6:	07d2      	lsls	r2, r2, #31
 8004df8:	bf5c      	itt	pl
 8004dfa:	005b      	lslpl	r3, r3, #1
 8004dfc:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8004e00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004e04:	bf58      	it	pl
 8004e06:	0064      	lslpl	r4, r4, #1
 8004e08:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004e0c:	0062      	lsls	r2, r4, #1
 8004e0e:	2016      	movs	r0, #22
 8004e10:	4629      	mov	r1, r5
 8004e12:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8004e16:	1076      	asrs	r6, r6, #1
 8004e18:	190f      	adds	r7, r1, r4
 8004e1a:	429f      	cmp	r7, r3
 8004e1c:	bfde      	ittt	le
 8004e1e:	1bdb      	suble	r3, r3, r7
 8004e20:	1939      	addle	r1, r7, r4
 8004e22:	192d      	addle	r5, r5, r4
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	3801      	subs	r0, #1
 8004e28:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004e2c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004e30:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004e34:	d1f0      	bne.n	8004e18 <__ieee754_sqrt+0x8c>
 8004e36:	4604      	mov	r4, r0
 8004e38:	2720      	movs	r7, #32
 8004e3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004e3e:	428b      	cmp	r3, r1
 8004e40:	eb0c 0e00 	add.w	lr, ip, r0
 8004e44:	dc02      	bgt.n	8004e4c <__ieee754_sqrt+0xc0>
 8004e46:	d113      	bne.n	8004e70 <__ieee754_sqrt+0xe4>
 8004e48:	4596      	cmp	lr, r2
 8004e4a:	d811      	bhi.n	8004e70 <__ieee754_sqrt+0xe4>
 8004e4c:	f1be 0f00 	cmp.w	lr, #0
 8004e50:	eb0e 000c 	add.w	r0, lr, ip
 8004e54:	da56      	bge.n	8004f04 <__ieee754_sqrt+0x178>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	db54      	blt.n	8004f04 <__ieee754_sqrt+0x178>
 8004e5a:	f101 0801 	add.w	r8, r1, #1
 8004e5e:	1a5b      	subs	r3, r3, r1
 8004e60:	4641      	mov	r1, r8
 8004e62:	4596      	cmp	lr, r2
 8004e64:	bf88      	it	hi
 8004e66:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004e6a:	eba2 020e 	sub.w	r2, r2, lr
 8004e6e:	4464      	add	r4, ip
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	3f01      	subs	r7, #1
 8004e74:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004e78:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004e7c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004e80:	d1dd      	bne.n	8004e3e <__ieee754_sqrt+0xb2>
 8004e82:	4313      	orrs	r3, r2
 8004e84:	d01b      	beq.n	8004ebe <__ieee754_sqrt+0x132>
 8004e86:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8004f34 <__ieee754_sqrt+0x1a8>
 8004e8a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004f38 <__ieee754_sqrt+0x1ac>
 8004e8e:	e9da 0100 	ldrd	r0, r1, [sl]
 8004e92:	e9db 2300 	ldrd	r2, r3, [fp]
 8004e96:	f7fb f95f 	bl	8000158 <__aeabi_dsub>
 8004e9a:	e9da 8900 	ldrd	r8, r9, [sl]
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4640      	mov	r0, r8
 8004ea4:	4649      	mov	r1, r9
 8004ea6:	f7fb fd8b 	bl	80009c0 <__aeabi_dcmple>
 8004eaa:	b140      	cbz	r0, 8004ebe <__ieee754_sqrt+0x132>
 8004eac:	e9da 0100 	ldrd	r0, r1, [sl]
 8004eb0:	e9db 2300 	ldrd	r2, r3, [fp]
 8004eb4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004eb8:	d126      	bne.n	8004f08 <__ieee754_sqrt+0x17c>
 8004eba:	463c      	mov	r4, r7
 8004ebc:	3501      	adds	r5, #1
 8004ebe:	106b      	asrs	r3, r5, #1
 8004ec0:	0864      	lsrs	r4, r4, #1
 8004ec2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004ec6:	07ea      	lsls	r2, r5, #31
 8004ec8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004ecc:	bf48      	it	mi
 8004ece:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8004ed8:	e76d      	b.n	8004db6 <__ieee754_sqrt+0x2a>
 8004eda:	0ae3      	lsrs	r3, r4, #11
 8004edc:	3915      	subs	r1, #21
 8004ede:	0564      	lsls	r4, r4, #21
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0fa      	beq.n	8004eda <__ieee754_sqrt+0x14e>
 8004ee4:	02d8      	lsls	r0, r3, #11
 8004ee6:	d50a      	bpl.n	8004efe <__ieee754_sqrt+0x172>
 8004ee8:	f1c2 0020 	rsb	r0, r2, #32
 8004eec:	fa24 f000 	lsr.w	r0, r4, r0
 8004ef0:	1e55      	subs	r5, r2, #1
 8004ef2:	4094      	lsls	r4, r2
 8004ef4:	4303      	orrs	r3, r0
 8004ef6:	1b4a      	subs	r2, r1, r5
 8004ef8:	e776      	b.n	8004de8 <__ieee754_sqrt+0x5c>
 8004efa:	4611      	mov	r1, r2
 8004efc:	e7f0      	b.n	8004ee0 <__ieee754_sqrt+0x154>
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	3201      	adds	r2, #1
 8004f02:	e7ef      	b.n	8004ee4 <__ieee754_sqrt+0x158>
 8004f04:	4688      	mov	r8, r1
 8004f06:	e7aa      	b.n	8004e5e <__ieee754_sqrt+0xd2>
 8004f08:	f7fb f928 	bl	800015c <__adddf3>
 8004f0c:	e9da 8900 	ldrd	r8, r9, [sl]
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4640      	mov	r0, r8
 8004f16:	4649      	mov	r1, r9
 8004f18:	f7fb fd48 	bl	80009ac <__aeabi_dcmplt>
 8004f1c:	b120      	cbz	r0, 8004f28 <__ieee754_sqrt+0x19c>
 8004f1e:	1ca1      	adds	r1, r4, #2
 8004f20:	bf08      	it	eq
 8004f22:	3501      	addeq	r5, #1
 8004f24:	3402      	adds	r4, #2
 8004f26:	e7ca      	b.n	8004ebe <__ieee754_sqrt+0x132>
 8004f28:	3401      	adds	r4, #1
 8004f2a:	f024 0401 	bic.w	r4, r4, #1
 8004f2e:	e7c6      	b.n	8004ebe <__ieee754_sqrt+0x132>
 8004f30:	7ff00000 	.word	0x7ff00000
 8004f34:	20000060 	.word	0x20000060
 8004f38:	20000068 	.word	0x20000068

08004f3c <_init>:
 8004f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3e:	bf00      	nop
 8004f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f42:	bc08      	pop	{r3}
 8004f44:	469e      	mov	lr, r3
 8004f46:	4770      	bx	lr

08004f48 <_fini>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	bf00      	nop
 8004f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4e:	bc08      	pop	{r3}
 8004f50:	469e      	mov	lr, r3
 8004f52:	4770      	bx	lr
