
MS5611_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000483c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004950  08004950  00014950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b8  080049b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080049b8  080049b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049b8  080049b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080049c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000070  08004a30  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08004a30  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006511  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013ee  00000000  00000000  000265ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d0  00000000  00000000  000279e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000535  00000000  00000000  000280b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016645  00000000  00000000  000285e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000091eb  00000000  00000000  0003ec2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fbb2  00000000  00000000  00047e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020c4  00000000  00000000  000c79c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c9a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004934 	.word	0x08004934

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004934 	.word	0x08004934

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 fe34 	bl	80016e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f816 	bl	8000ab0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 f888 	bl	8000b98 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a88:	f000 f858 	bl	8000b3c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
#ifdef MS5611_H_

  MS5611.I2C_ADDRESS = MS5611_I2C_ADDRESS;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <main+0x30>)
 8000a8e:	22ee      	movs	r2, #238	; 0xee
 8000a90:	809a      	strh	r2, [r3, #4]
  MS5611.i2c = &hi2c1;
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <main+0x30>)
 8000a94:	4a05      	ldr	r2, [pc, #20]	; (8000aac <main+0x34>)
 8000a96:	601a      	str	r2, [r3, #0]
  MS5611_Init(&MS5611);
 8000a98:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <main+0x30>)
 8000a9a:	f000 f8b1 	bl	8000c00 <MS5611_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  MS5611_Calc_Temp_Press(&MS5611);
 8000a9e:	4802      	ldr	r0, [pc, #8]	; (8000aa8 <main+0x30>)
 8000aa0:	f000 fa82 	bl	8000fa8 <MS5611_Calc_Temp_Press>
 8000aa4:	e7fb      	b.n	8000a9e <main+0x26>
 8000aa6:	bf00      	nop
 8000aa8:	20000090 	.word	0x20000090
 8000aac:	20000100 	.word	0x20000100

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b090      	sub	sp, #64	; 0x40
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0318 	add.w	r3, r7, #24
 8000aba:	2228      	movs	r2, #40	; 0x28
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f002 fffe 	bl	8003ac0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ada:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000adc:	2300      	movs	r3, #0
 8000ade:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af4:	f107 0318 	add.w	r3, r7, #24
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 fbe5 	bl	80032c8 <HAL_RCC_OscConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b04:	f000 f876 	bl	8000bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b08:	230f      	movs	r3, #15
 8000b0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1e:	1d3b      	adds	r3, r7, #4
 8000b20:	2102      	movs	r1, #2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 fe52 	bl	80037cc <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b2e:	f000 f861 	bl	8000bf4 <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3740      	adds	r7, #64	; 0x40
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <MX_I2C1_Init+0x54>)
 8000b44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <MX_I2C1_Init+0x58>)
 8000b4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <MX_I2C1_Init+0x50>)
 8000b7a:	f001 f8b3 	bl	8001ce4 <HAL_I2C_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b84:	f000 f836 	bl	8000bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000100 	.word	0x20000100
 8000b90:	40005400 	.word	0x40005400
 8000b94:	000186a0 	.word	0x000186a0

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_GPIO_Init+0x58>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <MX_GPIO_Init+0x58>)
 8000ba4:	f043 0320 	orr.w	r3, r3, #32
 8000ba8:	6193      	str	r3, [r2, #24]
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_GPIO_Init+0x58>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f003 0320 	and.w	r3, r3, #32
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_GPIO_Init+0x58>)
 8000bb8:	699b      	ldr	r3, [r3, #24]
 8000bba:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <MX_GPIO_Init+0x58>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6193      	str	r3, [r2, #24]
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_GPIO_Init+0x58>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_GPIO_Init+0x58>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <MX_GPIO_Init+0x58>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6193      	str	r3, [r2, #24]
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <MX_GPIO_Init+0x58>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	607b      	str	r3, [r7, #4]
 8000be4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <Error_Handler+0x8>
	...

08000c00 <MS5611_Init>:
uint8_t adc_read = 0;

/******************************************************************************
         			#### MS5611 FUNCTIONS ####
******************************************************************************/
MS5611_StatusTypeDef MS5611_Init(MS5611_HandleTypeDef *dev){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

	MS5611_Reset(dev);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f000 f823 	bl	8000c54 <MS5611_Reset>
	 if(HAL_I2C_IsDeviceReady(dev->i2c, dev->I2C_ADDRESS, 1, 10000) != HAL_OK){
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6818      	ldr	r0, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	8899      	ldrh	r1, [r3, #4]
 8000c16:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f001 fe0a 	bl	8002834 <HAL_I2C_IsDeviceReady>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d005      	beq.n	8000c32 <MS5611_Init+0x32>

			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2c:	4808      	ldr	r0, [pc, #32]	; (8000c50 <MS5611_Init+0x50>)
 8000c2e:	f001 f841 	bl	8001cb4 <HAL_GPIO_WritePin>

	 }

	MS5611_Reset(dev);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f000 f80e 	bl	8000c54 <MS5611_Reset>
	HAL_Delay(10);
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f000 fdb7 	bl	80017ac <HAL_Delay>

	MS5611_Get_CalibCoeff(dev);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f000 f824 	bl	8000c8c <MS5611_Get_CalibCoeff>

		return MS5611_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40011000 	.word	0x40011000

08000c54 <MS5611_Reset>:



MS5611_StatusTypeDef MS5611_Reset(MS5611_HandleTypeDef *dev){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af04      	add	r7, sp, #16
 8000c5a:	6078      	str	r0, [r7, #4]

	uint8_t ResetCom = 0x1E;
 8000c5c:	231e      	movs	r3, #30
 8000c5e:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(dev->i2c, dev->I2C_ADDRESS, dev->I2C_ADDRESS, 1, &ResetCom, 1, 1000);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	8899      	ldrh	r1, [r3, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	889a      	ldrh	r2, [r3, #4]
 8000c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c70:	9302      	str	r3, [sp, #8]
 8000c72:	2301      	movs	r3, #1
 8000c74:	9301      	str	r3, [sp, #4]
 8000c76:	f107 030f 	add.w	r3, r7, #15
 8000c7a:	9300      	str	r3, [sp, #0]
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f001 fcdf 	bl	8002640 <HAL_I2C_Mem_Write>
	return MS5611_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <MS5611_Get_CalibCoeff>:

MS5611_StatusTypeDef MS5611_Get_CalibCoeff(MS5611_HandleTypeDef *dev){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	6078      	str	r0, [r7, #4]

	uint8_t CalibCoefAddrss[7] = {0xA2, //C1
 8000c94:	4a82      	ldr	r2, [pc, #520]	; (8000ea0 <MS5611_Get_CalibCoeff+0x214>)
 8000c96:	f107 0320 	add.w	r3, r7, #32
 8000c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c9e:	6018      	str	r0, [r3, #0]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	8019      	strh	r1, [r3, #0]
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	0c0a      	lsrs	r2, r1, #16
 8000ca8:	701a      	strb	r2, [r3, #0]
								  0xA8, //C4
								  0xAA, //C5
								  0xAC, //C6
								  0xAE}; /*! The last address is for CRC*/

	uint8_t TempryCalibCoefVal[2] = {0};
 8000caa:	2300      	movs	r3, #0
 8000cac:	83bb      	strh	r3, [r7, #28]
	uint8_t CalibCoefVal[14] = {0};
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	811a      	strh	r2, [r3, #8]
	uint8_t cnt = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	for(cnt = 0; cnt <= 6 ; cnt++){
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000cca:	e03b      	b.n	8000d44 <MS5611_Get_CalibCoeff+0xb8>

		HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &CalibCoefAddrss[cnt], 1, 1000);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	8899      	ldrh	r1, [r3, #4]
 8000cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cd8:	f107 0220 	add.w	r2, r7, #32
 8000cdc:	441a      	add	r2, r3
 8000cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f001 f941 	bl	8001f6c <HAL_I2C_Master_Transmit>

		for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cee:	e010      	b.n	8000d12 <MS5611_Get_CalibCoeff+0x86>

			HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &TempryCalibCoefVal[cnt_2], 2, 1000);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6818      	ldr	r0, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	8899      	ldrh	r1, [r3, #4]
 8000cf8:	f107 021c 	add.w	r2, r7, #28
 8000cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfe:	441a      	add	r2, r3
 8000d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2302      	movs	r3, #2
 8000d08:	f001 fa2e 	bl	8002168 <HAL_I2C_Master_Receive>
		for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 8000d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0e:	3301      	adds	r3, #1
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	ddeb      	ble.n	8000cf0 <MS5611_Get_CalibCoeff+0x64>

		}

		CalibCoefVal[(cnt*2)]   = TempryCalibCoefVal[0];
 8000d18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	7f3a      	ldrb	r2, [r7, #28]
 8000d20:	3330      	adds	r3, #48	; 0x30
 8000d22:	443b      	add	r3, r7
 8000d24:	f803 2c24 	strb.w	r2, [r3, #-36]
		CalibCoefVal[(cnt*2+1)] = TempryCalibCoefVal[1];
 8000d28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	3301      	adds	r3, #1
 8000d30:	7f7a      	ldrb	r2, [r7, #29]
 8000d32:	3330      	adds	r3, #48	; 0x30
 8000d34:	443b      	add	r3, r7
 8000d36:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(cnt = 0; cnt <= 6 ; cnt++){
 8000d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d3e:	3301      	adds	r3, #1
 8000d40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d48:	2b06      	cmp	r3, #6
 8000d4a:	d9bf      	bls.n	8000ccc <MS5611_Get_CalibCoeff+0x40>

	}
	cnt = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	dev->Clb_Cf.C1  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8000d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d56:	3330      	adds	r3, #48	; 0x30
 8000d58:	443b      	add	r3, r7
 8000d5a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000d5e:	021b      	lsls	r3, r3, #8
 8000d60:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000d64:	3201      	adds	r2, #1
 8000d66:	3230      	adds	r2, #48	; 0x30
 8000d68:	443a      	add	r2, r7
 8000d6a:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	461a      	mov	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C2  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8000d80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d84:	3330      	adds	r3, #48	; 0x30
 8000d86:	443b      	add	r3, r7
 8000d88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000d8c:	021b      	lsls	r3, r3, #8
 8000d8e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000d92:	3201      	adds	r2, #1
 8000d94:	3230      	adds	r2, #48	; 0x30
 8000d96:	443a      	add	r2, r7
 8000d98:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000da8:	3302      	adds	r3, #2
 8000daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C3  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8000dae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000db2:	3330      	adds	r3, #48	; 0x30
 8000db4:	443b      	add	r3, r7
 8000db6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000dc0:	3201      	adds	r2, #1
 8000dc2:	3230      	adds	r2, #48	; 0x30
 8000dc4:	443a      	add	r2, r7
 8000dc6:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	461a      	mov	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	611a      	str	r2, [r3, #16]
 8000dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C4  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8000ddc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000de0:	3330      	adds	r3, #48	; 0x30
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000dee:	3201      	adds	r2, #1
 8000df0:	3230      	adds	r2, #48	; 0x30
 8000df2:	443a      	add	r2, r7
 8000df4:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	615a      	str	r2, [r3, #20]
 8000e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e04:	3302      	adds	r3, #2
 8000e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C5  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8000e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e0e:	3330      	adds	r3, #48	; 0x30
 8000e10:	443b      	add	r3, r7
 8000e12:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000e1c:	3201      	adds	r2, #1
 8000e1e:	3230      	adds	r2, #48	; 0x30
 8000e20:	443a      	add	r2, r7
 8000e22:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	619a      	str	r2, [r3, #24]
 8000e2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e32:	3302      	adds	r3, #2
 8000e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C6  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8000e38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e3c:	3330      	adds	r3, #48	; 0x30
 8000e3e:	443b      	add	r3, r7
 8000e40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e44:	021b      	lsls	r3, r3, #8
 8000e46:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000e4a:	3201      	adds	r2, #1
 8000e4c:	3230      	adds	r2, #48	; 0x30
 8000e4e:	443a      	add	r2, r7
 8000e50:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	461a      	mov	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	61da      	str	r2, [r3, #28]
 8000e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e60:	3302      	adds	r3, #2
 8000e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.crc = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8000e66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e6a:	3330      	adds	r3, #48	; 0x30
 8000e6c:	443b      	add	r3, r7
 8000e6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e72:	021b      	lsls	r3, r3, #8
 8000e74:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000e78:	3201      	adds	r2, #1
 8000e7a:	3230      	adds	r2, #48	; 0x30
 8000e7c:	443a      	add	r2, r7
 8000e7e:	f812 2c24 	ldrb.w	r2, [r2, #-36]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	461a      	mov	r2, r3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	621a      	str	r2, [r3, #32]
 8000e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e8e:	3302      	adds	r3, #2
 8000e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

return MS5611_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3730      	adds	r7, #48	; 0x30
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08004950 	.word	0x08004950

08000ea4 <MS5611_ReadRaw_Press_Temp>:


MS5611_StatusTypeDef MS5611_ReadRaw_Press_Temp(MS5611_HandleTypeDef *dev){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]

	uint8_t RawDataD1[3]  = {0}; /*! D1 = Raw pressure value that will be compensated at other functions*/
 8000eac:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <MS5611_ReadRaw_Press_Temp+0xf0>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	81bb      	strh	r3, [r7, #12]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73bb      	strb	r3, [r7, #14]
	uint8_t RawDataD2[3]  = {0}; /*! D2 = Raw temperature value that will be compensated at other functions*/
 8000eb6:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <MS5611_ReadRaw_Press_Temp+0xf0>)
 8000eb8:	881b      	ldrh	r3, [r3, #0]
 8000eba:	813b      	strh	r3, [r7, #8]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	72bb      	strb	r3, [r7, #10]
	/**
	 * (1)Raw data read request at selected osrs value
	 * (2)Indicate that you are ready to receive incoming data
	 * (3)Save incoming data to arrays as msb, lsb, xlsb
	 */
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D1, 1, 1000); //(1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	8899      	ldrh	r1, [r3, #4]
 8000ec8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	4a31      	ldr	r2, [pc, #196]	; (8000f98 <MS5611_ReadRaw_Press_Temp+0xf4>)
 8000ed2:	f001 f84b 	bl	8001f6c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000ed6:	2014      	movs	r0, #20
 8000ed8:	f000 fc68 	bl	80017ac <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adc_read , 1, 1000);	 //(2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6818      	ldr	r0, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	8899      	ldrh	r1, [r3, #4]
 8000ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2301      	movs	r3, #1
 8000eec:	4a2b      	ldr	r2, [pc, #172]	; (8000f9c <MS5611_ReadRaw_Press_Temp+0xf8>)
 8000eee:	f001 f83d 	bl	8001f6c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000ef2:	2014      	movs	r0, #20
 8000ef4:	f000 fc5a 	bl	80017ac <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD1[0], 3, 1000);	 //(3)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	8899      	ldrh	r1, [r3, #4]
 8000f00:	f107 020c 	add.w	r2, r7, #12
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	f001 f92c 	bl	8002168 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D1 = (uint32_t)((RawDataD1[0]<<16) | (RawDataD1[1]<<8) | (RawDataD1[2]<<0)); // MSB|LSB|XLSB
 8000f10:	7b3b      	ldrb	r3, [r7, #12]
 8000f12:	041a      	lsls	r2, r3, #16
 8000f14:	7b7b      	ldrb	r3, [r7, #13]
 8000f16:	021b      	lsls	r3, r3, #8
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	7bba      	ldrb	r2, [r7, #14]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	461a      	mov	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D2, 1, 1000); //(1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	8899      	ldrh	r1, [r3, #4]
 8000f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <MS5611_ReadRaw_Press_Temp+0xfc>)
 8000f36:	f001 f819 	bl	8001f6c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000f3a:	2014      	movs	r0, #20
 8000f3c:	f000 fc36 	bl	80017ac <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adc_read , 1, 1000);  	 //(2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	8899      	ldrh	r1, [r3, #4]
 8000f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <MS5611_ReadRaw_Press_Temp+0xf8>)
 8000f52:	f001 f80b 	bl	8001f6c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000f56:	2014      	movs	r0, #20
 8000f58:	f000 fc28 	bl	80017ac <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD2[0], 3, 1000);  //(3)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	8899      	ldrh	r1, [r3, #4]
 8000f64:	f107 0208 	add.w	r2, r7, #8
 8000f68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2303      	movs	r3, #3
 8000f70:	f001 f8fa 	bl	8002168 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D2 = (uint32_t)((RawDataD2[0]<<16) | (RawDataD2[1]<<8) | (RawDataD2[2]<<0)); // MSB|LSB|XLSB
 8000f74:	7a3b      	ldrb	r3, [r7, #8]
 8000f76:	041a      	lsls	r2, r3, #16
 8000f78:	7a7b      	ldrb	r3, [r7, #9]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	7aba      	ldrb	r2, [r7, #10]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	461a      	mov	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c

	return MS5611_OK;
 8000f88:	2300      	movs	r3, #0

}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	08004958 	.word	0x08004958
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000160 	.word	0x20000160
 8000fa0:	20000001 	.word	0x20000001
 8000fa4:	00000000 	.word	0x00000000

08000fa8 <MS5611_Calc_Temp_Press>:

MS5611_StatusTypeDef MS5611_Calc_Temp_Press(MS5611_HandleTypeDef *dev){
 8000fa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]

	MS5611_ReadRaw_Press_Temp(dev);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ff76 	bl	8000ea4 <MS5611_ReadRaw_Press_Temp>

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	dev->ClcPrms.dT   = dev->ClcPrms.D2 - dev->Clb_Cf.C5 * pow(2,8);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff fa09 	bl	80003d4 <__aeabi_ui2d>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	460d      	mov	r5, r1
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fa02 	bl	80003d4 <__aeabi_ui2d>
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	4bc4      	ldr	r3, [pc, #784]	; (80012e8 <MS5611_Calc_Temp_Press+0x340>)
 8000fd6:	f7ff fa77 	bl	80004c8 <__aeabi_dmul>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	460b      	mov	r3, r1
 8000fde:	4620      	mov	r0, r4
 8000fe0:	4629      	mov	r1, r5
 8000fe2:	f7ff f8b9 	bl	8000158 <__aeabi_dsub>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	dev->ClcPrms.TEMP = 2000 + dev->ClcPrms.dT * dev->Clb_Cf.C6 / pow(2,23);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff f9ea 	bl	80003d4 <__aeabi_ui2d>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4620      	mov	r0, r4
 8001006:	4629      	mov	r1, r5
 8001008:	f7ff fa5e 	bl	80004c8 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	4bb4      	ldr	r3, [pc, #720]	; (80012ec <MS5611_Calc_Temp_Press+0x344>)
 800101a:	f7ff fb7f 	bl	800071c <__aeabi_ddiv>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4bb1      	ldr	r3, [pc, #708]	; (80012f0 <MS5611_Calc_Temp_Press+0x348>)
 800102c:	f7ff f896 	bl	800015c <__adddf3>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	dev->ClcPrms.OFF  = dev->Clb_Cf.C2 * pow(2,16) + (dev->Clb_Cf.C4 * dev->ClcPrms.dT) / pow(2,7);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f9c8 	bl	80003d4 <__aeabi_ui2d>
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	4baa      	ldr	r3, [pc, #680]	; (80012f4 <MS5611_Calc_Temp_Press+0x34c>)
 800104a:	f7ff fa3d 	bl	80004c8 <__aeabi_dmul>
 800104e:	4602      	mov	r2, r0
 8001050:	460b      	mov	r3, r1
 8001052:	4614      	mov	r4, r2
 8001054:	461d      	mov	r5, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff f9ba 	bl	80003d4 <__aeabi_ui2d>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001066:	f7ff fa2f 	bl	80004c8 <__aeabi_dmul>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4ba0      	ldr	r3, [pc, #640]	; (80012f8 <MS5611_Calc_Temp_Press+0x350>)
 8001078:	f7ff fb50 	bl	800071c <__aeabi_ddiv>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	f7ff f86a 	bl	800015c <__adddf3>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	dev->ClcPrms.SENS = dev->Clb_Cf.C1 * pow(2,15) + (dev->Clb_Cf.C3 * dev->ClcPrms.dT) / pow(2,8);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f99c 	bl	80003d4 <__aeabi_ui2d>
 800109c:	f04f 0200 	mov.w	r2, #0
 80010a0:	4b96      	ldr	r3, [pc, #600]	; (80012fc <MS5611_Calc_Temp_Press+0x354>)
 80010a2:	f7ff fa11 	bl	80004c8 <__aeabi_dmul>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4614      	mov	r4, r2
 80010ac:	461d      	mov	r5, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f98e 	bl	80003d4 <__aeabi_ui2d>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80010be:	f7ff fa03 	bl	80004c8 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b86      	ldr	r3, [pc, #536]	; (80012e8 <MS5611_Calc_Temp_Press+0x340>)
 80010d0:	f7ff fb24 	bl	800071c <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4620      	mov	r0, r4
 80010da:	4629      	mov	r1, r5
 80010dc:	f7ff f83e 	bl	800015c <__adddf3>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	dev->ClcPrms.P	  = 2 * (dev->ClcPrms.D1 * dev->ClcPrms.SENS / pow(2,21) - dev->ClcPrms.OFF) / pow(2,15);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f970 	bl	80003d4 <__aeabi_ui2d>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80010fa:	f7ff f9e5 	bl	80004c8 <__aeabi_dmul>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	4b7d      	ldr	r3, [pc, #500]	; (8001300 <MS5611_Calc_Temp_Press+0x358>)
 800110c:	f7ff fb06 	bl	800071c <__aeabi_ddiv>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800111e:	f7ff f81b 	bl	8000158 <__aeabi_dsub>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	f7ff f815 	bl	800015c <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b6f      	ldr	r3, [pc, #444]	; (80012fc <MS5611_Calc_Temp_Press+0x354>)
 8001140:	f7ff faec 	bl	800071c <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	6879      	ldr	r1, [r7, #4]
 800114a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	/*! Calculate 2st order temperature and pressure  according to MS5611 2st order algorithm */
	if(dev->ClcPrms.TEMP < 2000){
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	4b65      	ldr	r3, [pc, #404]	; (80012f0 <MS5611_Calc_Temp_Press+0x348>)
 800115a:	f7ff fc27 	bl	80009ac <__aeabi_dcmplt>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 8161 	beq.w	8001428 <MS5611_Calc_Temp_Press+0x480>

		/*! Low Temperature */
		dev->ClcPrms.TEMP2 = (dev->ClcPrms.dT * dev->ClcPrms.dT) / pow(2,31);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001172:	f7ff f9a9 	bl	80004c8 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b60      	ldr	r3, [pc, #384]	; (8001304 <MS5611_Calc_Temp_Press+0x35c>)
 8001184:	f7ff faca 	bl	800071c <__aeabi_ddiv>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		dev->ClcPrms.OFF2  = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,1);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	4b54      	ldr	r3, [pc, #336]	; (80012f0 <MS5611_Calc_Temp_Press+0x348>)
 800119e:	f7fe ffdb 	bl	8000158 <__aeabi_dsub>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4614      	mov	r4, r2
 80011a8:	461d      	mov	r5, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b4e      	ldr	r3, [pc, #312]	; (80012f0 <MS5611_Calc_Temp_Press+0x348>)
 80011b6:	f7fe ffcf 	bl	8000158 <__aeabi_dsub>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4620      	mov	r0, r4
 80011c0:	4629      	mov	r1, r5
 80011c2:	f7ff f981 	bl	80004c8 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b4d      	ldr	r3, [pc, #308]	; (8001308 <MS5611_Calc_Temp_Press+0x360>)
 80011d4:	f7ff f978 	bl	80004c8 <__aeabi_dmul>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	4610      	mov	r0, r2
 80011de:	4619      	mov	r1, r3
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e8:	f7ff fa98 	bl	800071c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		dev->ClcPrms.SENS2 = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,2);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <MS5611_Calc_Temp_Press+0x348>)
 8001202:	f7fe ffa9 	bl	8000158 <__aeabi_dsub>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4614      	mov	r4, r2
 800120c:	461d      	mov	r5, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	4b35      	ldr	r3, [pc, #212]	; (80012f0 <MS5611_Calc_Temp_Press+0x348>)
 800121a:	f7fe ff9d 	bl	8000158 <__aeabi_dsub>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4620      	mov	r0, r4
 8001224:	4629      	mov	r1, r5
 8001226:	f7ff f94f 	bl	80004c8 <__aeabi_dmul>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b34      	ldr	r3, [pc, #208]	; (8001308 <MS5611_Calc_Temp_Press+0x360>)
 8001238:	f7ff f946 	bl	80004c8 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4610      	mov	r0, r2
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b30      	ldr	r3, [pc, #192]	; (800130c <MS5611_Calc_Temp_Press+0x364>)
 800124a:	f7ff fa67 	bl	800071c <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

				if(dev->ClcPrms.TEMP < -1500){
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800125e:	a31e      	add	r3, pc, #120	; (adr r3, 80012d8 <MS5611_Calc_Temp_Press+0x330>)
 8001260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001264:	f7ff fba2 	bl	80009ac <__aeabi_dcmplt>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80b4 	beq.w	80013d8 <MS5611_Calc_Temp_Press+0x430>
					/*! Very Low Temperature */
					dev->ClcPrms.OFF2  = dev->ClcPrms.OFF2 + 7 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800127c:	a318      	add	r3, pc, #96	; (adr r3, 80012e0 <MS5611_Calc_Temp_Press+0x338>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7fe ff6b 	bl	800015c <__adddf3>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4690      	mov	r8, r2
 800128c:	4699      	mov	r9, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001294:	a312      	add	r3, pc, #72	; (adr r3, 80012e0 <MS5611_Calc_Temp_Press+0x338>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7fe ff5f 	bl	800015c <__adddf3>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4640      	mov	r0, r8
 80012a4:	4649      	mov	r1, r9
 80012a6:	f7ff f90f 	bl	80004c8 <__aeabi_dmul>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	4610      	mov	r0, r2
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MS5611_Calc_Temp_Press+0x368>)
 80012b8:	f7ff f906 	bl	80004c8 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4620      	mov	r0, r4
 80012c2:	4629      	mov	r1, r5
 80012c4:	f7fe ff4a 	bl	800015c <__adddf3>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
					dev->ClcPrms.SENS2 = dev->ClcPrms.SENS2 + 11 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500)) / pow(2,1);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	e01e      	b.n	8001314 <MS5611_Calc_Temp_Press+0x36c>
 80012d6:	bf00      	nop
 80012d8:	00000000 	.word	0x00000000
 80012dc:	c0977000 	.word	0xc0977000
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40977000 	.word	0x40977000
 80012e8:	40700000 	.word	0x40700000
 80012ec:	41600000 	.word	0x41600000
 80012f0:	409f4000 	.word	0x409f4000
 80012f4:	40f00000 	.word	0x40f00000
 80012f8:	40600000 	.word	0x40600000
 80012fc:	40e00000 	.word	0x40e00000
 8001300:	41400000 	.word	0x41400000
 8001304:	41e00000 	.word	0x41e00000
 8001308:	40140000 	.word	0x40140000
 800130c:	40100000 	.word	0x40100000
 8001310:	401c0000 	.word	0x401c0000
 8001314:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800131e:	a382      	add	r3, pc, #520	; (adr r3, 8001528 <MS5611_Calc_Temp_Press+0x580>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7fe ff1a 	bl	800015c <__adddf3>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4690      	mov	r8, r2
 800132e:	4699      	mov	r9, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001336:	a37c      	add	r3, pc, #496	; (adr r3, 8001528 <MS5611_Calc_Temp_Press+0x580>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7fe ff0e 	bl	800015c <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4640      	mov	r0, r8
 8001346:	4649      	mov	r1, r9
 8001348:	f7ff f8be 	bl	80004c8 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b7b      	ldr	r3, [pc, #492]	; (8001548 <MS5611_Calc_Temp_Press+0x5a0>)
 800135a:	f7ff f8b5 	bl	80004c8 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4610      	mov	r0, r2
 8001364:	4619      	mov	r1, r3
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800136e:	f7ff f9d5 	bl	800071c <__aeabi_ddiv>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4620      	mov	r0, r4
 8001378:	4629      	mov	r1, r5
 800137a:	f7fe feef 	bl	800015c <__adddf3>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

					dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001394:	f7fe fee0 	bl	8000158 <__aeabi_dsub>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80013ae:	f7fe fed3 	bl	8000158 <__aeabi_dsub>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
					dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80013c8:	f7fe fec6 	bl	8000158 <__aeabi_dsub>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 80013d6:	e063      	b.n	80014a0 <MS5611_Calc_Temp_Press+0x4f8>

				}
				else{

					dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80013e4:	f7fe feb8 	bl	8000158 <__aeabi_dsub>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
					dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80013fe:	f7fe feab 	bl	8000158 <__aeabi_dsub>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
					dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001418:	f7fe fe9e 	bl	8000158 <__aeabi_dsub>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001426:	e03b      	b.n	80014a0 <MS5611_Calc_Temp_Press+0x4f8>


	}
	else{
		/*! High Temperature */
		dev->ClcPrms.TEMP2 = 0;
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 0300 	mov.w	r3, #0
 8001432:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		dev->ClcPrms.OFF2  = 0;
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		dev->ClcPrms.SENS2 = 0;
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

		dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800145e:	f7fe fe7b 	bl	8000158 <__aeabi_dsub>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001478:	f7fe fe6e 	bl	8000158 <__aeabi_dsub>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001492:	f7fe fe61 	bl	8000158 <__aeabi_dsub>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	}
	MS5611_Altitude = (SeaLevelTemp / GradientTemp) * (1 - pow((dev->ClcPrms.P / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel)));
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80014a6:	a322      	add	r3, pc, #136	; (adr r3, 8001530 <MS5611_Calc_Temp_Press+0x588>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff f936 	bl	800071c <__aeabi_ddiv>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	a31f      	add	r3, pc, #124	; (adr r3, 8001538 <MS5611_Calc_Temp_Press+0x590>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	f002 fb31 	bl	8003b24 <pow>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	f04f 0000 	mov.w	r0, #0
 80014ca:	4920      	ldr	r1, [pc, #128]	; (800154c <MS5611_Calc_Temp_Press+0x5a4>)
 80014cc:	f7fe fe44 	bl	8000158 <__aeabi_dsub>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	a319      	add	r3, pc, #100	; (adr r3, 8001540 <MS5611_Calc_Temp_Press+0x598>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7fe fff3 	bl	80004c8 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	4610      	mov	r0, r2
 80014e8:	4619      	mov	r1, r3
 80014ea:	f7ff fa9d 	bl	8000a28 <__aeabi_d2iz>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <MS5611_Calc_Temp_Press+0x5a8>)
 80014f2:	6013      	str	r3, [r2, #0]
	MS5611_Press = dev->ClcPrms.P ;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fa93 	bl	8000a28 <__aeabi_d2iz>
 8001502:	4603      	mov	r3, r0
 8001504:	4a13      	ldr	r2, [pc, #76]	; (8001554 <MS5611_Calc_Temp_Press+0x5ac>)
 8001506:	6013      	str	r3, [r2, #0]
	MS5611_Temp  = dev->ClcPrms.TEMP ;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fa89 	bl	8000a28 <__aeabi_d2iz>
 8001516:	4603      	mov	r3, r0
 8001518:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <MS5611_Calc_Temp_Press+0x5b0>)
 800151a:	6013      	str	r3, [r2, #0]

	return MS5611_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001528:	00000000 	.word	0x00000000
 800152c:	40977000 	.word	0x40977000
 8001530:	00000000 	.word	0x00000000
 8001534:	40f8bcd0 	.word	0x40f8bcd0
 8001538:	a0829b73 	.word	0xa0829b73
 800153c:	3fc85a7a 	.word	0x3fc85a7a
 8001540:	9d89d89d 	.word	0x9d89d89d
 8001544:	40e5a558 	.word	0x40e5a558
 8001548:	40260000 	.word	0x40260000
 800154c:	3ff00000 	.word	0x3ff00000
 8001550:	2000015c 	.word	0x2000015c
 8001554:	20000154 	.word	0x20000154
 8001558:	20000158 	.word	0x20000158

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_MspInit+0x5c>)
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <HAL_MspInit+0x5c>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6193      	str	r3, [r2, #24]
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_MspInit+0x5c>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_MspInit+0x5c>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_MspInit+0x5c>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	61d3      	str	r3, [r2, #28]
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <HAL_MspInit+0x5c>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_MspInit+0x60>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_MspInit+0x60>)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40010000 	.word	0x40010000

080015c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b088      	sub	sp, #32
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a16      	ldr	r2, [pc, #88]	; (8001634 <HAL_I2C_MspInit+0x74>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d125      	bne.n	800162c <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <HAL_I2C_MspInit+0x78>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a14      	ldr	r2, [pc, #80]	; (8001638 <HAL_I2C_MspInit+0x78>)
 80015e6:	f043 0308 	orr.w	r3, r3, #8
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <HAL_I2C_MspInit+0x78>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015f8:	23c0      	movs	r3, #192	; 0xc0
 80015fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fc:	2312      	movs	r3, #18
 80015fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4619      	mov	r1, r3
 800160e:	480b      	ldr	r0, [pc, #44]	; (800163c <HAL_I2C_MspInit+0x7c>)
 8001610:	f000 f9d4 	bl	80019bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_I2C_MspInit+0x78>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_I2C_MspInit+0x78>)
 800161a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800161e:	61d3      	str	r3, [r2, #28]
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_I2C_MspInit+0x78>)
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800162c:	bf00      	nop
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40005400 	.word	0x40005400
 8001638:	40021000 	.word	0x40021000
 800163c:	40010c00 	.word	0x40010c00

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr

08001676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr

08001682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001686:	f000 f875 	bl	8001774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}

0800168e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
	...

0800169c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800169c:	f7ff fff7 	bl	800168e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016a0:	480b      	ldr	r0, [pc, #44]	; (80016d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80016a2:	490c      	ldr	r1, [pc, #48]	; (80016d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80016a4:	4a0c      	ldr	r2, [pc, #48]	; (80016d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b6:	4a09      	ldr	r2, [pc, #36]	; (80016dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80016b8:	4c09      	ldr	r4, [pc, #36]	; (80016e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016c6:	f002 fa09 	bl	8003adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ca:	f7ff f9d5 	bl	8000a78 <main>
  bx lr
 80016ce:	4770      	bx	lr
  ldr r0, =_sdata
 80016d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016d8:	080049c0 	.word	0x080049c0
  ldr r2, =_sbss
 80016dc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016e0:	200002a0 	.word	0x200002a0

080016e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016e4:	e7fe      	b.n	80016e4 <ADC1_2_IRQHandler>
	...

080016e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_Init+0x28>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HAL_Init+0x28>)
 80016f2:	f043 0310 	orr.w	r3, r3, #16
 80016f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016f8:	2003      	movs	r0, #3
 80016fa:	f000 f92b 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016fe:	200f      	movs	r0, #15
 8001700:	f000 f808 	bl	8001714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001704:	f7ff ff2a 	bl	800155c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40022000 	.word	0x40022000

08001714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_InitTick+0x54>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_InitTick+0x58>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	fbb3 f3f1 	udiv	r3, r3, r1
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f935 	bl	80019a2 <HAL_SYSTICK_Config>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e00e      	b.n	8001760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d80a      	bhi.n	800175e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001748:	2200      	movs	r2, #0
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	f000 f90b 	bl	800196a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001754:	4a06      	ldr	r2, [pc, #24]	; (8001770 <HAL_InitTick+0x5c>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
 800175c:	e000      	b.n	8001760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000004 	.word	0x20000004
 800176c:	2000000c 	.word	0x2000000c
 8001770:	20000008 	.word	0x20000008

08001774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_IncTick+0x1c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_IncTick+0x20>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a03      	ldr	r2, [pc, #12]	; (8001794 <HAL_IncTick+0x20>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	2000000c 	.word	0x2000000c
 8001794:	20000164 	.word	0x20000164

08001798 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return uwTick;
 800179c:	4b02      	ldr	r3, [pc, #8]	; (80017a8 <HAL_GetTick+0x10>)
 800179e:	681b      	ldr	r3, [r3, #0]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	20000164 	.word	0x20000164

080017ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b4:	f7ff fff0 	bl	8001798 <HAL_GetTick>
 80017b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d005      	beq.n	80017d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_Delay+0x44>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017d2:	bf00      	nop
 80017d4:	f7ff ffe0 	bl	8001798 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d8f7      	bhi.n	80017d4 <HAL_Delay+0x28>
  {
  }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000000c 	.word	0x2000000c

080017f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800181c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <__NVIC_GetPriorityGrouping+0x18>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	f003 0307 	and.w	r3, r3, #7
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr

08001910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	210f      	movs	r1, #15
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f7ff ff90 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff49 	bl	80017f4 <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800197c:	f7ff ff5e 	bl	800183c <__NVIC_GetPriorityGrouping>
 8001980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	6978      	ldr	r0, [r7, #20]
 8001988:	f7ff ff90 	bl	80018ac <NVIC_EncodePriority>
 800198c:	4602      	mov	r2, r0
 800198e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001992:	4611      	mov	r1, r2
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff5f 	bl	8001858 <__NVIC_SetPriority>
}
 800199a:	bf00      	nop
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffb0 	bl	8001910 <SysTick_Config>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b08b      	sub	sp, #44	; 0x2c
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ce:	e161      	b.n	8001c94 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d0:	2201      	movs	r2, #1
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69fa      	ldr	r2, [r7, #28]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	f040 8150 	bne.w	8001c8e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a97      	ldr	r2, [pc, #604]	; (8001c50 <HAL_GPIO_Init+0x294>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d05e      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 80019f8:	4a95      	ldr	r2, [pc, #596]	; (8001c50 <HAL_GPIO_Init+0x294>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d875      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 80019fe:	4a95      	ldr	r2, [pc, #596]	; (8001c54 <HAL_GPIO_Init+0x298>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d058      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a04:	4a93      	ldr	r2, [pc, #588]	; (8001c54 <HAL_GPIO_Init+0x298>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d86f      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a0a:	4a93      	ldr	r2, [pc, #588]	; (8001c58 <HAL_GPIO_Init+0x29c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d052      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a10:	4a91      	ldr	r2, [pc, #580]	; (8001c58 <HAL_GPIO_Init+0x29c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d869      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a16:	4a91      	ldr	r2, [pc, #580]	; (8001c5c <HAL_GPIO_Init+0x2a0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d04c      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a1c:	4a8f      	ldr	r2, [pc, #572]	; (8001c5c <HAL_GPIO_Init+0x2a0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d863      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a22:	4a8f      	ldr	r2, [pc, #572]	; (8001c60 <HAL_GPIO_Init+0x2a4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d046      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
 8001a28:	4a8d      	ldr	r2, [pc, #564]	; (8001c60 <HAL_GPIO_Init+0x2a4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d85d      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a2e:	2b12      	cmp	r3, #18
 8001a30:	d82a      	bhi.n	8001a88 <HAL_GPIO_Init+0xcc>
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d859      	bhi.n	8001aea <HAL_GPIO_Init+0x12e>
 8001a36:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <HAL_GPIO_Init+0x80>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001ab7 	.word	0x08001ab7
 8001a40:	08001a91 	.word	0x08001a91
 8001a44:	08001aa3 	.word	0x08001aa3
 8001a48:	08001ae5 	.word	0x08001ae5
 8001a4c:	08001aeb 	.word	0x08001aeb
 8001a50:	08001aeb 	.word	0x08001aeb
 8001a54:	08001aeb 	.word	0x08001aeb
 8001a58:	08001aeb 	.word	0x08001aeb
 8001a5c:	08001aeb 	.word	0x08001aeb
 8001a60:	08001aeb 	.word	0x08001aeb
 8001a64:	08001aeb 	.word	0x08001aeb
 8001a68:	08001aeb 	.word	0x08001aeb
 8001a6c:	08001aeb 	.word	0x08001aeb
 8001a70:	08001aeb 	.word	0x08001aeb
 8001a74:	08001aeb 	.word	0x08001aeb
 8001a78:	08001aeb 	.word	0x08001aeb
 8001a7c:	08001aeb 	.word	0x08001aeb
 8001a80:	08001a99 	.word	0x08001a99
 8001a84:	08001aad 	.word	0x08001aad
 8001a88:	4a76      	ldr	r2, [pc, #472]	; (8001c64 <HAL_GPIO_Init+0x2a8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d013      	beq.n	8001ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a8e:	e02c      	b.n	8001aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	623b      	str	r3, [r7, #32]
          break;
 8001a96:	e029      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e024      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	3308      	adds	r3, #8
 8001aa8:	623b      	str	r3, [r7, #32]
          break;
 8001aaa:	e01f      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	330c      	adds	r3, #12
 8001ab2:	623b      	str	r3, [r7, #32]
          break;
 8001ab4:	e01a      	b.n	8001aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	623b      	str	r3, [r7, #32]
          break;
 8001ac2:	e013      	b.n	8001aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d105      	bne.n	8001ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001acc:	2308      	movs	r3, #8
 8001ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	611a      	str	r2, [r3, #16]
          break;
 8001ad6:	e009      	b.n	8001aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad8:	2308      	movs	r3, #8
 8001ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69fa      	ldr	r2, [r7, #28]
 8001ae0:	615a      	str	r2, [r3, #20]
          break;
 8001ae2:	e003      	b.n	8001aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
          break;
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x130>
          break;
 8001aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2bff      	cmp	r3, #255	; 0xff
 8001af0:	d801      	bhi.n	8001af6 <HAL_GPIO_Init+0x13a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	e001      	b.n	8001afa <HAL_GPIO_Init+0x13e>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3304      	adds	r3, #4
 8001afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2bff      	cmp	r3, #255	; 0xff
 8001b00:	d802      	bhi.n	8001b08 <HAL_GPIO_Init+0x14c>
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	e002      	b.n	8001b0e <HAL_GPIO_Init+0x152>
 8001b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0a:	3b08      	subs	r3, #8
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	210f      	movs	r1, #15
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	6a39      	ldr	r1, [r7, #32]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80a9 	beq.w	8001c8e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b3c:	4b4a      	ldr	r3, [pc, #296]	; (8001c68 <HAL_GPIO_Init+0x2ac>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a49      	ldr	r2, [pc, #292]	; (8001c68 <HAL_GPIO_Init+0x2ac>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_GPIO_Init+0x2ac>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b54:	4a45      	ldr	r2, [pc, #276]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	220f      	movs	r2, #15
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a3d      	ldr	r2, [pc, #244]	; (8001c70 <HAL_GPIO_Init+0x2b4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d00d      	beq.n	8001b9c <HAL_GPIO_Init+0x1e0>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a3c      	ldr	r2, [pc, #240]	; (8001c74 <HAL_GPIO_Init+0x2b8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d007      	beq.n	8001b98 <HAL_GPIO_Init+0x1dc>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a3b      	ldr	r2, [pc, #236]	; (8001c78 <HAL_GPIO_Init+0x2bc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_GPIO_Init+0x1d8>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e004      	b.n	8001b9e <HAL_GPIO_Init+0x1e2>
 8001b94:	2303      	movs	r3, #3
 8001b96:	e002      	b.n	8001b9e <HAL_GPIO_Init+0x1e2>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_GPIO_Init+0x1e2>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba0:	f002 0203 	and.w	r2, r2, #3
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	4093      	lsls	r3, r2
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bae:	492f      	ldr	r1, [pc, #188]	; (8001c6c <HAL_GPIO_Init+0x2b0>)
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	492b      	ldr	r1, [pc, #172]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4927      	ldr	r1, [pc, #156]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bf0:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	4921      	ldr	r1, [pc, #132]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60cb      	str	r3, [r1, #12]
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	491d      	ldr	r1, [pc, #116]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4917      	ldr	r1, [pc, #92]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	604b      	str	r3, [r1, #4]
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4913      	ldr	r1, [pc, #76]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d01f      	beq.n	8001c80 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c40:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	490d      	ldr	r1, [pc, #52]	; (8001c7c <HAL_GPIO_Init+0x2c0>)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
 8001c4c:	e01f      	b.n	8001c8e <HAL_GPIO_Init+0x2d2>
 8001c4e:	bf00      	nop
 8001c50:	10320000 	.word	0x10320000
 8001c54:	10310000 	.word	0x10310000
 8001c58:	10220000 	.word	0x10220000
 8001c5c:	10210000 	.word	0x10210000
 8001c60:	10120000 	.word	0x10120000
 8001c64:	10110000 	.word	0x10110000
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	40010800 	.word	0x40010800
 8001c74:	40010c00 	.word	0x40010c00
 8001c78:	40011000 	.word	0x40011000
 8001c7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_GPIO_Init+0x2f4>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	4909      	ldr	r1, [pc, #36]	; (8001cb0 <HAL_GPIO_Init+0x2f4>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	3301      	adds	r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f47f ae96 	bne.w	80019d0 <HAL_GPIO_Init+0x14>
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	372c      	adds	r7, #44	; 0x2c
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	40010400 	.word	0x40010400

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cd0:	e003      	b.n	8001cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	041a      	lsls	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	611a      	str	r2, [r3, #16]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e12b      	b.n	8001f4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fc58 	bl	80015c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2224      	movs	r2, #36	; 0x24
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0201 	bic.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d48:	f001 fe88 	bl	8003a5c <HAL_RCC_GetPCLK1Freq>
 8001d4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	4a81      	ldr	r2, [pc, #516]	; (8001f58 <HAL_I2C_Init+0x274>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d807      	bhi.n	8001d68 <HAL_I2C_Init+0x84>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4a80      	ldr	r2, [pc, #512]	; (8001f5c <HAL_I2C_Init+0x278>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	bf94      	ite	ls
 8001d60:	2301      	movls	r3, #1
 8001d62:	2300      	movhi	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	e006      	b.n	8001d76 <HAL_I2C_Init+0x92>
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4a7d      	ldr	r2, [pc, #500]	; (8001f60 <HAL_I2C_Init+0x27c>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	bf94      	ite	ls
 8001d70:	2301      	movls	r3, #1
 8001d72:	2300      	movhi	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0e7      	b.n	8001f4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4a78      	ldr	r2, [pc, #480]	; (8001f64 <HAL_I2C_Init+0x280>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	0c9b      	lsrs	r3, r3, #18
 8001d88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68ba      	ldr	r2, [r7, #8]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	4a6a      	ldr	r2, [pc, #424]	; (8001f58 <HAL_I2C_Init+0x274>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d802      	bhi.n	8001db8 <HAL_I2C_Init+0xd4>
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	3301      	adds	r3, #1
 8001db6:	e009      	b.n	8001dcc <HAL_I2C_Init+0xe8>
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	4a69      	ldr	r2, [pc, #420]	; (8001f68 <HAL_I2C_Init+0x284>)
 8001dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc8:	099b      	lsrs	r3, r3, #6
 8001dca:	3301      	adds	r3, #1
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	430b      	orrs	r3, r1
 8001dd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	495c      	ldr	r1, [pc, #368]	; (8001f58 <HAL_I2C_Init+0x274>)
 8001de8:	428b      	cmp	r3, r1
 8001dea:	d819      	bhi.n	8001e20 <HAL_I2C_Init+0x13c>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	1e59      	subs	r1, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dfa:	1c59      	adds	r1, r3, #1
 8001dfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e00:	400b      	ands	r3, r1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00a      	beq.n	8001e1c <HAL_I2C_Init+0x138>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1e59      	subs	r1, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e14:	3301      	adds	r3, #1
 8001e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1a:	e051      	b.n	8001ec0 <HAL_I2C_Init+0x1dc>
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	e04f      	b.n	8001ec0 <HAL_I2C_Init+0x1dc>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d111      	bne.n	8001e4c <HAL_I2C_Init+0x168>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1e58      	subs	r0, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	440b      	add	r3, r1
 8001e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf0c      	ite	eq
 8001e44:	2301      	moveq	r3, #1
 8001e46:	2300      	movne	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	e012      	b.n	8001e72 <HAL_I2C_Init+0x18e>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1e58      	subs	r0, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	0099      	lsls	r1, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e62:	3301      	adds	r3, #1
 8001e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_I2C_Init+0x196>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e022      	b.n	8001ec0 <HAL_I2C_Init+0x1dc>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10e      	bne.n	8001ea0 <HAL_I2C_Init+0x1bc>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1e58      	subs	r0, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6859      	ldr	r1, [r3, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	440b      	add	r3, r1
 8001e90:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e94:	3301      	adds	r3, #1
 8001e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e9e:	e00f      	b.n	8001ec0 <HAL_I2C_Init+0x1dc>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1e58      	subs	r0, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	0099      	lsls	r1, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	6809      	ldr	r1, [r1, #0]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69da      	ldr	r2, [r3, #28]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6911      	ldr	r1, [r2, #16]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68d2      	ldr	r2, [r2, #12]
 8001efa:	4311      	orrs	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	000186a0 	.word	0x000186a0
 8001f5c:	001e847f 	.word	0x001e847f
 8001f60:	003d08ff 	.word	0x003d08ff
 8001f64:	431bde83 	.word	0x431bde83
 8001f68:	10624dd3 	.word	0x10624dd3

08001f6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	607a      	str	r2, [r7, #4]
 8001f76:	461a      	mov	r2, r3
 8001f78:	460b      	mov	r3, r1
 8001f7a:	817b      	strh	r3, [r7, #10]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff fc0a 	bl	8001798 <HAL_GetTick>
 8001f84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	f040 80e0 	bne.w	8002154 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2319      	movs	r3, #25
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4970      	ldr	r1, [pc, #448]	; (8002160 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 ff5c 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
 8001fac:	e0d3      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_I2C_Master_Transmit+0x50>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e0cc      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1ea>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d007      	beq.n	8001fe2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ff0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2221      	movs	r2, #33	; 0x21
 8001ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	893a      	ldrh	r2, [r7, #8]
 8002012:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4a50      	ldr	r2, [pc, #320]	; (8002164 <HAL_I2C_Master_Transmit+0x1f8>)
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002024:	8979      	ldrh	r1, [r7, #10]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	6a3a      	ldr	r2, [r7, #32]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 fd30 	bl	8002a90 <I2C_MasterRequestWrite>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e08d      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002050:	e066      	b.n	8002120 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	6a39      	ldr	r1, [r7, #32]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f001 f81a 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00d      	beq.n	800207e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b04      	cmp	r3, #4
 8002068:	d107      	bne.n	800207a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002078:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e06b      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d11b      	bne.n	80020f4 <HAL_I2C_Master_Transmit+0x188>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d017      	beq.n	80020f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	781a      	ldrb	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	1c5a      	adds	r2, r3, #1
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ec:	3b01      	subs	r3, #1
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	6a39      	ldr	r1, [r7, #32]
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f001 f811 	bl	8003120 <I2C_WaitOnBTFFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00d      	beq.n	8002120 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	2b04      	cmp	r3, #4
 800210a:	d107      	bne.n	800211c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e01a      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002124:	2b00      	cmp	r3, #0
 8002126:	d194      	bne.n	8002052 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e000      	b.n	8002156 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002154:	2302      	movs	r3, #2
  }
}
 8002156:	4618      	mov	r0, r3
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	00100002 	.word	0x00100002
 8002164:	ffff0000 	.word	0xffff0000

08002168 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08c      	sub	sp, #48	; 0x30
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	461a      	mov	r2, r3
 8002174:	460b      	mov	r3, r1
 8002176:	817b      	strh	r3, [r7, #10]
 8002178:	4613      	mov	r3, r2
 800217a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002180:	f7ff fb0a 	bl	8001798 <HAL_GetTick>
 8002184:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b20      	cmp	r3, #32
 8002190:	f040 824b 	bne.w	800262a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2319      	movs	r3, #25
 800219a:	2201      	movs	r2, #1
 800219c:	497f      	ldr	r1, [pc, #508]	; (800239c <HAL_I2C_Master_Receive+0x234>)
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fe5c 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80021aa:	2302      	movs	r3, #2
 80021ac:	e23e      	b.n	800262c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_I2C_Master_Receive+0x54>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e237      	b.n	800262c <HAL_I2C_Master_Receive+0x4c4>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d007      	beq.n	80021e2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0201 	orr.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2222      	movs	r2, #34	; 0x22
 80021f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2210      	movs	r2, #16
 80021fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	893a      	ldrh	r2, [r7, #8]
 8002212:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4a5f      	ldr	r2, [pc, #380]	; (80023a0 <HAL_I2C_Master_Receive+0x238>)
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002224:	8979      	ldrh	r1, [r7, #10]
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fcb2 	bl	8002b94 <I2C_MasterRequestRead>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e1f8      	b.n	800262c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	2b00      	cmp	r3, #0
 8002240:	d113      	bne.n	800226a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	61fb      	str	r3, [r7, #28]
 8002256:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e1cc      	b.n	8002604 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	2b01      	cmp	r3, #1
 8002270:	d11e      	bne.n	80022b0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002280:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002282:	b672      	cpsid	i
}
 8002284:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022ac:	b662      	cpsie	i
}
 80022ae:	e035      	b.n	800231c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d11e      	bne.n	80022f6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022c8:	b672      	cpsid	i
}
 80022ca:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022f2:	b662      	cpsie	i
}
 80022f4:	e012      	b.n	800231c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002304:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800231c:	e172      	b.n	8002604 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002322:	2b03      	cmp	r3, #3
 8002324:	f200 811f 	bhi.w	8002566 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	2b01      	cmp	r3, #1
 800232e:	d123      	bne.n	8002378 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002332:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 ff3b 	bl	80031b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e173      	b.n	800262c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002376:	e145      	b.n	8002604 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	2b02      	cmp	r3, #2
 800237e:	d152      	bne.n	8002426 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	2200      	movs	r2, #0
 8002388:	4906      	ldr	r1, [pc, #24]	; (80023a4 <HAL_I2C_Master_Receive+0x23c>)
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fd66 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e148      	b.n	800262c <HAL_I2C_Master_Receive+0x4c4>
 800239a:	bf00      	nop
 800239c:	00100002 	.word	0x00100002
 80023a0:	ffff0000 	.word	0xffff0000
 80023a4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80023a8:	b672      	cpsid	i
}
 80023aa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023ee:	b662      	cpsie	i
}
 80023f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241a:	b29b      	uxth	r3, r3
 800241c:	3b01      	subs	r3, #1
 800241e:	b29a      	uxth	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002424:	e0ee      	b.n	8002604 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	2200      	movs	r2, #0
 800242e:	4981      	ldr	r1, [pc, #516]	; (8002634 <HAL_I2C_Master_Receive+0x4cc>)
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fd13 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0f5      	b.n	800262c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800244e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002450:	b672      	cpsid	i
}
 8002452:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002470:	3b01      	subs	r3, #1
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29a      	uxth	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002486:	4b6c      	ldr	r3, [pc, #432]	; (8002638 <HAL_I2C_Master_Receive+0x4d0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	08db      	lsrs	r3, r3, #3
 800248c:	4a6b      	ldr	r2, [pc, #428]	; (800263c <HAL_I2C_Master_Receive+0x4d4>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	0a1a      	lsrs	r2, r3, #8
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	00da      	lsls	r2, r3, #3
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d118      	bne.n	80024de <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80024ce:	b662      	cpsie	i
}
 80024d0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0a6      	b.n	800262c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d1d9      	bne.n	80024a0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800252e:	b662      	cpsie	i
}
 8002530:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002564:	e04e      	b.n	8002604 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002568:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fe20 	bl	80031b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e058      	b.n	800262c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d124      	bne.n	8002604 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d107      	bne.n	80025d2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	f47f ae88 	bne.w	800231e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	e000      	b.n	800262c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800262a:	2302      	movs	r3, #2
  }
}
 800262c:	4618      	mov	r0, r3
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	00010004 	.word	0x00010004
 8002638:	20000004 	.word	0x20000004
 800263c:	14f8b589 	.word	0x14f8b589

08002640 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af02      	add	r7, sp, #8
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	4608      	mov	r0, r1
 800264a:	4611      	mov	r1, r2
 800264c:	461a      	mov	r2, r3
 800264e:	4603      	mov	r3, r0
 8002650:	817b      	strh	r3, [r7, #10]
 8002652:	460b      	mov	r3, r1
 8002654:	813b      	strh	r3, [r7, #8]
 8002656:	4613      	mov	r3, r2
 8002658:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800265a:	f7ff f89d 	bl	8001798 <HAL_GetTick>
 800265e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b20      	cmp	r3, #32
 800266a:	f040 80d9 	bne.w	8002820 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2319      	movs	r3, #25
 8002674:	2201      	movs	r2, #1
 8002676:	496d      	ldr	r1, [pc, #436]	; (800282c <HAL_I2C_Mem_Write+0x1ec>)
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 fbef 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002684:	2302      	movs	r3, #2
 8002686:	e0cc      	b.n	8002822 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_I2C_Mem_Write+0x56>
 8002692:	2302      	movs	r3, #2
 8002694:	e0c5      	b.n	8002822 <HAL_I2C_Mem_Write+0x1e2>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d007      	beq.n	80026bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2221      	movs	r2, #33	; 0x21
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2240      	movs	r2, #64	; 0x40
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a3a      	ldr	r2, [r7, #32]
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4a4d      	ldr	r2, [pc, #308]	; (8002830 <HAL_I2C_Mem_Write+0x1f0>)
 80026fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026fe:	88f8      	ldrh	r0, [r7, #6]
 8002700:	893a      	ldrh	r2, [r7, #8]
 8002702:	8979      	ldrh	r1, [r7, #10]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	9301      	str	r3, [sp, #4]
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	4603      	mov	r3, r0
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fb0e 	bl	8002d30 <I2C_RequestMemoryWrite>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d052      	beq.n	80027c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e081      	b.n	8002822 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fcb4 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00d      	beq.n	800274a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	2b04      	cmp	r3, #4
 8002734:	d107      	bne.n	8002746 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002744:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e06b      	b.n	8002822 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b04      	cmp	r3, #4
 8002786:	d11b      	bne.n	80027c0 <HAL_I2C_Mem_Write+0x180>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	2b00      	cmp	r3, #0
 800278e:	d017      	beq.n	80027c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	781a      	ldrb	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1aa      	bne.n	800271e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 fca7 	bl	8003120 <I2C_WaitOnBTFFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00d      	beq.n	80027f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d107      	bne.n	80027f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e016      	b.n	8002822 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002802:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2220      	movs	r2, #32
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	e000      	b.n	8002822 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002820:	2302      	movs	r3, #2
  }
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	00100002 	.word	0x00100002
 8002830:	ffff0000 	.word	0xffff0000

08002834 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	460b      	mov	r3, r1
 8002842:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002844:	f7fe ffa8 	bl	8001798 <HAL_GetTick>
 8002848:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b20      	cmp	r3, #32
 8002858:	f040 8111 	bne.w	8002a7e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	2319      	movs	r3, #25
 8002862:	2201      	movs	r2, #1
 8002864:	4988      	ldr	r1, [pc, #544]	; (8002a88 <HAL_I2C_IsDeviceReady+0x254>)
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 faf8 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002872:	2302      	movs	r3, #2
 8002874:	e104      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_I2C_IsDeviceReady+0x50>
 8002880:	2302      	movs	r3, #2
 8002882:	e0fd      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x24c>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d007      	beq.n	80028aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0201 	orr.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2224      	movs	r2, #36	; 0x24
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a70      	ldr	r2, [pc, #448]	; (8002a8c <HAL_I2C_IsDeviceReady+0x258>)
 80028cc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fab6 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00d      	beq.n	8002912 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002904:	d103      	bne.n	800290e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e0b6      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002920:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002922:	f7fe ff39 	bl	8001798 <HAL_GetTick>
 8002926:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	bf0c      	ite	eq
 8002936:	2301      	moveq	r3, #1
 8002938:	2300      	movne	r3, #0
 800293a:	b2db      	uxtb	r3, r3
 800293c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294c:	bf0c      	ite	eq
 800294e:	2301      	moveq	r3, #1
 8002950:	2300      	movne	r3, #0
 8002952:	b2db      	uxtb	r3, r3
 8002954:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002956:	e025      	b.n	80029a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002958:	f7fe ff1e 	bl	8001798 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d302      	bcc.n	800296e <HAL_I2C_IsDeviceReady+0x13a>
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d103      	bne.n	8002976 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	22a0      	movs	r2, #160	; 0xa0
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b02      	cmp	r3, #2
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2ba0      	cmp	r3, #160	; 0xa0
 80029ae:	d005      	beq.n	80029bc <HAL_I2C_IsDeviceReady+0x188>
 80029b0:	7dfb      	ldrb	r3, [r7, #23]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_I2C_IsDeviceReady+0x188>
 80029b6:	7dbb      	ldrb	r3, [r7, #22]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0cd      	beq.n	8002958 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d129      	bne.n	8002a26 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	695b      	ldr	r3, [r3, #20]
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2319      	movs	r3, #25
 80029fe:	2201      	movs	r2, #1
 8002a00:	4921      	ldr	r1, [pc, #132]	; (8002a88 <HAL_I2C_IsDeviceReady+0x254>)
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fa2a 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e036      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e02c      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a34:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a3e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2319      	movs	r3, #25
 8002a46:	2201      	movs	r2, #1
 8002a48:	490f      	ldr	r1, [pc, #60]	; (8002a88 <HAL_I2C_IsDeviceReady+0x254>)
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fa06 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e012      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	f4ff af32 	bcc.w	80028ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
  }
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3720      	adds	r7, #32
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	00100002 	.word	0x00100002
 8002a8c:	ffff0000 	.word	0xffff0000

08002a90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d006      	beq.n	8002aba <I2C_MasterRequestWrite+0x2a>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d003      	beq.n	8002aba <I2C_MasterRequestWrite+0x2a>
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ab8:	d108      	bne.n	8002acc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	e00b      	b.n	8002ae4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	2b12      	cmp	r3, #18
 8002ad2:	d107      	bne.n	8002ae4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ae2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f9b3 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00d      	beq.n	8002b18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0a:	d103      	bne.n	8002b14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e035      	b.n	8002b84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b20:	d108      	bne.n	8002b34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b22:	897b      	ldrh	r3, [r7, #10]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b30:	611a      	str	r2, [r3, #16]
 8002b32:	e01b      	b.n	8002b6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b34:	897b      	ldrh	r3, [r7, #10]
 8002b36:	11db      	asrs	r3, r3, #7
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f003 0306 	and.w	r3, r3, #6
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	f063 030f 	orn	r3, r3, #15
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	490e      	ldr	r1, [pc, #56]	; (8002b8c <I2C_MasterRequestWrite+0xfc>)
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f9fc 	bl	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e010      	b.n	8002b84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b62:	897b      	ldrh	r3, [r7, #10]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4907      	ldr	r1, [pc, #28]	; (8002b90 <I2C_MasterRequestWrite+0x100>)
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f9ec 	bl	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e000      	b.n	8002b84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	00010008 	.word	0x00010008
 8002b90:	00010002 	.word	0x00010002

08002b94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d006      	beq.n	8002bce <I2C_MasterRequestRead+0x3a>
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d003      	beq.n	8002bce <I2C_MasterRequestRead+0x3a>
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bcc:	d108      	bne.n	8002be0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	e00b      	b.n	8002bf8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	2b11      	cmp	r3, #17
 8002be6:	d107      	bne.n	8002bf8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f929 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1e:	d103      	bne.n	8002c28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e079      	b.n	8002d20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c34:	d108      	bne.n	8002c48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c36:	897b      	ldrh	r3, [r7, #10]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	611a      	str	r2, [r3, #16]
 8002c46:	e05f      	b.n	8002d08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c48:	897b      	ldrh	r3, [r7, #10]
 8002c4a:	11db      	asrs	r3, r3, #7
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f003 0306 	and.w	r3, r3, #6
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f063 030f 	orn	r3, r3, #15
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4930      	ldr	r1, [pc, #192]	; (8002d28 <I2C_MasterRequestRead+0x194>)
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f972 	bl	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e054      	b.n	8002d20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c76:	897b      	ldrh	r3, [r7, #10]
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4929      	ldr	r1, [pc, #164]	; (8002d2c <I2C_MasterRequestRead+0x198>)
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f962 	bl	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e044      	b.n	8002d20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f8c7 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00d      	beq.n	8002cf0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce2:	d103      	bne.n	8002cec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e017      	b.n	8002d20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002cf0:	897b      	ldrh	r3, [r7, #10]
 8002cf2:	11db      	asrs	r3, r3, #7
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f003 0306 	and.w	r3, r3, #6
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	f063 030e 	orn	r3, r3, #14
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4907      	ldr	r1, [pc, #28]	; (8002d2c <I2C_MasterRequestRead+0x198>)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f91e 	bl	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	00010008 	.word	0x00010008
 8002d2c:	00010002 	.word	0x00010002

08002d30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4603      	mov	r3, r0
 8002d40:	817b      	strh	r3, [r7, #10]
 8002d42:	460b      	mov	r3, r1
 8002d44:	813b      	strh	r3, [r7, #8]
 8002d46:	4613      	mov	r3, r2
 8002d48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f878 	bl	8002e5c <I2C_WaitOnFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d80:	d103      	bne.n	8002d8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e05f      	b.n	8002e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d8e:	897b      	ldrh	r3, [r7, #10]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	6a3a      	ldr	r2, [r7, #32]
 8002da2:	492d      	ldr	r1, [pc, #180]	; (8002e58 <I2C_RequestMemoryWrite+0x128>)
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f8d3 	bl	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e04c      	b.n	8002e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dcc:	6a39      	ldr	r1, [r7, #32]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f95e 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00d      	beq.n	8002df6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d107      	bne.n	8002df2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e02b      	b.n	8002e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dfc:	893b      	ldrh	r3, [r7, #8]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	611a      	str	r2, [r3, #16]
 8002e06:	e021      	b.n	8002e4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e08:	893b      	ldrh	r3, [r7, #8]
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e18:	6a39      	ldr	r1, [r7, #32]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f938 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00d      	beq.n	8002e42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d107      	bne.n	8002e3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e005      	b.n	8002e4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e42:	893b      	ldrh	r3, [r7, #8]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	00010002 	.word	0x00010002

08002e5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e6c:	e048      	b.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d044      	beq.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e76:	f7fe fc8f 	bl	8001798 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d302      	bcc.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d139      	bne.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	0c1b      	lsrs	r3, r3, #16
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d10d      	bne.n	8002eb2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	e00c      	b.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	43da      	mvns	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d116      	bne.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eec:	f043 0220 	orr.w	r2, r3, #32
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e023      	b.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	0c1b      	lsrs	r3, r3, #16
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d10d      	bne.n	8002f26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	43da      	mvns	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	4013      	ands	r3, r2
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	461a      	mov	r2, r3
 8002f24:	e00c      	b.n	8002f40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	43da      	mvns	r2, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	4013      	ands	r3, r2
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	bf0c      	ite	eq
 8002f38:	2301      	moveq	r3, #1
 8002f3a:	2300      	movne	r3, #0
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d093      	beq.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f5e:	e071      	b.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6e:	d123      	bne.n	8002fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	f043 0204 	orr.w	r2, r3, #4
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e067      	b.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbe:	d041      	beq.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc0:	f7fe fbea 	bl	8001798 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d302      	bcc.n	8002fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d136      	bne.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	0c1b      	lsrs	r3, r3, #16
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d10c      	bne.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	4013      	ands	r3, r2
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	bf14      	ite	ne
 8002ff2:	2301      	movne	r3, #1
 8002ff4:	2300      	moveq	r3, #0
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	e00b      	b.n	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	43da      	mvns	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	4013      	ands	r3, r2
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf14      	ite	ne
 800300c:	2301      	movne	r3, #1
 800300e:	2300      	moveq	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d016      	beq.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f043 0220 	orr.w	r2, r3, #32
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e021      	b.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	0c1b      	lsrs	r3, r3, #16
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d10c      	bne.n	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	43da      	mvns	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4013      	ands	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e00b      	b.n	8003080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	43da      	mvns	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4013      	ands	r3, r2
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	bf14      	ite	ne
 800307a:	2301      	movne	r3, #1
 800307c:	2300      	moveq	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	f47f af6d 	bne.w	8002f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800309c:	e034      	b.n	8003108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f8e3 	bl	800326a <I2C_IsAcknowledgeFailed>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e034      	b.n	8003118 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d028      	beq.n	8003108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7fe fb6f 	bl	8001798 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d11d      	bne.n	8003108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d6:	2b80      	cmp	r3, #128	; 0x80
 80030d8:	d016      	beq.n	8003108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e007      	b.n	8003118 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003112:	2b80      	cmp	r3, #128	; 0x80
 8003114:	d1c3      	bne.n	800309e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800312c:	e034      	b.n	8003198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 f89b 	bl	800326a <I2C_IsAcknowledgeFailed>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e034      	b.n	80031a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d028      	beq.n	8003198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003146:	f7fe fb27 	bl	8001798 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d11d      	bne.n	8003198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b04      	cmp	r3, #4
 8003168:	d016      	beq.n	8003198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e007      	b.n	80031a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d1c3      	bne.n	800312e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031bc:	e049      	b.n	8003252 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d119      	bne.n	8003200 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0210 	mvn.w	r2, #16
 80031d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e030      	b.n	8003262 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003200:	f7fe faca 	bl	8001798 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	429a      	cmp	r2, r3
 800320e:	d302      	bcc.n	8003216 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11d      	bne.n	8003252 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b40      	cmp	r3, #64	; 0x40
 8003222:	d016      	beq.n	8003252 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f043 0220 	orr.w	r2, r3, #32
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e007      	b.n	8003262 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325c:	2b40      	cmp	r3, #64	; 0x40
 800325e:	d1ae      	bne.n	80031be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003280:	d11b      	bne.n	80032ba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800328a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2220      	movs	r2, #32
 8003296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f043 0204 	orr.w	r2, r3, #4
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr
	...

080032c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e272      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8087 	beq.w	80033f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e8:	4b92      	ldr	r3, [pc, #584]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d00c      	beq.n	800330e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032f4:	4b8f      	ldr	r3, [pc, #572]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d112      	bne.n	8003326 <HAL_RCC_OscConfig+0x5e>
 8003300:	4b8c      	ldr	r3, [pc, #560]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330c:	d10b      	bne.n	8003326 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330e:	4b89      	ldr	r3, [pc, #548]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d06c      	beq.n	80033f4 <HAL_RCC_OscConfig+0x12c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d168      	bne.n	80033f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e24c      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x76>
 8003330:	4b80      	ldr	r3, [pc, #512]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a7f      	ldr	r2, [pc, #508]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	e02e      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x98>
 8003346:	4b7b      	ldr	r3, [pc, #492]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a7a      	ldr	r2, [pc, #488]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800334c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	4b78      	ldr	r3, [pc, #480]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a77      	ldr	r2, [pc, #476]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003358:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e01d      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003368:	d10c      	bne.n	8003384 <HAL_RCC_OscConfig+0xbc>
 800336a:	4b72      	ldr	r3, [pc, #456]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a71      	ldr	r2, [pc, #452]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b6f      	ldr	r3, [pc, #444]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a6e      	ldr	r2, [pc, #440]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e00b      	b.n	800339c <HAL_RCC_OscConfig+0xd4>
 8003384:	4b6b      	ldr	r3, [pc, #428]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a6a      	ldr	r2, [pc, #424]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800338a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b68      	ldr	r3, [pc, #416]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a67      	ldr	r2, [pc, #412]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800339a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe f9f8 	bl	8001798 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ac:	f7fe f9f4 	bl	8001798 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b64      	cmp	r3, #100	; 0x64
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e200      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	4b5d      	ldr	r3, [pc, #372]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0f0      	beq.n	80033ac <HAL_RCC_OscConfig+0xe4>
 80033ca:	e014      	b.n	80033f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fe f9e4 	bl	8001798 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fe f9e0 	bl	8001798 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e1ec      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e6:	4b53      	ldr	r3, [pc, #332]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f0      	bne.n	80033d4 <HAL_RCC_OscConfig+0x10c>
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d063      	beq.n	80034ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003402:	4b4c      	ldr	r3, [pc, #304]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800340e:	4b49      	ldr	r3, [pc, #292]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f003 030c 	and.w	r3, r3, #12
 8003416:	2b08      	cmp	r3, #8
 8003418:	d11c      	bne.n	8003454 <HAL_RCC_OscConfig+0x18c>
 800341a:	4b46      	ldr	r3, [pc, #280]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d116      	bne.n	8003454 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003426:	4b43      	ldr	r3, [pc, #268]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_RCC_OscConfig+0x176>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d001      	beq.n	800343e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e1c0      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343e:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4939      	ldr	r1, [pc, #228]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	e03a      	b.n	80034ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d020      	beq.n	800349e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800345c:	4b36      	ldr	r3, [pc, #216]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fe f999 	bl	8001798 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346a:	f7fe f995 	bl	8001798 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e1a1      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347c:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003488:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4927      	ldr	r1, [pc, #156]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003498:	4313      	orrs	r3, r2
 800349a:	600b      	str	r3, [r1, #0]
 800349c:	e015      	b.n	80034ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800349e:	4b26      	ldr	r3, [pc, #152]	; (8003538 <HAL_RCC_OscConfig+0x270>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe f978 	bl	8001798 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ac:	f7fe f974 	bl	8001798 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e180      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034be:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d03a      	beq.n	800354c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d019      	beq.n	8003512 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034de:	4b17      	ldr	r3, [pc, #92]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e4:	f7fe f958 	bl	8001798 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ec:	f7fe f954 	bl	8001798 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e160      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_RCC_OscConfig+0x26c>)
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800350a:	2001      	movs	r0, #1
 800350c:	f000 faba 	bl	8003a84 <RCC_Delay>
 8003510:	e01c      	b.n	800354c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003518:	f7fe f93e 	bl	8001798 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800351e:	e00f      	b.n	8003540 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003520:	f7fe f93a 	bl	8001798 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d908      	bls.n	8003540 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e146      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
 8003532:	bf00      	nop
 8003534:	40021000 	.word	0x40021000
 8003538:	42420000 	.word	0x42420000
 800353c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	4b92      	ldr	r3, [pc, #584]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e9      	bne.n	8003520 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80a6 	beq.w	80036a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800355a:	2300      	movs	r3, #0
 800355c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800355e:	4b8b      	ldr	r3, [pc, #556]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10d      	bne.n	8003586 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356a:	4b88      	ldr	r3, [pc, #544]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	4a87      	ldr	r2, [pc, #540]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003574:	61d3      	str	r3, [r2, #28]
 8003576:	4b85      	ldr	r3, [pc, #532]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003586:	4b82      	ldr	r3, [pc, #520]	; (8003790 <HAL_RCC_OscConfig+0x4c8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d118      	bne.n	80035c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003592:	4b7f      	ldr	r3, [pc, #508]	; (8003790 <HAL_RCC_OscConfig+0x4c8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7e      	ldr	r2, [pc, #504]	; (8003790 <HAL_RCC_OscConfig+0x4c8>)
 8003598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359e:	f7fe f8fb 	bl	8001798 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a6:	f7fe f8f7 	bl	8001798 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b64      	cmp	r3, #100	; 0x64
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e103      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b8:	4b75      	ldr	r3, [pc, #468]	; (8003790 <HAL_RCC_OscConfig+0x4c8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d106      	bne.n	80035da <HAL_RCC_OscConfig+0x312>
 80035cc:	4b6f      	ldr	r3, [pc, #444]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4a6e      	ldr	r2, [pc, #440]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6213      	str	r3, [r2, #32]
 80035d8:	e02d      	b.n	8003636 <HAL_RCC_OscConfig+0x36e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10c      	bne.n	80035fc <HAL_RCC_OscConfig+0x334>
 80035e2:	4b6a      	ldr	r3, [pc, #424]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	4a69      	ldr	r2, [pc, #420]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6213      	str	r3, [r2, #32]
 80035ee:	4b67      	ldr	r3, [pc, #412]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	4a66      	ldr	r2, [pc, #408]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	f023 0304 	bic.w	r3, r3, #4
 80035f8:	6213      	str	r3, [r2, #32]
 80035fa:	e01c      	b.n	8003636 <HAL_RCC_OscConfig+0x36e>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b05      	cmp	r3, #5
 8003602:	d10c      	bne.n	800361e <HAL_RCC_OscConfig+0x356>
 8003604:	4b61      	ldr	r3, [pc, #388]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	4a60      	ldr	r2, [pc, #384]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800360a:	f043 0304 	orr.w	r3, r3, #4
 800360e:	6213      	str	r3, [r2, #32]
 8003610:	4b5e      	ldr	r3, [pc, #376]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4a5d      	ldr	r2, [pc, #372]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6213      	str	r3, [r2, #32]
 800361c:	e00b      	b.n	8003636 <HAL_RCC_OscConfig+0x36e>
 800361e:	4b5b      	ldr	r3, [pc, #364]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4a5a      	ldr	r2, [pc, #360]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003624:	f023 0301 	bic.w	r3, r3, #1
 8003628:	6213      	str	r3, [r2, #32]
 800362a:	4b58      	ldr	r3, [pc, #352]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4a57      	ldr	r2, [pc, #348]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003630:	f023 0304 	bic.w	r3, r3, #4
 8003634:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d015      	beq.n	800366a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363e:	f7fe f8ab 	bl	8001798 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003644:	e00a      	b.n	800365c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003646:	f7fe f8a7 	bl	8001798 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	f241 3288 	movw	r2, #5000	; 0x1388
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e0b1      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365c:	4b4b      	ldr	r3, [pc, #300]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0ee      	beq.n	8003646 <HAL_RCC_OscConfig+0x37e>
 8003668:	e014      	b.n	8003694 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366a:	f7fe f895 	bl	8001798 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fe f891 	bl	8001798 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003680:	4293      	cmp	r3, r2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e09b      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003688:	4b40      	ldr	r3, [pc, #256]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ee      	bne.n	8003672 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d105      	bne.n	80036a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	4b3c      	ldr	r3, [pc, #240]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	4a3b      	ldr	r2, [pc, #236]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f000 8087 	beq.w	80037be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b0:	4b36      	ldr	r3, [pc, #216]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f003 030c 	and.w	r3, r3, #12
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d061      	beq.n	8003780 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d146      	bne.n	8003752 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c4:	4b33      	ldr	r3, [pc, #204]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fe f865 	bl	8001798 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fe f861 	bl	8001798 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e06d      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e4:	4b29      	ldr	r3, [pc, #164]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f0      	bne.n	80036d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f8:	d108      	bne.n	800370c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	4921      	ldr	r1, [pc, #132]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800370c:	4b1f      	ldr	r3, [pc, #124]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a19      	ldr	r1, [r3, #32]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	430b      	orrs	r3, r1
 800371e:	491b      	ldr	r1, [pc, #108]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372a:	f7fe f835 	bl	8001798 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003732:	f7fe f831 	bl	8001798 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e03d      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x46a>
 8003750:	e035      	b.n	80037be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003752:	4b10      	ldr	r3, [pc, #64]	; (8003794 <HAL_RCC_OscConfig+0x4cc>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe f81e 	bl	8001798 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe f81a 	bl	8001798 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e026      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCC_OscConfig+0x4c4>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x498>
 800377e:	e01e      	b.n	80037be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e019      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
 800378c:	40021000 	.word	0x40021000
 8003790:	40007000 	.word	0x40007000
 8003794:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCC_OscConfig+0x500>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d106      	bne.n	80037ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d001      	beq.n	80037be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40021000 	.word	0x40021000

080037cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0d0      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e0:	4b6a      	ldr	r3, [pc, #424]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d910      	bls.n	8003810 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b67      	ldr	r3, [pc, #412]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 0207 	bic.w	r2, r3, #7
 80037f6:	4965      	ldr	r1, [pc, #404]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fe:	4b63      	ldr	r3, [pc, #396]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	429a      	cmp	r2, r3
 800380a:	d001      	beq.n	8003810 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0b8      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003828:	4b59      	ldr	r3, [pc, #356]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a58      	ldr	r2, [pc, #352]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800382e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003832:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003840:	4b53      	ldr	r3, [pc, #332]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a52      	ldr	r2, [pc, #328]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800384a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800384c:	4b50      	ldr	r3, [pc, #320]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	494d      	ldr	r1, [pc, #308]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	4313      	orrs	r3, r2
 800385c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d040      	beq.n	80038ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003872:	4b47      	ldr	r3, [pc, #284]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d115      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e07f      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	4b41      	ldr	r3, [pc, #260]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e073      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389a:	4b3d      	ldr	r3, [pc, #244]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e06b      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038aa:	4b39      	ldr	r3, [pc, #228]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f023 0203 	bic.w	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4936      	ldr	r1, [pc, #216]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038bc:	f7fd ff6c 	bl	8001798 <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	e00a      	b.n	80038da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c4:	f7fd ff68 	bl	8001798 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e053      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 020c 	and.w	r2, r3, #12
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d1eb      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ec:	4b27      	ldr	r3, [pc, #156]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d210      	bcs.n	800391c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b24      	ldr	r3, [pc, #144]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 0207 	bic.w	r2, r3, #7
 8003902:	4922      	ldr	r1, [pc, #136]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e032      	b.n	8003982 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d008      	beq.n	800393a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003928:	4b19      	ldr	r3, [pc, #100]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	4916      	ldr	r1, [pc, #88]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	4313      	orrs	r3, r2
 8003938:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	490e      	ldr	r1, [pc, #56]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800395a:	f000 f821 	bl	80039a0 <HAL_RCC_GetSysClockFreq>
 800395e:	4602      	mov	r2, r0
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	091b      	lsrs	r3, r3, #4
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	490a      	ldr	r1, [pc, #40]	; (8003994 <HAL_RCC_ClockConfig+0x1c8>)
 800396c:	5ccb      	ldrb	r3, [r1, r3]
 800396e:	fa22 f303 	lsr.w	r3, r2, r3
 8003972:	4a09      	ldr	r2, [pc, #36]	; (8003998 <HAL_RCC_ClockConfig+0x1cc>)
 8003974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <HAL_RCC_ClockConfig+0x1d0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd feca 	bl	8001714 <HAL_InitTick>

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40022000 	.word	0x40022000
 8003990:	40021000 	.word	0x40021000
 8003994:	0800495c 	.word	0x0800495c
 8003998:	20000004 	.word	0x20000004
 800399c:	20000008 	.word	0x20000008

080039a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039ba:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x94>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d002      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x30>
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d003      	beq.n	80039d6 <HAL_RCC_GetSysClockFreq+0x36>
 80039ce:	e027      	b.n	8003a20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039d0:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x98>)
 80039d2:	613b      	str	r3, [r7, #16]
      break;
 80039d4:	e027      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	0c9b      	lsrs	r3, r3, #18
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <HAL_RCC_GetSysClockFreq+0x9c>)
 80039e0:	5cd3      	ldrb	r3, [r2, r3]
 80039e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d010      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_RCC_GetSysClockFreq+0x94>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	0c5b      	lsrs	r3, r3, #17
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	4a11      	ldr	r2, [pc, #68]	; (8003a40 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039fa:	5cd3      	ldrb	r3, [r2, r3]
 80039fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a02:	fb03 f202 	mul.w	r2, r3, r2
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e004      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a0c      	ldr	r2, [pc, #48]	; (8003a44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a14:	fb02 f303 	mul.w	r3, r2, r3
 8003a18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	613b      	str	r3, [r7, #16]
      break;
 8003a1e:	e002      	b.n	8003a26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a22:	613b      	str	r3, [r7, #16]
      break;
 8003a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a26:	693b      	ldr	r3, [r7, #16]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bc80      	pop	{r7}
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40021000 	.word	0x40021000
 8003a38:	007a1200 	.word	0x007a1200
 8003a3c:	08004974 	.word	0x08004974
 8003a40:	08004984 	.word	0x08004984
 8003a44:	003d0900 	.word	0x003d0900

08003a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a4c:	4b02      	ldr	r3, [pc, #8]	; (8003a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr
 8003a58:	20000004 	.word	0x20000004

08003a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a60:	f7ff fff2 	bl	8003a48 <HAL_RCC_GetHCLKFreq>
 8003a64:	4602      	mov	r2, r0
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4903      	ldr	r1, [pc, #12]	; (8003a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a72:	5ccb      	ldrb	r3, [r1, r3]
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	0800496c 	.word	0x0800496c

08003a84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <RCC_Delay+0x34>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <RCC_Delay+0x38>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0a5b      	lsrs	r3, r3, #9
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003aa0:	bf00      	nop
  }
  while (Delay --);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1e5a      	subs	r2, r3, #1
 8003aa6:	60fa      	str	r2, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f9      	bne.n	8003aa0 <RCC_Delay+0x1c>
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	20000004 	.word	0x20000004
 8003abc:	10624dd3 	.word	0x10624dd3

08003ac0 <memset>:
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4402      	add	r2, r0
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d100      	bne.n	8003aca <memset+0xa>
 8003ac8:	4770      	bx	lr
 8003aca:	f803 1b01 	strb.w	r1, [r3], #1
 8003ace:	e7f9      	b.n	8003ac4 <memset+0x4>

08003ad0 <__errno>:
 8003ad0:	4b01      	ldr	r3, [pc, #4]	; (8003ad8 <__errno+0x8>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	2000005c 	.word	0x2000005c

08003adc <__libc_init_array>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	2600      	movs	r6, #0
 8003ae0:	4d0c      	ldr	r5, [pc, #48]	; (8003b14 <__libc_init_array+0x38>)
 8003ae2:	4c0d      	ldr	r4, [pc, #52]	; (8003b18 <__libc_init_array+0x3c>)
 8003ae4:	1b64      	subs	r4, r4, r5
 8003ae6:	10a4      	asrs	r4, r4, #2
 8003ae8:	42a6      	cmp	r6, r4
 8003aea:	d109      	bne.n	8003b00 <__libc_init_array+0x24>
 8003aec:	f000 ff22 	bl	8004934 <_init>
 8003af0:	2600      	movs	r6, #0
 8003af2:	4d0a      	ldr	r5, [pc, #40]	; (8003b1c <__libc_init_array+0x40>)
 8003af4:	4c0a      	ldr	r4, [pc, #40]	; (8003b20 <__libc_init_array+0x44>)
 8003af6:	1b64      	subs	r4, r4, r5
 8003af8:	10a4      	asrs	r4, r4, #2
 8003afa:	42a6      	cmp	r6, r4
 8003afc:	d105      	bne.n	8003b0a <__libc_init_array+0x2e>
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
 8003b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b04:	4798      	blx	r3
 8003b06:	3601      	adds	r6, #1
 8003b08:	e7ee      	b.n	8003ae8 <__libc_init_array+0xc>
 8003b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0e:	4798      	blx	r3
 8003b10:	3601      	adds	r6, #1
 8003b12:	e7f2      	b.n	8003afa <__libc_init_array+0x1e>
 8003b14:	080049b8 	.word	0x080049b8
 8003b18:	080049b8 	.word	0x080049b8
 8003b1c:	080049b8 	.word	0x080049b8
 8003b20:	080049bc 	.word	0x080049bc

08003b24 <pow>:
 8003b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b28:	4614      	mov	r4, r2
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	4680      	mov	r8, r0
 8003b2e:	4689      	mov	r9, r1
 8003b30:	f000 f866 	bl	8003c00 <__ieee754_pow>
 8003b34:	4622      	mov	r2, r4
 8003b36:	4606      	mov	r6, r0
 8003b38:	460f      	mov	r7, r1
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	4620      	mov	r0, r4
 8003b3e:	4629      	mov	r1, r5
 8003b40:	f7fc ff5c 	bl	80009fc <__aeabi_dcmpun>
 8003b44:	bbc8      	cbnz	r0, 8003bba <pow+0x96>
 8003b46:	2200      	movs	r2, #0
 8003b48:	2300      	movs	r3, #0
 8003b4a:	4640      	mov	r0, r8
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	f7fc ff23 	bl	8000998 <__aeabi_dcmpeq>
 8003b52:	b1b8      	cbz	r0, 8003b84 <pow+0x60>
 8003b54:	2200      	movs	r2, #0
 8003b56:	2300      	movs	r3, #0
 8003b58:	4620      	mov	r0, r4
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	f7fc ff1c 	bl	8000998 <__aeabi_dcmpeq>
 8003b60:	2800      	cmp	r0, #0
 8003b62:	d141      	bne.n	8003be8 <pow+0xc4>
 8003b64:	4620      	mov	r0, r4
 8003b66:	4629      	mov	r1, r5
 8003b68:	f000 f844 	bl	8003bf4 <finite>
 8003b6c:	b328      	cbz	r0, 8003bba <pow+0x96>
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2300      	movs	r3, #0
 8003b72:	4620      	mov	r0, r4
 8003b74:	4629      	mov	r1, r5
 8003b76:	f7fc ff19 	bl	80009ac <__aeabi_dcmplt>
 8003b7a:	b1f0      	cbz	r0, 8003bba <pow+0x96>
 8003b7c:	f7ff ffa8 	bl	8003ad0 <__errno>
 8003b80:	2322      	movs	r3, #34	; 0x22
 8003b82:	e019      	b.n	8003bb8 <pow+0x94>
 8003b84:	4630      	mov	r0, r6
 8003b86:	4639      	mov	r1, r7
 8003b88:	f000 f834 	bl	8003bf4 <finite>
 8003b8c:	b9c8      	cbnz	r0, 8003bc2 <pow+0x9e>
 8003b8e:	4640      	mov	r0, r8
 8003b90:	4649      	mov	r1, r9
 8003b92:	f000 f82f 	bl	8003bf4 <finite>
 8003b96:	b1a0      	cbz	r0, 8003bc2 <pow+0x9e>
 8003b98:	4620      	mov	r0, r4
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	f000 f82a 	bl	8003bf4 <finite>
 8003ba0:	b178      	cbz	r0, 8003bc2 <pow+0x9e>
 8003ba2:	4632      	mov	r2, r6
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	4639      	mov	r1, r7
 8003baa:	f7fc ff27 	bl	80009fc <__aeabi_dcmpun>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d0e4      	beq.n	8003b7c <pow+0x58>
 8003bb2:	f7ff ff8d 	bl	8003ad0 <__errno>
 8003bb6:	2321      	movs	r3, #33	; 0x21
 8003bb8:	6003      	str	r3, [r0, #0]
 8003bba:	4630      	mov	r0, r6
 8003bbc:	4639      	mov	r1, r7
 8003bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	4630      	mov	r0, r6
 8003bc8:	4639      	mov	r1, r7
 8003bca:	f7fc fee5 	bl	8000998 <__aeabi_dcmpeq>
 8003bce:	2800      	cmp	r0, #0
 8003bd0:	d0f3      	beq.n	8003bba <pow+0x96>
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	f000 f80d 	bl	8003bf4 <finite>
 8003bda:	2800      	cmp	r0, #0
 8003bdc:	d0ed      	beq.n	8003bba <pow+0x96>
 8003bde:	4620      	mov	r0, r4
 8003be0:	4629      	mov	r1, r5
 8003be2:	f000 f807 	bl	8003bf4 <finite>
 8003be6:	e7c8      	b.n	8003b7a <pow+0x56>
 8003be8:	2600      	movs	r6, #0
 8003bea:	4f01      	ldr	r7, [pc, #4]	; (8003bf0 <pow+0xcc>)
 8003bec:	e7e5      	b.n	8003bba <pow+0x96>
 8003bee:	bf00      	nop
 8003bf0:	3ff00000 	.word	0x3ff00000

08003bf4 <finite>:
 8003bf4:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8003bf8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003bfc:	0fc0      	lsrs	r0, r0, #31
 8003bfe:	4770      	bx	lr

08003c00 <__ieee754_pow>:
 8003c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c04:	b093      	sub	sp, #76	; 0x4c
 8003c06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c0a:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8003c0e:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8003c12:	4689      	mov	r9, r1
 8003c14:	ea56 0102 	orrs.w	r1, r6, r2
 8003c18:	4680      	mov	r8, r0
 8003c1a:	d111      	bne.n	8003c40 <__ieee754_pow+0x40>
 8003c1c:	1803      	adds	r3, r0, r0
 8003c1e:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8003c22:	4152      	adcs	r2, r2
 8003c24:	4299      	cmp	r1, r3
 8003c26:	4b82      	ldr	r3, [pc, #520]	; (8003e30 <__ieee754_pow+0x230>)
 8003c28:	4193      	sbcs	r3, r2
 8003c2a:	f080 84ba 	bcs.w	80045a2 <__ieee754_pow+0x9a2>
 8003c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c32:	4640      	mov	r0, r8
 8003c34:	4649      	mov	r1, r9
 8003c36:	f7fc fa91 	bl	800015c <__adddf3>
 8003c3a:	4683      	mov	fp, r0
 8003c3c:	468c      	mov	ip, r1
 8003c3e:	e06f      	b.n	8003d20 <__ieee754_pow+0x120>
 8003c40:	4b7c      	ldr	r3, [pc, #496]	; (8003e34 <__ieee754_pow+0x234>)
 8003c42:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8003c46:	429c      	cmp	r4, r3
 8003c48:	464d      	mov	r5, r9
 8003c4a:	4682      	mov	sl, r0
 8003c4c:	dc06      	bgt.n	8003c5c <__ieee754_pow+0x5c>
 8003c4e:	d101      	bne.n	8003c54 <__ieee754_pow+0x54>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d1ec      	bne.n	8003c2e <__ieee754_pow+0x2e>
 8003c54:	429e      	cmp	r6, r3
 8003c56:	dc01      	bgt.n	8003c5c <__ieee754_pow+0x5c>
 8003c58:	d10f      	bne.n	8003c7a <__ieee754_pow+0x7a>
 8003c5a:	b172      	cbz	r2, 8003c7a <__ieee754_pow+0x7a>
 8003c5c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8003c60:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8003c64:	ea55 050a 	orrs.w	r5, r5, sl
 8003c68:	d1e1      	bne.n	8003c2e <__ieee754_pow+0x2e>
 8003c6a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8003c6e:	18db      	adds	r3, r3, r3
 8003c70:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8003c74:	4152      	adcs	r2, r2
 8003c76:	429d      	cmp	r5, r3
 8003c78:	e7d5      	b.n	8003c26 <__ieee754_pow+0x26>
 8003c7a:	2d00      	cmp	r5, #0
 8003c7c:	da39      	bge.n	8003cf2 <__ieee754_pow+0xf2>
 8003c7e:	4b6e      	ldr	r3, [pc, #440]	; (8003e38 <__ieee754_pow+0x238>)
 8003c80:	429e      	cmp	r6, r3
 8003c82:	dc52      	bgt.n	8003d2a <__ieee754_pow+0x12a>
 8003c84:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003c88:	429e      	cmp	r6, r3
 8003c8a:	f340 849d 	ble.w	80045c8 <__ieee754_pow+0x9c8>
 8003c8e:	1533      	asrs	r3, r6, #20
 8003c90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003c94:	2b14      	cmp	r3, #20
 8003c96:	dd0f      	ble.n	8003cb8 <__ieee754_pow+0xb8>
 8003c98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003c9c:	fa22 f103 	lsr.w	r1, r2, r3
 8003ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	f040 848f 	bne.w	80045c8 <__ieee754_pow+0x9c8>
 8003caa:	f001 0101 	and.w	r1, r1, #1
 8003cae:	f1c1 0302 	rsb	r3, r1, #2
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	b182      	cbz	r2, 8003cd8 <__ieee754_pow+0xd8>
 8003cb6:	e05d      	b.n	8003d74 <__ieee754_pow+0x174>
 8003cb8:	2a00      	cmp	r2, #0
 8003cba:	d159      	bne.n	8003d70 <__ieee754_pow+0x170>
 8003cbc:	f1c3 0314 	rsb	r3, r3, #20
 8003cc0:	fa46 f103 	asr.w	r1, r6, r3
 8003cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc8:	42b3      	cmp	r3, r6
 8003cca:	f040 847a 	bne.w	80045c2 <__ieee754_pow+0x9c2>
 8003cce:	f001 0101 	and.w	r1, r1, #1
 8003cd2:	f1c1 0302 	rsb	r3, r1, #2
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	4b58      	ldr	r3, [pc, #352]	; (8003e3c <__ieee754_pow+0x23c>)
 8003cda:	429e      	cmp	r6, r3
 8003cdc:	d132      	bne.n	8003d44 <__ieee754_pow+0x144>
 8003cde:	2f00      	cmp	r7, #0
 8003ce0:	f280 846b 	bge.w	80045ba <__ieee754_pow+0x9ba>
 8003ce4:	4642      	mov	r2, r8
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	2000      	movs	r0, #0
 8003cea:	4954      	ldr	r1, [pc, #336]	; (8003e3c <__ieee754_pow+0x23c>)
 8003cec:	f7fc fd16 	bl	800071c <__aeabi_ddiv>
 8003cf0:	e7a3      	b.n	8003c3a <__ieee754_pow+0x3a>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2a00      	cmp	r2, #0
 8003cf8:	d13c      	bne.n	8003d74 <__ieee754_pow+0x174>
 8003cfa:	4b4e      	ldr	r3, [pc, #312]	; (8003e34 <__ieee754_pow+0x234>)
 8003cfc:	429e      	cmp	r6, r3
 8003cfe:	d1eb      	bne.n	8003cd8 <__ieee754_pow+0xd8>
 8003d00:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003d04:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003d08:	ea53 030a 	orrs.w	r3, r3, sl
 8003d0c:	f000 8449 	beq.w	80045a2 <__ieee754_pow+0x9a2>
 8003d10:	4b4b      	ldr	r3, [pc, #300]	; (8003e40 <__ieee754_pow+0x240>)
 8003d12:	429c      	cmp	r4, r3
 8003d14:	dd0b      	ble.n	8003d2e <__ieee754_pow+0x12e>
 8003d16:	2f00      	cmp	r7, #0
 8003d18:	f2c0 8449 	blt.w	80045ae <__ieee754_pow+0x9ae>
 8003d1c:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8003d20:	4658      	mov	r0, fp
 8003d22:	4661      	mov	r1, ip
 8003d24:	b013      	add	sp, #76	; 0x4c
 8003d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e7e2      	b.n	8003cf4 <__ieee754_pow+0xf4>
 8003d2e:	2f00      	cmp	r7, #0
 8003d30:	f04f 0b00 	mov.w	fp, #0
 8003d34:	f04f 0c00 	mov.w	ip, #0
 8003d38:	daf2      	bge.n	8003d20 <__ieee754_pow+0x120>
 8003d3a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8003d3e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003d42:	e7ed      	b.n	8003d20 <__ieee754_pow+0x120>
 8003d44:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8003d48:	d106      	bne.n	8003d58 <__ieee754_pow+0x158>
 8003d4a:	4642      	mov	r2, r8
 8003d4c:	464b      	mov	r3, r9
 8003d4e:	4640      	mov	r0, r8
 8003d50:	4649      	mov	r1, r9
 8003d52:	f7fc fbb9 	bl	80004c8 <__aeabi_dmul>
 8003d56:	e770      	b.n	8003c3a <__ieee754_pow+0x3a>
 8003d58:	4b3a      	ldr	r3, [pc, #232]	; (8003e44 <__ieee754_pow+0x244>)
 8003d5a:	429f      	cmp	r7, r3
 8003d5c:	d10a      	bne.n	8003d74 <__ieee754_pow+0x174>
 8003d5e:	2d00      	cmp	r5, #0
 8003d60:	db08      	blt.n	8003d74 <__ieee754_pow+0x174>
 8003d62:	4640      	mov	r0, r8
 8003d64:	4649      	mov	r1, r9
 8003d66:	b013      	add	sp, #76	; 0x4c
 8003d68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d6c:	f000 bd0a 	b.w	8004784 <__ieee754_sqrt>
 8003d70:	2300      	movs	r3, #0
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	4640      	mov	r0, r8
 8003d76:	4649      	mov	r1, r9
 8003d78:	f000 fc58 	bl	800462c <fabs>
 8003d7c:	4683      	mov	fp, r0
 8003d7e:	468c      	mov	ip, r1
 8003d80:	f1ba 0f00 	cmp.w	sl, #0
 8003d84:	d128      	bne.n	8003dd8 <__ieee754_pow+0x1d8>
 8003d86:	b124      	cbz	r4, 8003d92 <__ieee754_pow+0x192>
 8003d88:	4b2c      	ldr	r3, [pc, #176]	; (8003e3c <__ieee754_pow+0x23c>)
 8003d8a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d122      	bne.n	8003dd8 <__ieee754_pow+0x1d8>
 8003d92:	2f00      	cmp	r7, #0
 8003d94:	da07      	bge.n	8003da6 <__ieee754_pow+0x1a6>
 8003d96:	465a      	mov	r2, fp
 8003d98:	4663      	mov	r3, ip
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	4927      	ldr	r1, [pc, #156]	; (8003e3c <__ieee754_pow+0x23c>)
 8003d9e:	f7fc fcbd 	bl	800071c <__aeabi_ddiv>
 8003da2:	4683      	mov	fp, r0
 8003da4:	468c      	mov	ip, r1
 8003da6:	2d00      	cmp	r5, #0
 8003da8:	daba      	bge.n	8003d20 <__ieee754_pow+0x120>
 8003daa:	9b00      	ldr	r3, [sp, #0]
 8003dac:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003db0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003db4:	431c      	orrs	r4, r3
 8003db6:	d108      	bne.n	8003dca <__ieee754_pow+0x1ca>
 8003db8:	465a      	mov	r2, fp
 8003dba:	4663      	mov	r3, ip
 8003dbc:	4658      	mov	r0, fp
 8003dbe:	4661      	mov	r1, ip
 8003dc0:	f7fc f9ca 	bl	8000158 <__aeabi_dsub>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	e790      	b.n	8003cec <__ieee754_pow+0xec>
 8003dca:	9b00      	ldr	r3, [sp, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d1a7      	bne.n	8003d20 <__ieee754_pow+0x120>
 8003dd0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8003dd4:	469c      	mov	ip, r3
 8003dd6:	e7a3      	b.n	8003d20 <__ieee754_pow+0x120>
 8003dd8:	0feb      	lsrs	r3, r5, #31
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	930c      	str	r3, [sp, #48]	; 0x30
 8003dde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003de0:	9b00      	ldr	r3, [sp, #0]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	d104      	bne.n	8003df0 <__ieee754_pow+0x1f0>
 8003de6:	4642      	mov	r2, r8
 8003de8:	464b      	mov	r3, r9
 8003dea:	4640      	mov	r0, r8
 8003dec:	4649      	mov	r1, r9
 8003dee:	e7e7      	b.n	8003dc0 <__ieee754_pow+0x1c0>
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <__ieee754_pow+0x248>)
 8003df2:	429e      	cmp	r6, r3
 8003df4:	f340 80f6 	ble.w	8003fe4 <__ieee754_pow+0x3e4>
 8003df8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003dfc:	429e      	cmp	r6, r3
 8003dfe:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <__ieee754_pow+0x240>)
 8003e00:	dd09      	ble.n	8003e16 <__ieee754_pow+0x216>
 8003e02:	429c      	cmp	r4, r3
 8003e04:	dc0c      	bgt.n	8003e20 <__ieee754_pow+0x220>
 8003e06:	2f00      	cmp	r7, #0
 8003e08:	da0c      	bge.n	8003e24 <__ieee754_pow+0x224>
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	b013      	add	sp, #76	; 0x4c
 8003e0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e12:	f000 bcb2 	b.w	800477a <__math_oflow>
 8003e16:	429c      	cmp	r4, r3
 8003e18:	dbf5      	blt.n	8003e06 <__ieee754_pow+0x206>
 8003e1a:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <__ieee754_pow+0x23c>)
 8003e1c:	429c      	cmp	r4, r3
 8003e1e:	dd15      	ble.n	8003e4c <__ieee754_pow+0x24c>
 8003e20:	2f00      	cmp	r7, #0
 8003e22:	dcf2      	bgt.n	8003e0a <__ieee754_pow+0x20a>
 8003e24:	2000      	movs	r0, #0
 8003e26:	b013      	add	sp, #76	; 0x4c
 8003e28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e2c:	f000 bca0 	b.w	8004770 <__math_uflow>
 8003e30:	fff00000 	.word	0xfff00000
 8003e34:	7ff00000 	.word	0x7ff00000
 8003e38:	433fffff 	.word	0x433fffff
 8003e3c:	3ff00000 	.word	0x3ff00000
 8003e40:	3fefffff 	.word	0x3fefffff
 8003e44:	3fe00000 	.word	0x3fe00000
 8003e48:	41e00000 	.word	0x41e00000
 8003e4c:	4661      	mov	r1, ip
 8003e4e:	2200      	movs	r2, #0
 8003e50:	4658      	mov	r0, fp
 8003e52:	4b5f      	ldr	r3, [pc, #380]	; (8003fd0 <__ieee754_pow+0x3d0>)
 8003e54:	f7fc f980 	bl	8000158 <__aeabi_dsub>
 8003e58:	a355      	add	r3, pc, #340	; (adr r3, 8003fb0 <__ieee754_pow+0x3b0>)
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	4604      	mov	r4, r0
 8003e60:	460d      	mov	r5, r1
 8003e62:	f7fc fb31 	bl	80004c8 <__aeabi_dmul>
 8003e66:	a354      	add	r3, pc, #336	; (adr r3, 8003fb8 <__ieee754_pow+0x3b8>)
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	4606      	mov	r6, r0
 8003e6e:	460f      	mov	r7, r1
 8003e70:	4620      	mov	r0, r4
 8003e72:	4629      	mov	r1, r5
 8003e74:	f7fc fb28 	bl	80004c8 <__aeabi_dmul>
 8003e78:	2200      	movs	r2, #0
 8003e7a:	4682      	mov	sl, r0
 8003e7c:	468b      	mov	fp, r1
 8003e7e:	4620      	mov	r0, r4
 8003e80:	4629      	mov	r1, r5
 8003e82:	4b54      	ldr	r3, [pc, #336]	; (8003fd4 <__ieee754_pow+0x3d4>)
 8003e84:	f7fc fb20 	bl	80004c8 <__aeabi_dmul>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	a14c      	add	r1, pc, #304	; (adr r1, 8003fc0 <__ieee754_pow+0x3c0>)
 8003e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e92:	f7fc f961 	bl	8000158 <__aeabi_dsub>
 8003e96:	4622      	mov	r2, r4
 8003e98:	462b      	mov	r3, r5
 8003e9a:	f7fc fb15 	bl	80004c8 <__aeabi_dmul>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	494c      	ldr	r1, [pc, #304]	; (8003fd8 <__ieee754_pow+0x3d8>)
 8003ea6:	f7fc f957 	bl	8000158 <__aeabi_dsub>
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	4680      	mov	r8, r0
 8003eb0:	4689      	mov	r9, r1
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	4629      	mov	r1, r5
 8003eb6:	f7fc fb07 	bl	80004c8 <__aeabi_dmul>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4640      	mov	r0, r8
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	f7fc fb01 	bl	80004c8 <__aeabi_dmul>
 8003ec6:	a340      	add	r3, pc, #256	; (adr r3, 8003fc8 <__ieee754_pow+0x3c8>)
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f7fc fafc 	bl	80004c8 <__aeabi_dmul>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4650      	mov	r0, sl
 8003ed6:	4659      	mov	r1, fp
 8003ed8:	f7fc f93e 	bl	8000158 <__aeabi_dsub>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	460d      	mov	r5, r1
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	4639      	mov	r1, r7
 8003ee8:	f7fc f938 	bl	800015c <__adddf3>
 8003eec:	2000      	movs	r0, #0
 8003eee:	4632      	mov	r2, r6
 8003ef0:	463b      	mov	r3, r7
 8003ef2:	4682      	mov	sl, r0
 8003ef4:	468b      	mov	fp, r1
 8003ef6:	f7fc f92f 	bl	8000158 <__aeabi_dsub>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4620      	mov	r0, r4
 8003f00:	4629      	mov	r1, r5
 8003f02:	f7fc f929 	bl	8000158 <__aeabi_dsub>
 8003f06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f0a:	9b00      	ldr	r3, [sp, #0]
 8003f0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f04f 0600 	mov.w	r6, #0
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	bf0c      	ite	eq
 8003f1c:	4b2f      	ldreq	r3, [pc, #188]	; (8003fdc <__ieee754_pow+0x3dc>)
 8003f1e:	4b2c      	ldrne	r3, [pc, #176]	; (8003fd0 <__ieee754_pow+0x3d0>)
 8003f20:	4604      	mov	r4, r0
 8003f22:	460d      	mov	r5, r1
 8003f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f28:	e9cd 2300 	strd	r2, r3, [sp]
 8003f2c:	4632      	mov	r2, r6
 8003f2e:	463b      	mov	r3, r7
 8003f30:	f7fc f912 	bl	8000158 <__aeabi_dsub>
 8003f34:	4652      	mov	r2, sl
 8003f36:	465b      	mov	r3, fp
 8003f38:	f7fc fac6 	bl	80004c8 <__aeabi_dmul>
 8003f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f40:	4680      	mov	r8, r0
 8003f42:	4689      	mov	r9, r1
 8003f44:	4620      	mov	r0, r4
 8003f46:	4629      	mov	r1, r5
 8003f48:	f7fc fabe 	bl	80004c8 <__aeabi_dmul>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4640      	mov	r0, r8
 8003f52:	4649      	mov	r1, r9
 8003f54:	f7fc f902 	bl	800015c <__adddf3>
 8003f58:	4632      	mov	r2, r6
 8003f5a:	463b      	mov	r3, r7
 8003f5c:	4680      	mov	r8, r0
 8003f5e:	4689      	mov	r9, r1
 8003f60:	4650      	mov	r0, sl
 8003f62:	4659      	mov	r1, fp
 8003f64:	f7fc fab0 	bl	80004c8 <__aeabi_dmul>
 8003f68:	4604      	mov	r4, r0
 8003f6a:	460d      	mov	r5, r1
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4649      	mov	r1, r9
 8003f72:	4640      	mov	r0, r8
 8003f74:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003f78:	f7fc f8f0 	bl	800015c <__adddf3>
 8003f7c:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <__ieee754_pow+0x3e0>)
 8003f7e:	4682      	mov	sl, r0
 8003f80:	4299      	cmp	r1, r3
 8003f82:	460f      	mov	r7, r1
 8003f84:	460e      	mov	r6, r1
 8003f86:	f340 82e7 	ble.w	8004558 <__ieee754_pow+0x958>
 8003f8a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003f8e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003f92:	4303      	orrs	r3, r0
 8003f94:	f000 81e2 	beq.w	800435c <__ieee754_pow+0x75c>
 8003f98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f7fc fd04 	bl	80009ac <__aeabi_dcmplt>
 8003fa4:	3800      	subs	r0, #0
 8003fa6:	bf18      	it	ne
 8003fa8:	2001      	movne	r0, #1
 8003faa:	e72f      	b.n	8003e0c <__ieee754_pow+0x20c>
 8003fac:	f3af 8000 	nop.w
 8003fb0:	60000000 	.word	0x60000000
 8003fb4:	3ff71547 	.word	0x3ff71547
 8003fb8:	f85ddf44 	.word	0xf85ddf44
 8003fbc:	3e54ae0b 	.word	0x3e54ae0b
 8003fc0:	55555555 	.word	0x55555555
 8003fc4:	3fd55555 	.word	0x3fd55555
 8003fc8:	652b82fe 	.word	0x652b82fe
 8003fcc:	3ff71547 	.word	0x3ff71547
 8003fd0:	3ff00000 	.word	0x3ff00000
 8003fd4:	3fd00000 	.word	0x3fd00000
 8003fd8:	3fe00000 	.word	0x3fe00000
 8003fdc:	bff00000 	.word	0xbff00000
 8003fe0:	408fffff 	.word	0x408fffff
 8003fe4:	4bd4      	ldr	r3, [pc, #848]	; (8004338 <__ieee754_pow+0x738>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	402b      	ands	r3, r5
 8003fea:	b943      	cbnz	r3, 8003ffe <__ieee754_pow+0x3fe>
 8003fec:	4658      	mov	r0, fp
 8003fee:	4661      	mov	r1, ip
 8003ff0:	4bd2      	ldr	r3, [pc, #840]	; (800433c <__ieee754_pow+0x73c>)
 8003ff2:	f7fc fa69 	bl	80004c8 <__aeabi_dmul>
 8003ff6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003ffa:	4683      	mov	fp, r0
 8003ffc:	460c      	mov	r4, r1
 8003ffe:	1523      	asrs	r3, r4, #20
 8004000:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004004:	4413      	add	r3, r2
 8004006:	930b      	str	r3, [sp, #44]	; 0x2c
 8004008:	4bcd      	ldr	r3, [pc, #820]	; (8004340 <__ieee754_pow+0x740>)
 800400a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800400e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004012:	429c      	cmp	r4, r3
 8004014:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004018:	dd08      	ble.n	800402c <__ieee754_pow+0x42c>
 800401a:	4bca      	ldr	r3, [pc, #808]	; (8004344 <__ieee754_pow+0x744>)
 800401c:	429c      	cmp	r4, r3
 800401e:	f340 8164 	ble.w	80042ea <__ieee754_pow+0x6ea>
 8004022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004024:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004028:	3301      	adds	r3, #1
 800402a:	930b      	str	r3, [sp, #44]	; 0x2c
 800402c:	2600      	movs	r6, #0
 800402e:	00f3      	lsls	r3, r6, #3
 8004030:	930d      	str	r3, [sp, #52]	; 0x34
 8004032:	4bc5      	ldr	r3, [pc, #788]	; (8004348 <__ieee754_pow+0x748>)
 8004034:	4658      	mov	r0, fp
 8004036:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800403a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800403e:	4629      	mov	r1, r5
 8004040:	461a      	mov	r2, r3
 8004042:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8004046:	4623      	mov	r3, r4
 8004048:	f7fc f886 	bl	8000158 <__aeabi_dsub>
 800404c:	46da      	mov	sl, fp
 800404e:	462b      	mov	r3, r5
 8004050:	4652      	mov	r2, sl
 8004052:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004056:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800405a:	f7fc f87f 	bl	800015c <__adddf3>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	2000      	movs	r0, #0
 8004064:	49b9      	ldr	r1, [pc, #740]	; (800434c <__ieee754_pow+0x74c>)
 8004066:	f7fc fb59 	bl	800071c <__aeabi_ddiv>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004072:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004076:	f7fc fa27 	bl	80004c8 <__aeabi_dmul>
 800407a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800407e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8004082:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004086:	2300      	movs	r3, #0
 8004088:	2200      	movs	r2, #0
 800408a:	46ab      	mov	fp, r5
 800408c:	106d      	asrs	r5, r5, #1
 800408e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004092:	9304      	str	r3, [sp, #16]
 8004094:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004098:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800409c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80040a0:	4640      	mov	r0, r8
 80040a2:	4649      	mov	r1, r9
 80040a4:	4614      	mov	r4, r2
 80040a6:	461d      	mov	r5, r3
 80040a8:	f7fc fa0e 	bl	80004c8 <__aeabi_dmul>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80040b4:	f7fc f850 	bl	8000158 <__aeabi_dsub>
 80040b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80040bc:	4606      	mov	r6, r0
 80040be:	460f      	mov	r7, r1
 80040c0:	4620      	mov	r0, r4
 80040c2:	4629      	mov	r1, r5
 80040c4:	f7fc f848 	bl	8000158 <__aeabi_dsub>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4650      	mov	r0, sl
 80040ce:	4659      	mov	r1, fp
 80040d0:	f7fc f842 	bl	8000158 <__aeabi_dsub>
 80040d4:	4642      	mov	r2, r8
 80040d6:	464b      	mov	r3, r9
 80040d8:	f7fc f9f6 	bl	80004c8 <__aeabi_dmul>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4630      	mov	r0, r6
 80040e2:	4639      	mov	r1, r7
 80040e4:	f7fc f838 	bl	8000158 <__aeabi_dsub>
 80040e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80040ec:	f7fc f9ec 	bl	80004c8 <__aeabi_dmul>
 80040f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80040f4:	4682      	mov	sl, r0
 80040f6:	468b      	mov	fp, r1
 80040f8:	4610      	mov	r0, r2
 80040fa:	4619      	mov	r1, r3
 80040fc:	f7fc f9e4 	bl	80004c8 <__aeabi_dmul>
 8004100:	a37b      	add	r3, pc, #492	; (adr r3, 80042f0 <__ieee754_pow+0x6f0>)
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	4604      	mov	r4, r0
 8004108:	460d      	mov	r5, r1
 800410a:	f7fc f9dd 	bl	80004c8 <__aeabi_dmul>
 800410e:	a37a      	add	r3, pc, #488	; (adr r3, 80042f8 <__ieee754_pow+0x6f8>)
 8004110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004114:	f7fc f822 	bl	800015c <__adddf3>
 8004118:	4622      	mov	r2, r4
 800411a:	462b      	mov	r3, r5
 800411c:	f7fc f9d4 	bl	80004c8 <__aeabi_dmul>
 8004120:	a377      	add	r3, pc, #476	; (adr r3, 8004300 <__ieee754_pow+0x700>)
 8004122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004126:	f7fc f819 	bl	800015c <__adddf3>
 800412a:	4622      	mov	r2, r4
 800412c:	462b      	mov	r3, r5
 800412e:	f7fc f9cb 	bl	80004c8 <__aeabi_dmul>
 8004132:	a375      	add	r3, pc, #468	; (adr r3, 8004308 <__ieee754_pow+0x708>)
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	f7fc f810 	bl	800015c <__adddf3>
 800413c:	4622      	mov	r2, r4
 800413e:	462b      	mov	r3, r5
 8004140:	f7fc f9c2 	bl	80004c8 <__aeabi_dmul>
 8004144:	a372      	add	r3, pc, #456	; (adr r3, 8004310 <__ieee754_pow+0x710>)
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	f7fc f807 	bl	800015c <__adddf3>
 800414e:	4622      	mov	r2, r4
 8004150:	462b      	mov	r3, r5
 8004152:	f7fc f9b9 	bl	80004c8 <__aeabi_dmul>
 8004156:	a370      	add	r3, pc, #448	; (adr r3, 8004318 <__ieee754_pow+0x718>)
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	f7fb fffe 	bl	800015c <__adddf3>
 8004160:	4622      	mov	r2, r4
 8004162:	4606      	mov	r6, r0
 8004164:	460f      	mov	r7, r1
 8004166:	462b      	mov	r3, r5
 8004168:	4620      	mov	r0, r4
 800416a:	4629      	mov	r1, r5
 800416c:	f7fc f9ac 	bl	80004c8 <__aeabi_dmul>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4630      	mov	r0, r6
 8004176:	4639      	mov	r1, r7
 8004178:	f7fc f9a6 	bl	80004c8 <__aeabi_dmul>
 800417c:	4604      	mov	r4, r0
 800417e:	460d      	mov	r5, r1
 8004180:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004184:	4642      	mov	r2, r8
 8004186:	464b      	mov	r3, r9
 8004188:	f7fb ffe8 	bl	800015c <__adddf3>
 800418c:	4652      	mov	r2, sl
 800418e:	465b      	mov	r3, fp
 8004190:	f7fc f99a 	bl	80004c8 <__aeabi_dmul>
 8004194:	4622      	mov	r2, r4
 8004196:	462b      	mov	r3, r5
 8004198:	f7fb ffe0 	bl	800015c <__adddf3>
 800419c:	4642      	mov	r2, r8
 800419e:	4606      	mov	r6, r0
 80041a0:	460f      	mov	r7, r1
 80041a2:	464b      	mov	r3, r9
 80041a4:	4640      	mov	r0, r8
 80041a6:	4649      	mov	r1, r9
 80041a8:	f7fc f98e 	bl	80004c8 <__aeabi_dmul>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80041b4:	2200      	movs	r2, #0
 80041b6:	4b66      	ldr	r3, [pc, #408]	; (8004350 <__ieee754_pow+0x750>)
 80041b8:	f7fb ffd0 	bl	800015c <__adddf3>
 80041bc:	4632      	mov	r2, r6
 80041be:	463b      	mov	r3, r7
 80041c0:	f7fb ffcc 	bl	800015c <__adddf3>
 80041c4:	2400      	movs	r4, #0
 80041c6:	460d      	mov	r5, r1
 80041c8:	4622      	mov	r2, r4
 80041ca:	460b      	mov	r3, r1
 80041cc:	4640      	mov	r0, r8
 80041ce:	4649      	mov	r1, r9
 80041d0:	f7fc f97a 	bl	80004c8 <__aeabi_dmul>
 80041d4:	2200      	movs	r2, #0
 80041d6:	4680      	mov	r8, r0
 80041d8:	4689      	mov	r9, r1
 80041da:	4620      	mov	r0, r4
 80041dc:	4629      	mov	r1, r5
 80041de:	4b5c      	ldr	r3, [pc, #368]	; (8004350 <__ieee754_pow+0x750>)
 80041e0:	f7fb ffba 	bl	8000158 <__aeabi_dsub>
 80041e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80041e8:	f7fb ffb6 	bl	8000158 <__aeabi_dsub>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4630      	mov	r0, r6
 80041f2:	4639      	mov	r1, r7
 80041f4:	f7fb ffb0 	bl	8000158 <__aeabi_dsub>
 80041f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80041fc:	f7fc f964 	bl	80004c8 <__aeabi_dmul>
 8004200:	4622      	mov	r2, r4
 8004202:	4606      	mov	r6, r0
 8004204:	460f      	mov	r7, r1
 8004206:	462b      	mov	r3, r5
 8004208:	4650      	mov	r0, sl
 800420a:	4659      	mov	r1, fp
 800420c:	f7fc f95c 	bl	80004c8 <__aeabi_dmul>
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4630      	mov	r0, r6
 8004216:	4639      	mov	r1, r7
 8004218:	f7fb ffa0 	bl	800015c <__adddf3>
 800421c:	2400      	movs	r4, #0
 800421e:	4606      	mov	r6, r0
 8004220:	460f      	mov	r7, r1
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4640      	mov	r0, r8
 8004228:	4649      	mov	r1, r9
 800422a:	f7fb ff97 	bl	800015c <__adddf3>
 800422e:	a33c      	add	r3, pc, #240	; (adr r3, 8004320 <__ieee754_pow+0x720>)
 8004230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004234:	4620      	mov	r0, r4
 8004236:	460d      	mov	r5, r1
 8004238:	f7fc f946 	bl	80004c8 <__aeabi_dmul>
 800423c:	4642      	mov	r2, r8
 800423e:	464b      	mov	r3, r9
 8004240:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004244:	4620      	mov	r0, r4
 8004246:	4629      	mov	r1, r5
 8004248:	f7fb ff86 	bl	8000158 <__aeabi_dsub>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4630      	mov	r0, r6
 8004252:	4639      	mov	r1, r7
 8004254:	f7fb ff80 	bl	8000158 <__aeabi_dsub>
 8004258:	a333      	add	r3, pc, #204	; (adr r3, 8004328 <__ieee754_pow+0x728>)
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f7fc f933 	bl	80004c8 <__aeabi_dmul>
 8004262:	a333      	add	r3, pc, #204	; (adr r3, 8004330 <__ieee754_pow+0x730>)
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	4606      	mov	r6, r0
 800426a:	460f      	mov	r7, r1
 800426c:	4620      	mov	r0, r4
 800426e:	4629      	mov	r1, r5
 8004270:	f7fc f92a 	bl	80004c8 <__aeabi_dmul>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4630      	mov	r0, r6
 800427a:	4639      	mov	r1, r7
 800427c:	f7fb ff6e 	bl	800015c <__adddf3>
 8004280:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004282:	4b34      	ldr	r3, [pc, #208]	; (8004354 <__ieee754_pow+0x754>)
 8004284:	4413      	add	r3, r2
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	f7fb ff67 	bl	800015c <__adddf3>
 800428e:	4680      	mov	r8, r0
 8004290:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004292:	4689      	mov	r9, r1
 8004294:	f7fc f8ae 	bl	80003f4 <__aeabi_i2d>
 8004298:	4604      	mov	r4, r0
 800429a:	460d      	mov	r5, r1
 800429c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80042a2:	4b2d      	ldr	r3, [pc, #180]	; (8004358 <__ieee754_pow+0x758>)
 80042a4:	4413      	add	r3, r2
 80042a6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80042aa:	4642      	mov	r2, r8
 80042ac:	464b      	mov	r3, r9
 80042ae:	f7fb ff55 	bl	800015c <__adddf3>
 80042b2:	4632      	mov	r2, r6
 80042b4:	463b      	mov	r3, r7
 80042b6:	f7fb ff51 	bl	800015c <__adddf3>
 80042ba:	4622      	mov	r2, r4
 80042bc:	462b      	mov	r3, r5
 80042be:	f7fb ff4d 	bl	800015c <__adddf3>
 80042c2:	2000      	movs	r0, #0
 80042c4:	4622      	mov	r2, r4
 80042c6:	462b      	mov	r3, r5
 80042c8:	4682      	mov	sl, r0
 80042ca:	468b      	mov	fp, r1
 80042cc:	f7fb ff44 	bl	8000158 <__aeabi_dsub>
 80042d0:	4632      	mov	r2, r6
 80042d2:	463b      	mov	r3, r7
 80042d4:	f7fb ff40 	bl	8000158 <__aeabi_dsub>
 80042d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042dc:	f7fb ff3c 	bl	8000158 <__aeabi_dsub>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4640      	mov	r0, r8
 80042e6:	4649      	mov	r1, r9
 80042e8:	e60b      	b.n	8003f02 <__ieee754_pow+0x302>
 80042ea:	2601      	movs	r6, #1
 80042ec:	e69f      	b.n	800402e <__ieee754_pow+0x42e>
 80042ee:	bf00      	nop
 80042f0:	4a454eef 	.word	0x4a454eef
 80042f4:	3fca7e28 	.word	0x3fca7e28
 80042f8:	93c9db65 	.word	0x93c9db65
 80042fc:	3fcd864a 	.word	0x3fcd864a
 8004300:	a91d4101 	.word	0xa91d4101
 8004304:	3fd17460 	.word	0x3fd17460
 8004308:	518f264d 	.word	0x518f264d
 800430c:	3fd55555 	.word	0x3fd55555
 8004310:	db6fabff 	.word	0xdb6fabff
 8004314:	3fdb6db6 	.word	0x3fdb6db6
 8004318:	33333303 	.word	0x33333303
 800431c:	3fe33333 	.word	0x3fe33333
 8004320:	e0000000 	.word	0xe0000000
 8004324:	3feec709 	.word	0x3feec709
 8004328:	dc3a03fd 	.word	0xdc3a03fd
 800432c:	3feec709 	.word	0x3feec709
 8004330:	145b01f5 	.word	0x145b01f5
 8004334:	be3e2fe0 	.word	0xbe3e2fe0
 8004338:	7ff00000 	.word	0x7ff00000
 800433c:	43400000 	.word	0x43400000
 8004340:	0003988e 	.word	0x0003988e
 8004344:	000bb679 	.word	0x000bb679
 8004348:	08004988 	.word	0x08004988
 800434c:	3ff00000 	.word	0x3ff00000
 8004350:	40080000 	.word	0x40080000
 8004354:	080049a8 	.word	0x080049a8
 8004358:	08004998 	.word	0x08004998
 800435c:	a39c      	add	r3, pc, #624	; (adr r3, 80045d0 <__ieee754_pow+0x9d0>)
 800435e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004362:	4640      	mov	r0, r8
 8004364:	4649      	mov	r1, r9
 8004366:	f7fb fef9 	bl	800015c <__adddf3>
 800436a:	4622      	mov	r2, r4
 800436c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004370:	462b      	mov	r3, r5
 8004372:	4650      	mov	r0, sl
 8004374:	4639      	mov	r1, r7
 8004376:	f7fb feef 	bl	8000158 <__aeabi_dsub>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004382:	f7fc fb31 	bl	80009e8 <__aeabi_dcmpgt>
 8004386:	2800      	cmp	r0, #0
 8004388:	f47f ae06 	bne.w	8003f98 <__ieee754_pow+0x398>
 800438c:	4aa2      	ldr	r2, [pc, #648]	; (8004618 <__ieee754_pow+0xa18>)
 800438e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8004392:	4293      	cmp	r3, r2
 8004394:	f340 8100 	ble.w	8004598 <__ieee754_pow+0x998>
 8004398:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800439c:	151b      	asrs	r3, r3, #20
 800439e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80043a2:	fa4a fa03 	asr.w	sl, sl, r3
 80043a6:	44b2      	add	sl, r6
 80043a8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80043ac:	489b      	ldr	r0, [pc, #620]	; (800461c <__ieee754_pow+0xa1c>)
 80043ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80043b2:	4108      	asrs	r0, r1
 80043b4:	ea00 030a 	and.w	r3, r0, sl
 80043b8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80043bc:	f1c1 0114 	rsb	r1, r1, #20
 80043c0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80043c4:	fa4a fa01 	asr.w	sl, sl, r1
 80043c8:	2e00      	cmp	r6, #0
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	4620      	mov	r0, r4
 80043d0:	4629      	mov	r1, r5
 80043d2:	bfb8      	it	lt
 80043d4:	f1ca 0a00 	rsblt	sl, sl, #0
 80043d8:	f7fb febe 	bl	8000158 <__aeabi_dsub>
 80043dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043e4:	2400      	movs	r4, #0
 80043e6:	4642      	mov	r2, r8
 80043e8:	464b      	mov	r3, r9
 80043ea:	f7fb feb7 	bl	800015c <__adddf3>
 80043ee:	a37a      	add	r3, pc, #488	; (adr r3, 80045d8 <__ieee754_pow+0x9d8>)
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	4620      	mov	r0, r4
 80043f6:	460d      	mov	r5, r1
 80043f8:	f7fc f866 	bl	80004c8 <__aeabi_dmul>
 80043fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004400:	4606      	mov	r6, r0
 8004402:	460f      	mov	r7, r1
 8004404:	4620      	mov	r0, r4
 8004406:	4629      	mov	r1, r5
 8004408:	f7fb fea6 	bl	8000158 <__aeabi_dsub>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	4640      	mov	r0, r8
 8004412:	4649      	mov	r1, r9
 8004414:	f7fb fea0 	bl	8000158 <__aeabi_dsub>
 8004418:	a371      	add	r3, pc, #452	; (adr r3, 80045e0 <__ieee754_pow+0x9e0>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f7fc f853 	bl	80004c8 <__aeabi_dmul>
 8004422:	a371      	add	r3, pc, #452	; (adr r3, 80045e8 <__ieee754_pow+0x9e8>)
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	4680      	mov	r8, r0
 800442a:	4689      	mov	r9, r1
 800442c:	4620      	mov	r0, r4
 800442e:	4629      	mov	r1, r5
 8004430:	f7fc f84a 	bl	80004c8 <__aeabi_dmul>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4640      	mov	r0, r8
 800443a:	4649      	mov	r1, r9
 800443c:	f7fb fe8e 	bl	800015c <__adddf3>
 8004440:	4604      	mov	r4, r0
 8004442:	460d      	mov	r5, r1
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4630      	mov	r0, r6
 800444a:	4639      	mov	r1, r7
 800444c:	f7fb fe86 	bl	800015c <__adddf3>
 8004450:	4632      	mov	r2, r6
 8004452:	463b      	mov	r3, r7
 8004454:	4680      	mov	r8, r0
 8004456:	4689      	mov	r9, r1
 8004458:	f7fb fe7e 	bl	8000158 <__aeabi_dsub>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4620      	mov	r0, r4
 8004462:	4629      	mov	r1, r5
 8004464:	f7fb fe78 	bl	8000158 <__aeabi_dsub>
 8004468:	4642      	mov	r2, r8
 800446a:	4606      	mov	r6, r0
 800446c:	460f      	mov	r7, r1
 800446e:	464b      	mov	r3, r9
 8004470:	4640      	mov	r0, r8
 8004472:	4649      	mov	r1, r9
 8004474:	f7fc f828 	bl	80004c8 <__aeabi_dmul>
 8004478:	a35d      	add	r3, pc, #372	; (adr r3, 80045f0 <__ieee754_pow+0x9f0>)
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	4604      	mov	r4, r0
 8004480:	460d      	mov	r5, r1
 8004482:	f7fc f821 	bl	80004c8 <__aeabi_dmul>
 8004486:	a35c      	add	r3, pc, #368	; (adr r3, 80045f8 <__ieee754_pow+0x9f8>)
 8004488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448c:	f7fb fe64 	bl	8000158 <__aeabi_dsub>
 8004490:	4622      	mov	r2, r4
 8004492:	462b      	mov	r3, r5
 8004494:	f7fc f818 	bl	80004c8 <__aeabi_dmul>
 8004498:	a359      	add	r3, pc, #356	; (adr r3, 8004600 <__ieee754_pow+0xa00>)
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f7fb fe5d 	bl	800015c <__adddf3>
 80044a2:	4622      	mov	r2, r4
 80044a4:	462b      	mov	r3, r5
 80044a6:	f7fc f80f 	bl	80004c8 <__aeabi_dmul>
 80044aa:	a357      	add	r3, pc, #348	; (adr r3, 8004608 <__ieee754_pow+0xa08>)
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	f7fb fe52 	bl	8000158 <__aeabi_dsub>
 80044b4:	4622      	mov	r2, r4
 80044b6:	462b      	mov	r3, r5
 80044b8:	f7fc f806 	bl	80004c8 <__aeabi_dmul>
 80044bc:	a354      	add	r3, pc, #336	; (adr r3, 8004610 <__ieee754_pow+0xa10>)
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	f7fb fe4b 	bl	800015c <__adddf3>
 80044c6:	4622      	mov	r2, r4
 80044c8:	462b      	mov	r3, r5
 80044ca:	f7fb fffd 	bl	80004c8 <__aeabi_dmul>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4640      	mov	r0, r8
 80044d4:	4649      	mov	r1, r9
 80044d6:	f7fb fe3f 	bl	8000158 <__aeabi_dsub>
 80044da:	4604      	mov	r4, r0
 80044dc:	460d      	mov	r5, r1
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4640      	mov	r0, r8
 80044e4:	4649      	mov	r1, r9
 80044e6:	f7fb ffef 	bl	80004c8 <__aeabi_dmul>
 80044ea:	2200      	movs	r2, #0
 80044ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044f4:	4620      	mov	r0, r4
 80044f6:	4629      	mov	r1, r5
 80044f8:	f7fb fe2e 	bl	8000158 <__aeabi_dsub>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004504:	f7fc f90a 	bl	800071c <__aeabi_ddiv>
 8004508:	4632      	mov	r2, r6
 800450a:	4604      	mov	r4, r0
 800450c:	460d      	mov	r5, r1
 800450e:	463b      	mov	r3, r7
 8004510:	4640      	mov	r0, r8
 8004512:	4649      	mov	r1, r9
 8004514:	f7fb ffd8 	bl	80004c8 <__aeabi_dmul>
 8004518:	4632      	mov	r2, r6
 800451a:	463b      	mov	r3, r7
 800451c:	f7fb fe1e 	bl	800015c <__adddf3>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4620      	mov	r0, r4
 8004526:	4629      	mov	r1, r5
 8004528:	f7fb fe16 	bl	8000158 <__aeabi_dsub>
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	f7fb fe12 	bl	8000158 <__aeabi_dsub>
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	2000      	movs	r0, #0
 800453a:	4939      	ldr	r1, [pc, #228]	; (8004620 <__ieee754_pow+0xa20>)
 800453c:	f7fb fe0c 	bl	8000158 <__aeabi_dsub>
 8004540:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004544:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004548:	da29      	bge.n	800459e <__ieee754_pow+0x99e>
 800454a:	4652      	mov	r2, sl
 800454c:	f000 f874 	bl	8004638 <scalbn>
 8004550:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004554:	f7ff bbfd 	b.w	8003d52 <__ieee754_pow+0x152>
 8004558:	4b32      	ldr	r3, [pc, #200]	; (8004624 <__ieee754_pow+0xa24>)
 800455a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800455e:	429f      	cmp	r7, r3
 8004560:	f77f af14 	ble.w	800438c <__ieee754_pow+0x78c>
 8004564:	4b30      	ldr	r3, [pc, #192]	; (8004628 <__ieee754_pow+0xa28>)
 8004566:	440b      	add	r3, r1
 8004568:	4303      	orrs	r3, r0
 800456a:	d009      	beq.n	8004580 <__ieee754_pow+0x980>
 800456c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004570:	2200      	movs	r2, #0
 8004572:	2300      	movs	r3, #0
 8004574:	f7fc fa1a 	bl	80009ac <__aeabi_dcmplt>
 8004578:	3800      	subs	r0, #0
 800457a:	bf18      	it	ne
 800457c:	2001      	movne	r0, #1
 800457e:	e452      	b.n	8003e26 <__ieee754_pow+0x226>
 8004580:	4622      	mov	r2, r4
 8004582:	462b      	mov	r3, r5
 8004584:	f7fb fde8 	bl	8000158 <__aeabi_dsub>
 8004588:	4642      	mov	r2, r8
 800458a:	464b      	mov	r3, r9
 800458c:	f7fc fa22 	bl	80009d4 <__aeabi_dcmpge>
 8004590:	2800      	cmp	r0, #0
 8004592:	f43f aefb 	beq.w	800438c <__ieee754_pow+0x78c>
 8004596:	e7e9      	b.n	800456c <__ieee754_pow+0x96c>
 8004598:	f04f 0a00 	mov.w	sl, #0
 800459c:	e720      	b.n	80043e0 <__ieee754_pow+0x7e0>
 800459e:	4621      	mov	r1, r4
 80045a0:	e7d6      	b.n	8004550 <__ieee754_pow+0x950>
 80045a2:	f04f 0b00 	mov.w	fp, #0
 80045a6:	f8df c078 	ldr.w	ip, [pc, #120]	; 8004620 <__ieee754_pow+0xa20>
 80045aa:	f7ff bbb9 	b.w	8003d20 <__ieee754_pow+0x120>
 80045ae:	f04f 0b00 	mov.w	fp, #0
 80045b2:	f04f 0c00 	mov.w	ip, #0
 80045b6:	f7ff bbb3 	b.w	8003d20 <__ieee754_pow+0x120>
 80045ba:	4640      	mov	r0, r8
 80045bc:	4649      	mov	r1, r9
 80045be:	f7ff bb3c 	b.w	8003c3a <__ieee754_pow+0x3a>
 80045c2:	9200      	str	r2, [sp, #0]
 80045c4:	f7ff bb88 	b.w	8003cd8 <__ieee754_pow+0xd8>
 80045c8:	2300      	movs	r3, #0
 80045ca:	f7ff bb72 	b.w	8003cb2 <__ieee754_pow+0xb2>
 80045ce:	bf00      	nop
 80045d0:	652b82fe 	.word	0x652b82fe
 80045d4:	3c971547 	.word	0x3c971547
 80045d8:	00000000 	.word	0x00000000
 80045dc:	3fe62e43 	.word	0x3fe62e43
 80045e0:	fefa39ef 	.word	0xfefa39ef
 80045e4:	3fe62e42 	.word	0x3fe62e42
 80045e8:	0ca86c39 	.word	0x0ca86c39
 80045ec:	be205c61 	.word	0xbe205c61
 80045f0:	72bea4d0 	.word	0x72bea4d0
 80045f4:	3e663769 	.word	0x3e663769
 80045f8:	c5d26bf1 	.word	0xc5d26bf1
 80045fc:	3ebbbd41 	.word	0x3ebbbd41
 8004600:	af25de2c 	.word	0xaf25de2c
 8004604:	3f11566a 	.word	0x3f11566a
 8004608:	16bebd93 	.word	0x16bebd93
 800460c:	3f66c16c 	.word	0x3f66c16c
 8004610:	5555553e 	.word	0x5555553e
 8004614:	3fc55555 	.word	0x3fc55555
 8004618:	3fe00000 	.word	0x3fe00000
 800461c:	fff00000 	.word	0xfff00000
 8004620:	3ff00000 	.word	0x3ff00000
 8004624:	4090cbff 	.word	0x4090cbff
 8004628:	3f6f3400 	.word	0x3f6f3400

0800462c <fabs>:
 800462c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004630:	4619      	mov	r1, r3
 8004632:	4770      	bx	lr
 8004634:	0000      	movs	r0, r0
	...

08004638 <scalbn>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	4616      	mov	r6, r2
 800463c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004640:	4604      	mov	r4, r0
 8004642:	460d      	mov	r5, r1
 8004644:	460b      	mov	r3, r1
 8004646:	b992      	cbnz	r2, 800466e <scalbn+0x36>
 8004648:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800464c:	4303      	orrs	r3, r0
 800464e:	d03c      	beq.n	80046ca <scalbn+0x92>
 8004650:	4b31      	ldr	r3, [pc, #196]	; (8004718 <scalbn+0xe0>)
 8004652:	2200      	movs	r2, #0
 8004654:	f7fb ff38 	bl	80004c8 <__aeabi_dmul>
 8004658:	4b30      	ldr	r3, [pc, #192]	; (800471c <scalbn+0xe4>)
 800465a:	4604      	mov	r4, r0
 800465c:	429e      	cmp	r6, r3
 800465e:	460d      	mov	r5, r1
 8004660:	da0f      	bge.n	8004682 <scalbn+0x4a>
 8004662:	a329      	add	r3, pc, #164	; (adr r3, 8004708 <scalbn+0xd0>)
 8004664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004668:	f7fb ff2e 	bl	80004c8 <__aeabi_dmul>
 800466c:	e006      	b.n	800467c <scalbn+0x44>
 800466e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8004672:	42ba      	cmp	r2, r7
 8004674:	d109      	bne.n	800468a <scalbn+0x52>
 8004676:	4602      	mov	r2, r0
 8004678:	f7fb fd70 	bl	800015c <__adddf3>
 800467c:	4604      	mov	r4, r0
 800467e:	460d      	mov	r5, r1
 8004680:	e023      	b.n	80046ca <scalbn+0x92>
 8004682:	460b      	mov	r3, r1
 8004684:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004688:	3a36      	subs	r2, #54	; 0x36
 800468a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800468e:	428e      	cmp	r6, r1
 8004690:	dd0e      	ble.n	80046b0 <scalbn+0x78>
 8004692:	a31f      	add	r3, pc, #124	; (adr r3, 8004710 <scalbn+0xd8>)
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800469c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80046a0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80046a4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80046a8:	481d      	ldr	r0, [pc, #116]	; (8004720 <scalbn+0xe8>)
 80046aa:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80046ae:	e7db      	b.n	8004668 <scalbn+0x30>
 80046b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80046b4:	4432      	add	r2, r6
 80046b6:	428a      	cmp	r2, r1
 80046b8:	dceb      	bgt.n	8004692 <scalbn+0x5a>
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	dd08      	ble.n	80046d0 <scalbn+0x98>
 80046be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80046c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80046c6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80046ca:	4620      	mov	r0, r4
 80046cc:	4629      	mov	r1, r5
 80046ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046d0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80046d4:	da0c      	bge.n	80046f0 <scalbn+0xb8>
 80046d6:	a30c      	add	r3, pc, #48	; (adr r3, 8004708 <scalbn+0xd0>)
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80046e0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80046e4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80046e8:	480e      	ldr	r0, [pc, #56]	; (8004724 <scalbn+0xec>)
 80046ea:	f041 011f 	orr.w	r1, r1, #31
 80046ee:	e7bb      	b.n	8004668 <scalbn+0x30>
 80046f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80046f4:	3236      	adds	r2, #54	; 0x36
 80046f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80046fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80046fe:	4620      	mov	r0, r4
 8004700:	4629      	mov	r1, r5
 8004702:	2200      	movs	r2, #0
 8004704:	4b08      	ldr	r3, [pc, #32]	; (8004728 <scalbn+0xf0>)
 8004706:	e7af      	b.n	8004668 <scalbn+0x30>
 8004708:	c2f8f359 	.word	0xc2f8f359
 800470c:	01a56e1f 	.word	0x01a56e1f
 8004710:	8800759c 	.word	0x8800759c
 8004714:	7e37e43c 	.word	0x7e37e43c
 8004718:	43500000 	.word	0x43500000
 800471c:	ffff3cb0 	.word	0xffff3cb0
 8004720:	8800759c 	.word	0x8800759c
 8004724:	c2f8f359 	.word	0xc2f8f359
 8004728:	3c900000 	.word	0x3c900000

0800472c <with_errno>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	4604      	mov	r4, r0
 8004730:	460d      	mov	r5, r1
 8004732:	4616      	mov	r6, r2
 8004734:	f7ff f9cc 	bl	8003ad0 <__errno>
 8004738:	4629      	mov	r1, r5
 800473a:	6006      	str	r6, [r0, #0]
 800473c:	4620      	mov	r0, r4
 800473e:	bd70      	pop	{r4, r5, r6, pc}

08004740 <xflow>:
 8004740:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004742:	4615      	mov	r5, r2
 8004744:	461c      	mov	r4, r3
 8004746:	b180      	cbz	r0, 800476a <xflow+0x2a>
 8004748:	4610      	mov	r0, r2
 800474a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800474e:	e9cd 0100 	strd	r0, r1, [sp]
 8004752:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004756:	4628      	mov	r0, r5
 8004758:	4621      	mov	r1, r4
 800475a:	f7fb feb5 	bl	80004c8 <__aeabi_dmul>
 800475e:	2222      	movs	r2, #34	; 0x22
 8004760:	b003      	add	sp, #12
 8004762:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004766:	f7ff bfe1 	b.w	800472c <with_errno>
 800476a:	4610      	mov	r0, r2
 800476c:	4619      	mov	r1, r3
 800476e:	e7ee      	b.n	800474e <xflow+0xe>

08004770 <__math_uflow>:
 8004770:	2200      	movs	r2, #0
 8004772:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004776:	f7ff bfe3 	b.w	8004740 <xflow>

0800477a <__math_oflow>:
 800477a:	2200      	movs	r2, #0
 800477c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004780:	f7ff bfde 	b.w	8004740 <xflow>

08004784 <__ieee754_sqrt>:
 8004784:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8004928 <__ieee754_sqrt+0x1a4>
 8004788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478c:	ea3c 0c01 	bics.w	ip, ip, r1
 8004790:	460b      	mov	r3, r1
 8004792:	4606      	mov	r6, r0
 8004794:	460d      	mov	r5, r1
 8004796:	460a      	mov	r2, r1
 8004798:	4604      	mov	r4, r0
 800479a:	d10e      	bne.n	80047ba <__ieee754_sqrt+0x36>
 800479c:	4602      	mov	r2, r0
 800479e:	f7fb fe93 	bl	80004c8 <__aeabi_dmul>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	4630      	mov	r0, r6
 80047a8:	4629      	mov	r1, r5
 80047aa:	f7fb fcd7 	bl	800015c <__adddf3>
 80047ae:	4606      	mov	r6, r0
 80047b0:	460d      	mov	r5, r1
 80047b2:	4630      	mov	r0, r6
 80047b4:	4629      	mov	r1, r5
 80047b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ba:	2900      	cmp	r1, #0
 80047bc:	dc0d      	bgt.n	80047da <__ieee754_sqrt+0x56>
 80047be:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80047c2:	ea5c 0c00 	orrs.w	ip, ip, r0
 80047c6:	d0f4      	beq.n	80047b2 <__ieee754_sqrt+0x2e>
 80047c8:	b139      	cbz	r1, 80047da <__ieee754_sqrt+0x56>
 80047ca:	4602      	mov	r2, r0
 80047cc:	f7fb fcc4 	bl	8000158 <__aeabi_dsub>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	f7fb ffa2 	bl	800071c <__aeabi_ddiv>
 80047d8:	e7e9      	b.n	80047ae <__ieee754_sqrt+0x2a>
 80047da:	1512      	asrs	r2, r2, #20
 80047dc:	f000 8089 	beq.w	80048f2 <__ieee754_sqrt+0x16e>
 80047e0:	2500      	movs	r5, #0
 80047e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047e6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80047ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ee:	07d2      	lsls	r2, r2, #31
 80047f0:	bf5c      	itt	pl
 80047f2:	005b      	lslpl	r3, r3, #1
 80047f4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80047f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80047fc:	bf58      	it	pl
 80047fe:	0064      	lslpl	r4, r4, #1
 8004800:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004804:	0062      	lsls	r2, r4, #1
 8004806:	2016      	movs	r0, #22
 8004808:	4629      	mov	r1, r5
 800480a:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 800480e:	1076      	asrs	r6, r6, #1
 8004810:	190f      	adds	r7, r1, r4
 8004812:	429f      	cmp	r7, r3
 8004814:	bfde      	ittt	le
 8004816:	1bdb      	suble	r3, r3, r7
 8004818:	1939      	addle	r1, r7, r4
 800481a:	192d      	addle	r5, r5, r4
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	3801      	subs	r0, #1
 8004820:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004824:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004828:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800482c:	d1f0      	bne.n	8004810 <__ieee754_sqrt+0x8c>
 800482e:	4604      	mov	r4, r0
 8004830:	2720      	movs	r7, #32
 8004832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8004836:	428b      	cmp	r3, r1
 8004838:	eb0c 0e00 	add.w	lr, ip, r0
 800483c:	dc02      	bgt.n	8004844 <__ieee754_sqrt+0xc0>
 800483e:	d113      	bne.n	8004868 <__ieee754_sqrt+0xe4>
 8004840:	4596      	cmp	lr, r2
 8004842:	d811      	bhi.n	8004868 <__ieee754_sqrt+0xe4>
 8004844:	f1be 0f00 	cmp.w	lr, #0
 8004848:	eb0e 000c 	add.w	r0, lr, ip
 800484c:	da56      	bge.n	80048fc <__ieee754_sqrt+0x178>
 800484e:	2800      	cmp	r0, #0
 8004850:	db54      	blt.n	80048fc <__ieee754_sqrt+0x178>
 8004852:	f101 0801 	add.w	r8, r1, #1
 8004856:	1a5b      	subs	r3, r3, r1
 8004858:	4641      	mov	r1, r8
 800485a:	4596      	cmp	lr, r2
 800485c:	bf88      	it	hi
 800485e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004862:	eba2 020e 	sub.w	r2, r2, lr
 8004866:	4464      	add	r4, ip
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	3f01      	subs	r7, #1
 800486c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8004870:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004874:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8004878:	d1dd      	bne.n	8004836 <__ieee754_sqrt+0xb2>
 800487a:	4313      	orrs	r3, r2
 800487c:	d01b      	beq.n	80048b6 <__ieee754_sqrt+0x132>
 800487e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800492c <__ieee754_sqrt+0x1a8>
 8004882:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8004930 <__ieee754_sqrt+0x1ac>
 8004886:	e9da 0100 	ldrd	r0, r1, [sl]
 800488a:	e9db 2300 	ldrd	r2, r3, [fp]
 800488e:	f7fb fc63 	bl	8000158 <__aeabi_dsub>
 8004892:	e9da 8900 	ldrd	r8, r9, [sl]
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4640      	mov	r0, r8
 800489c:	4649      	mov	r1, r9
 800489e:	f7fc f88f 	bl	80009c0 <__aeabi_dcmple>
 80048a2:	b140      	cbz	r0, 80048b6 <__ieee754_sqrt+0x132>
 80048a4:	e9da 0100 	ldrd	r0, r1, [sl]
 80048a8:	e9db 2300 	ldrd	r2, r3, [fp]
 80048ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 80048b0:	d126      	bne.n	8004900 <__ieee754_sqrt+0x17c>
 80048b2:	463c      	mov	r4, r7
 80048b4:	3501      	adds	r5, #1
 80048b6:	106b      	asrs	r3, r5, #1
 80048b8:	0864      	lsrs	r4, r4, #1
 80048ba:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80048be:	07ea      	lsls	r2, r5, #31
 80048c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80048c4:	bf48      	it	mi
 80048c6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80048ca:	4620      	mov	r0, r4
 80048cc:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80048d0:	e76d      	b.n	80047ae <__ieee754_sqrt+0x2a>
 80048d2:	0ae3      	lsrs	r3, r4, #11
 80048d4:	3915      	subs	r1, #21
 80048d6:	0564      	lsls	r4, r4, #21
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0fa      	beq.n	80048d2 <__ieee754_sqrt+0x14e>
 80048dc:	02d8      	lsls	r0, r3, #11
 80048de:	d50a      	bpl.n	80048f6 <__ieee754_sqrt+0x172>
 80048e0:	f1c2 0020 	rsb	r0, r2, #32
 80048e4:	fa24 f000 	lsr.w	r0, r4, r0
 80048e8:	1e55      	subs	r5, r2, #1
 80048ea:	4094      	lsls	r4, r2
 80048ec:	4303      	orrs	r3, r0
 80048ee:	1b4a      	subs	r2, r1, r5
 80048f0:	e776      	b.n	80047e0 <__ieee754_sqrt+0x5c>
 80048f2:	4611      	mov	r1, r2
 80048f4:	e7f0      	b.n	80048d8 <__ieee754_sqrt+0x154>
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	3201      	adds	r2, #1
 80048fa:	e7ef      	b.n	80048dc <__ieee754_sqrt+0x158>
 80048fc:	4688      	mov	r8, r1
 80048fe:	e7aa      	b.n	8004856 <__ieee754_sqrt+0xd2>
 8004900:	f7fb fc2c 	bl	800015c <__adddf3>
 8004904:	e9da 8900 	ldrd	r8, r9, [sl]
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	4640      	mov	r0, r8
 800490e:	4649      	mov	r1, r9
 8004910:	f7fc f84c 	bl	80009ac <__aeabi_dcmplt>
 8004914:	b120      	cbz	r0, 8004920 <__ieee754_sqrt+0x19c>
 8004916:	1ca1      	adds	r1, r4, #2
 8004918:	bf08      	it	eq
 800491a:	3501      	addeq	r5, #1
 800491c:	3402      	adds	r4, #2
 800491e:	e7ca      	b.n	80048b6 <__ieee754_sqrt+0x132>
 8004920:	3401      	adds	r4, #1
 8004922:	f024 0401 	bic.w	r4, r4, #1
 8004926:	e7c6      	b.n	80048b6 <__ieee754_sqrt+0x132>
 8004928:	7ff00000 	.word	0x7ff00000
 800492c:	20000060 	.word	0x20000060
 8004930:	20000068 	.word	0x20000068

08004934 <_init>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	bf00      	nop
 8004938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493a:	bc08      	pop	{r3}
 800493c:	469e      	mov	lr, r3
 800493e:	4770      	bx	lr

08004940 <_fini>:
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004942:	bf00      	nop
 8004944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004946:	bc08      	pop	{r3}
 8004948:	469e      	mov	lr, r3
 800494a:	4770      	bx	lr
