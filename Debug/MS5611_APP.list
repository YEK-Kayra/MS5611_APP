
MS5611_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080027b8  080027b8  000127b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027ec  080027ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027ec  080027ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027ec  080027ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027ec  080027ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027f0  080027f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000010  08002800  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002800  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000064a0  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013cc  00000000  00000000  00026518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e0  00000000  00000000  000278e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000541  00000000  00000000  00027fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016619  00000000  00000000  00028509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000915e  00000000  00000000  0003eb22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fae3  00000000  00000000  00047c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b50  00000000  00000000  000c7764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c92b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080027a0 	.word	0x080027a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080027a0 	.word	0x080027a0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fac2 	bl	80006d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f812 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f884 	bl	8000264 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f854 	bl	8000208 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
#ifdef MS5611_H_

  MS5611.I2C_ADDRESS = MS5611_I2C_ADDRESS;
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <main+0x28>)
 8000162:	22ee      	movs	r2, #238	; 0xee
 8000164:	809a      	strh	r2, [r3, #4]
  MS5611.i2c = &hi2c1;
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <main+0x28>)
 8000168:	4a03      	ldr	r2, [pc, #12]	; (8000178 <main+0x2c>)
 800016a:	601a      	str	r2, [r3, #0]
  MS5611_Init(&MS5611);
 800016c:	4801      	ldr	r0, [pc, #4]	; (8000174 <main+0x28>)
 800016e:	f000 f8ad 	bl	80002cc <MS5611_Init>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000172:	e7fe      	b.n	8000172 <main+0x26>
 8000174:	20000030 	.word	0x20000030
 8000178:	20000088 	.word	0x20000088

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b090      	sub	sp, #64	; 0x40
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0318 	add.w	r3, r7, #24
 8000186:	2228      	movs	r2, #40	; 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f002 fadc 	bl	8002748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]
 800019c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019e:	2301      	movs	r3, #1
 80001a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a8:	2300      	movs	r3, #0
 80001aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2301      	movs	r3, #1
 80001ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b0:	2302      	movs	r3, #2
 80001b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	f107 0318 	add.w	r3, r7, #24
 80001c4:	4618      	mov	r0, r3
 80001c6:	f001 fec3 	bl	8001f50 <HAL_RCC_OscConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001d0:	f000 f876 	bl	80002c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d4:	230f      	movs	r3, #15
 80001d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d8:	2302      	movs	r3, #2
 80001da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2102      	movs	r1, #2
 80001ee:	4618      	mov	r0, r3
 80001f0:	f002 f930 	bl	8002454 <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001fa:	f000 f861 	bl	80002c0 <Error_Handler>
  }
}
 80001fe:	bf00      	nop
 8000200:	3740      	adds	r7, #64	; 0x40
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800020c:	4b12      	ldr	r3, [pc, #72]	; (8000258 <MX_I2C1_Init+0x50>)
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <MX_I2C1_Init+0x54>)
 8000210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000212:	4b11      	ldr	r3, [pc, #68]	; (8000258 <MX_I2C1_Init+0x50>)
 8000214:	4a12      	ldr	r2, [pc, #72]	; (8000260 <MX_I2C1_Init+0x58>)
 8000216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000218:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <MX_I2C1_Init+0x50>)
 800021a:	2200      	movs	r2, #0
 800021c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800021e:	4b0e      	ldr	r3, [pc, #56]	; (8000258 <MX_I2C1_Init+0x50>)
 8000220:	2200      	movs	r2, #0
 8000222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000224:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <MX_I2C1_Init+0x50>)
 8000226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800022a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800022c:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <MX_I2C1_Init+0x50>)
 800022e:	2200      	movs	r2, #0
 8000230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000232:	4b09      	ldr	r3, [pc, #36]	; (8000258 <MX_I2C1_Init+0x50>)
 8000234:	2200      	movs	r2, #0
 8000236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000238:	4b07      	ldr	r3, [pc, #28]	; (8000258 <MX_I2C1_Init+0x50>)
 800023a:	2200      	movs	r2, #0
 800023c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800023e:	4b06      	ldr	r3, [pc, #24]	; (8000258 <MX_I2C1_Init+0x50>)
 8000240:	2200      	movs	r2, #0
 8000242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <MX_I2C1_Init+0x50>)
 8000246:	f000 fd21 	bl	8000c8c <HAL_I2C_Init>
 800024a:	4603      	mov	r3, r0
 800024c:	2b00      	cmp	r3, #0
 800024e:	d001      	beq.n	8000254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000250:	f000 f836 	bl	80002c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}
 8000258:	20000088 	.word	0x20000088
 800025c:	40005400 	.word	0x40005400
 8000260:	000186a0 	.word	0x000186a0

08000264 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800026a:	4b14      	ldr	r3, [pc, #80]	; (80002bc <MX_GPIO_Init+0x58>)
 800026c:	699b      	ldr	r3, [r3, #24]
 800026e:	4a13      	ldr	r2, [pc, #76]	; (80002bc <MX_GPIO_Init+0x58>)
 8000270:	f043 0320 	orr.w	r3, r3, #32
 8000274:	6193      	str	r3, [r2, #24]
 8000276:	4b11      	ldr	r3, [pc, #68]	; (80002bc <MX_GPIO_Init+0x58>)
 8000278:	699b      	ldr	r3, [r3, #24]
 800027a:	f003 0320 	and.w	r3, r3, #32
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <MX_GPIO_Init+0x58>)
 8000284:	699b      	ldr	r3, [r3, #24]
 8000286:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <MX_GPIO_Init+0x58>)
 8000288:	f043 0304 	orr.w	r3, r3, #4
 800028c:	6193      	str	r3, [r2, #24]
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <MX_GPIO_Init+0x58>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	f003 0304 	and.w	r3, r3, #4
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029a:	4b08      	ldr	r3, [pc, #32]	; (80002bc <MX_GPIO_Init+0x58>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	4a07      	ldr	r2, [pc, #28]	; (80002bc <MX_GPIO_Init+0x58>)
 80002a0:	f043 0308 	orr.w	r3, r3, #8
 80002a4:	6193      	str	r3, [r2, #24]
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <MX_GPIO_Init+0x58>)
 80002a8:	699b      	ldr	r3, [r3, #24]
 80002aa:	f003 0308 	and.w	r3, r3, #8
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002b2:	bf00      	nop
 80002b4:	3714      	adds	r7, #20
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40021000 	.word	0x40021000

080002c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c4:	b672      	cpsid	i
}
 80002c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002c8:	e7fe      	b.n	80002c8 <Error_Handler+0x8>
	...

080002cc <MS5611_Init>:

#include "ms5611.h"

MS5611_StatusTypeDef MS5611_Init(MS5611_HandleTypeDef *dev){
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]

	 if(HAL_I2C_IsDeviceReady(dev->i2c, dev->I2C_ADDRESS, 1, 1000) != HAL_OK){
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	6818      	ldr	r0, [r3, #0]
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	8899      	ldrh	r1, [r3, #4]
 80002dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002e0:	2201      	movs	r2, #1
 80002e2:	f001 f981 	bl	80015e8 <HAL_I2C_IsDeviceReady>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d005      	beq.n	80002f8 <MS5611_Init+0x2c>

			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <MS5611_Init+0x3c>)
 80002f4:	f000 fcb2 	bl	8000c5c <HAL_GPIO_WritePin>

	 }

	MS5611_Get_CalibCoeff(dev);
 80002f8:	6878      	ldr	r0, [r7, #4]
 80002fa:	f000 f807 	bl	800030c <MS5611_Get_CalibCoeff>

		return MS5611_OK;
 80002fe:	2300      	movs	r3, #0
}
 8000300:	4618      	mov	r0, r3
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40011000 	.word	0x40011000

0800030c <MS5611_Get_CalibCoeff>:

	}

}

MS5611_StatusTypeDef MS5611_Get_CalibCoeff(MS5611_HandleTypeDef *dev){
 800030c:	b580      	push	{r7, lr}
 800030e:	b08e      	sub	sp, #56	; 0x38
 8000310:	af02      	add	r7, sp, #8
 8000312:	6078      	str	r0, [r7, #4]

	uint8_t CalibCoefAddrss[7] = {0xA2, //C1
 8000314:	4a8c      	ldr	r2, [pc, #560]	; (8000548 <MS5611_Get_CalibCoeff+0x23c>)
 8000316:	f107 0320 	add.w	r3, r7, #32
 800031a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800031e:	6018      	str	r0, [r3, #0]
 8000320:	3304      	adds	r3, #4
 8000322:	8019      	strh	r1, [r3, #0]
 8000324:	3302      	adds	r3, #2
 8000326:	0c0a      	lsrs	r2, r1, #16
 8000328:	701a      	strb	r2, [r3, #0]
								  0xA8, //C4
								  0xAA, //C5
								  0xAC, //C6
								  0xAE}; /*! The last address is for CRC*/

	uint8_t TempryCalibCoefVal[2] = {0};
 800032a:	2300      	movs	r3, #0
 800032c:	83bb      	strh	r3, [r7, #28]
	uint8_t CalibCoefVal[14] = {0};
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	811a      	strh	r2, [r3, #8]
	uint8_t cnt = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	for(cnt = 0; cnt <= 6 ; cnt++){
 8000344:	2300      	movs	r3, #0
 8000346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800034a:	e03b      	b.n	80003c4 <MS5611_Get_CalibCoeff+0xb8>

		HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &CalibCoefAddrss[cnt], 1, 1000);
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	6818      	ldr	r0, [r3, #0]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	8899      	ldrh	r1, [r3, #4]
 8000354:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000358:	f107 0220 	add.w	r2, r7, #32
 800035c:	441a      	add	r2, r3
 800035e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	2301      	movs	r3, #1
 8000366:	f000 fdd5 	bl	8000f14 <HAL_I2C_Master_Transmit>

		for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 800036a:	2300      	movs	r3, #0
 800036c:	62bb      	str	r3, [r7, #40]	; 0x28
 800036e:	e010      	b.n	8000392 <MS5611_Get_CalibCoeff+0x86>

			HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &TempryCalibCoefVal[cnt_2], 2, 1000);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	6818      	ldr	r0, [r3, #0]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	8899      	ldrh	r1, [r3, #4]
 8000378:	f107 021c 	add.w	r2, r7, #28
 800037c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800037e:	441a      	add	r2, r3
 8000380:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	2302      	movs	r3, #2
 8000388:	f000 fec2 	bl	8001110 <HAL_I2C_Master_Receive>
		for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 800038c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800038e:	3301      	adds	r3, #1
 8000390:	62bb      	str	r3, [r7, #40]	; 0x28
 8000392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000394:	2b01      	cmp	r3, #1
 8000396:	ddeb      	ble.n	8000370 <MS5611_Get_CalibCoeff+0x64>

		}

		CalibCoefVal[(cnt*2)]   = TempryCalibCoefVal[0];
 8000398:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	7f3a      	ldrb	r2, [r7, #28]
 80003a0:	3330      	adds	r3, #48	; 0x30
 80003a2:	443b      	add	r3, r7
 80003a4:	f803 2c24 	strb.w	r2, [r3, #-36]
		CalibCoefVal[(cnt*2+1)] = TempryCalibCoefVal[1];
 80003a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	3301      	adds	r3, #1
 80003b0:	7f7a      	ldrb	r2, [r7, #29]
 80003b2:	3330      	adds	r3, #48	; 0x30
 80003b4:	443b      	add	r3, r7
 80003b6:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(cnt = 0; cnt <= 6 ; cnt++){
 80003ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003be:	3301      	adds	r3, #1
 80003c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80003c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003c8:	2b06      	cmp	r3, #6
 80003ca:	d9bf      	bls.n	800034c <MS5611_Get_CalibCoeff+0x40>

	}
	cnt = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	dev->Clb_Cf.C1  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80003d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003d6:	3330      	adds	r3, #48	; 0x30
 80003d8:	443b      	add	r3, r7
 80003da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80003de:	021b      	lsls	r3, r3, #8
 80003e0:	b21a      	sxth	r2, r3
 80003e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003e6:	3301      	adds	r3, #1
 80003e8:	3330      	adds	r3, #48	; 0x30
 80003ea:	443b      	add	r3, r7
 80003ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80003f0:	b21b      	sxth	r3, r3
 80003f2:	4313      	orrs	r3, r2
 80003f4:	b21b      	sxth	r3, r3
 80003f6:	b29a      	uxth	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	80da      	strh	r2, [r3, #6]
 80003fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000400:	3302      	adds	r3, #2
 8000402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C2  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8000406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800040a:	3330      	adds	r3, #48	; 0x30
 800040c:	443b      	add	r3, r7
 800040e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000412:	021b      	lsls	r3, r3, #8
 8000414:	b21a      	sxth	r2, r3
 8000416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800041a:	3301      	adds	r3, #1
 800041c:	3330      	adds	r3, #48	; 0x30
 800041e:	443b      	add	r3, r7
 8000420:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000424:	b21b      	sxth	r3, r3
 8000426:	4313      	orrs	r3, r2
 8000428:	b21b      	sxth	r3, r3
 800042a:	b29a      	uxth	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	811a      	strh	r2, [r3, #8]
 8000430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000434:	3302      	adds	r3, #2
 8000436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C3  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 800043a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800043e:	3330      	adds	r3, #48	; 0x30
 8000440:	443b      	add	r3, r7
 8000442:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000446:	021b      	lsls	r3, r3, #8
 8000448:	b21a      	sxth	r2, r3
 800044a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800044e:	3301      	adds	r3, #1
 8000450:	3330      	adds	r3, #48	; 0x30
 8000452:	443b      	add	r3, r7
 8000454:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000458:	b21b      	sxth	r3, r3
 800045a:	4313      	orrs	r3, r2
 800045c:	b21b      	sxth	r3, r3
 800045e:	b29a      	uxth	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	815a      	strh	r2, [r3, #10]
 8000464:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000468:	3302      	adds	r3, #2
 800046a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C4  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 800046e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000472:	3330      	adds	r3, #48	; 0x30
 8000474:	443b      	add	r3, r7
 8000476:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800047a:	021b      	lsls	r3, r3, #8
 800047c:	b21a      	sxth	r2, r3
 800047e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000482:	3301      	adds	r3, #1
 8000484:	3330      	adds	r3, #48	; 0x30
 8000486:	443b      	add	r3, r7
 8000488:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800048c:	b21b      	sxth	r3, r3
 800048e:	4313      	orrs	r3, r2
 8000490:	b21b      	sxth	r3, r3
 8000492:	b29a      	uxth	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	819a      	strh	r2, [r3, #12]
 8000498:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800049c:	3302      	adds	r3, #2
 800049e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C5  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80004a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004a6:	3330      	adds	r3, #48	; 0x30
 80004a8:	443b      	add	r3, r7
 80004aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80004ae:	021b      	lsls	r3, r3, #8
 80004b0:	b21a      	sxth	r2, r3
 80004b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004b6:	3301      	adds	r3, #1
 80004b8:	3330      	adds	r3, #48	; 0x30
 80004ba:	443b      	add	r3, r7
 80004bc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80004c0:	b21b      	sxth	r3, r3
 80004c2:	4313      	orrs	r3, r2
 80004c4:	b21b      	sxth	r3, r3
 80004c6:	b29a      	uxth	r2, r3
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	81da      	strh	r2, [r3, #14]
 80004cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004d0:	3302      	adds	r3, #2
 80004d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.C6  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80004d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004da:	3330      	adds	r3, #48	; 0x30
 80004dc:	443b      	add	r3, r7
 80004de:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80004e2:	021b      	lsls	r3, r3, #8
 80004e4:	b21a      	sxth	r2, r3
 80004e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80004ea:	3301      	adds	r3, #1
 80004ec:	3330      	adds	r3, #48	; 0x30
 80004ee:	443b      	add	r3, r7
 80004f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80004f4:	b21b      	sxth	r3, r3
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b21b      	sxth	r3, r3
 80004fa:	b29a      	uxth	r2, r3
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	821a      	strh	r2, [r3, #16]
 8000500:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000504:	3302      	adds	r3, #2
 8000506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	dev->Clb_Cf.crc = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 800050a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800050e:	3330      	adds	r3, #48	; 0x30
 8000510:	443b      	add	r3, r7
 8000512:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000516:	021b      	lsls	r3, r3, #8
 8000518:	b21a      	sxth	r2, r3
 800051a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800051e:	3301      	adds	r3, #1
 8000520:	3330      	adds	r3, #48	; 0x30
 8000522:	443b      	add	r3, r7
 8000524:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000528:	b21b      	sxth	r3, r3
 800052a:	4313      	orrs	r3, r2
 800052c:	b21b      	sxth	r3, r3
 800052e:	b29a      	uxth	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	825a      	strh	r2, [r3, #18]
 8000534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000538:	3302      	adds	r3, #2
 800053a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

return MS5611_OK;
 800053e:	2300      	movs	r3, #0
}
 8000540:	4618      	mov	r0, r3
 8000542:	3730      	adds	r7, #48	; 0x30
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	080027b8 	.word	0x080027b8

0800054c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <HAL_MspInit+0x5c>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <HAL_MspInit+0x5c>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6193      	str	r3, [r2, #24]
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_MspInit+0x5c>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <HAL_MspInit+0x5c>)
 800056c:	69db      	ldr	r3, [r3, #28]
 800056e:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <HAL_MspInit+0x5c>)
 8000570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000574:	61d3      	str	r3, [r2, #28]
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <HAL_MspInit+0x5c>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <HAL_MspInit+0x60>)
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	4a04      	ldr	r2, [pc, #16]	; (80005ac <HAL_MspInit+0x60>)
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40010000 	.word	0x40010000

080005b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a16      	ldr	r2, [pc, #88]	; (8000624 <HAL_I2C_MspInit+0x74>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d125      	bne.n	800061c <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d0:	4b15      	ldr	r3, [pc, #84]	; (8000628 <HAL_I2C_MspInit+0x78>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a14      	ldr	r2, [pc, #80]	; (8000628 <HAL_I2C_MspInit+0x78>)
 80005d6:	f043 0308 	orr.w	r3, r3, #8
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_I2C_MspInit+0x78>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0308 	and.w	r3, r3, #8
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005e8:	23c0      	movs	r3, #192	; 0xc0
 80005ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ec:	2312      	movs	r3, #18
 80005ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	4619      	mov	r1, r3
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <HAL_I2C_MspInit+0x7c>)
 8000600:	f000 f9b0 	bl	8000964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_I2C_MspInit+0x78>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_I2C_MspInit+0x78>)
 800060a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800060e:	61d3      	str	r3, [r2, #28]
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <HAL_I2C_MspInit+0x78>)
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40005400 	.word	0x40005400
 8000628:	40021000 	.word	0x40021000
 800062c:	40010c00 	.word	0x40010c00

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <NMI_Handler+0x4>

08000636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <HardFault_Handler+0x4>

0800063c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000640:	e7fe      	b.n	8000640 <MemManage_Handler+0x4>

08000642 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <BusFault_Handler+0x4>

08000648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <UsageFault_Handler+0x4>

0800064e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr

0800065a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000676:	f000 f875 	bl	8000764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}

0800067e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
	...

0800068c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800068c:	f7ff fff7 	bl	800067e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480b      	ldr	r0, [pc, #44]	; (80006c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000692:	490c      	ldr	r1, [pc, #48]	; (80006c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000694:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a09      	ldr	r2, [pc, #36]	; (80006cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006a8:	4c09      	ldr	r4, [pc, #36]	; (80006d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b6:	f002 f84f 	bl	8002758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ba:	f7ff fd47 	bl	800014c <main>
  bx lr
 80006be:	4770      	bx	lr
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006c8:	080027f4 	.word	0x080027f4
  ldr r2, =_sbss
 80006cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80006d0:	200000e0 	.word	0x200000e0

080006d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d4:	e7fe      	b.n	80006d4 <ADC1_2_IRQHandler>
	...

080006d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006dc:	4b08      	ldr	r3, [pc, #32]	; (8000700 <HAL_Init+0x28>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a07      	ldr	r2, [pc, #28]	; (8000700 <HAL_Init+0x28>)
 80006e2:	f043 0310 	orr.w	r3, r3, #16
 80006e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e8:	2003      	movs	r0, #3
 80006ea:	f000 f907 	bl	80008fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ee:	200f      	movs	r0, #15
 80006f0:	f000 f808 	bl	8000704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f4:	f7ff ff2a 	bl	800054c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40022000 	.word	0x40022000

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <HAL_InitTick+0x54>)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_InitTick+0x58>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071a:	fbb3 f3f1 	udiv	r3, r3, r1
 800071e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f911 	bl	800094a <HAL_SYSTICK_Config>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	e00e      	b.n	8000750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2b0f      	cmp	r3, #15
 8000736:	d80a      	bhi.n	800074e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000738:	2200      	movs	r2, #0
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	f04f 30ff 	mov.w	r0, #4294967295
 8000740:	f000 f8e7 	bl	8000912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000744:	4a06      	ldr	r2, [pc, #24]	; (8000760 <HAL_InitTick+0x5c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800074a:	2300      	movs	r3, #0
 800074c:	e000      	b.n	8000750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
}
 8000750:	4618      	mov	r0, r3
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000000 	.word	0x20000000
 800075c:	20000008 	.word	0x20000008
 8000760:	20000004 	.word	0x20000004

08000764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_IncTick+0x1c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <HAL_IncTick+0x20>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4413      	add	r3, r2
 8000774:	4a03      	ldr	r2, [pc, #12]	; (8000784 <HAL_IncTick+0x20>)
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	20000008 	.word	0x20000008
 8000784:	200000dc 	.word	0x200000dc

08000788 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return uwTick;
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <HAL_GetTick+0x10>)
 800078e:	681b      	ldr	r3, [r3, #0]
}
 8000790:	4618      	mov	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	200000dc 	.word	0x200000dc

0800079c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ce:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	60d3      	str	r3, [r2, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <__NVIC_GetPriorityGrouping+0x18>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	f003 0307 	and.w	r3, r3, #7
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db0a      	blt.n	800082a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	490c      	ldr	r1, [pc, #48]	; (800084c <__NVIC_SetPriority+0x4c>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	440b      	add	r3, r1
 8000824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000828:	e00a      	b.n	8000840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <__NVIC_SetPriority+0x50>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	3b04      	subs	r3, #4
 8000838:	0112      	lsls	r2, r2, #4
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	440b      	add	r3, r1
 800083e:	761a      	strb	r2, [r3, #24]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f1c3 0307 	rsb	r3, r3, #7
 800086e:	2b04      	cmp	r3, #4
 8000870:	bf28      	it	cs
 8000872:	2304      	movcs	r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3304      	adds	r3, #4
 800087a:	2b06      	cmp	r3, #6
 800087c:	d902      	bls.n	8000884 <NVIC_EncodePriority+0x30>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3b03      	subs	r3, #3
 8000882:	e000      	b.n	8000886 <NVIC_EncodePriority+0x32>
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43da      	mvns	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	401a      	ands	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43d9      	mvns	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	4313      	orrs	r3, r2
         );
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3724      	adds	r7, #36	; 0x24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008c8:	d301      	bcc.n	80008ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ca:	2301      	movs	r3, #1
 80008cc:	e00f      	b.n	80008ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <SysTick_Config+0x40>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d6:	210f      	movs	r1, #15
 80008d8:	f04f 30ff 	mov.w	r0, #4294967295
 80008dc:	f7ff ff90 	bl	8000800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <SysTick_Config+0x40>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e6:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <SysTick_Config+0x40>)
 80008e8:	2207      	movs	r2, #7
 80008ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	e000e010 	.word	0xe000e010

080008fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff ff49 	bl	800079c <__NVIC_SetPriorityGrouping>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000924:	f7ff ff5e 	bl	80007e4 <__NVIC_GetPriorityGrouping>
 8000928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	68b9      	ldr	r1, [r7, #8]
 800092e:	6978      	ldr	r0, [r7, #20]
 8000930:	f7ff ff90 	bl	8000854 <NVIC_EncodePriority>
 8000934:	4602      	mov	r2, r0
 8000936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093a:	4611      	mov	r1, r2
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff5f 	bl	8000800 <__NVIC_SetPriority>
}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ffb0 	bl	80008b8 <SysTick_Config>
 8000958:	4603      	mov	r3, r0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000964:	b480      	push	{r7}
 8000966:	b08b      	sub	sp, #44	; 0x2c
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000976:	e161      	b.n	8000c3c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000978:	2201      	movs	r2, #1
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	69fa      	ldr	r2, [r7, #28]
 8000988:	4013      	ands	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	429a      	cmp	r2, r3
 8000992:	f040 8150 	bne.w	8000c36 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	4a97      	ldr	r2, [pc, #604]	; (8000bf8 <HAL_GPIO_Init+0x294>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d05e      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009a0:	4a95      	ldr	r2, [pc, #596]	; (8000bf8 <HAL_GPIO_Init+0x294>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d875      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009a6:	4a95      	ldr	r2, [pc, #596]	; (8000bfc <HAL_GPIO_Init+0x298>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d058      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009ac:	4a93      	ldr	r2, [pc, #588]	; (8000bfc <HAL_GPIO_Init+0x298>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d86f      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009b2:	4a93      	ldr	r2, [pc, #588]	; (8000c00 <HAL_GPIO_Init+0x29c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d052      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009b8:	4a91      	ldr	r2, [pc, #580]	; (8000c00 <HAL_GPIO_Init+0x29c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d869      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009be:	4a91      	ldr	r2, [pc, #580]	; (8000c04 <HAL_GPIO_Init+0x2a0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d04c      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009c4:	4a8f      	ldr	r2, [pc, #572]	; (8000c04 <HAL_GPIO_Init+0x2a0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d863      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009ca:	4a8f      	ldr	r2, [pc, #572]	; (8000c08 <HAL_GPIO_Init+0x2a4>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d046      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
 80009d0:	4a8d      	ldr	r2, [pc, #564]	; (8000c08 <HAL_GPIO_Init+0x2a4>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d85d      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009d6:	2b12      	cmp	r3, #18
 80009d8:	d82a      	bhi.n	8000a30 <HAL_GPIO_Init+0xcc>
 80009da:	2b12      	cmp	r3, #18
 80009dc:	d859      	bhi.n	8000a92 <HAL_GPIO_Init+0x12e>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <HAL_GPIO_Init+0x80>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	08000a5f 	.word	0x08000a5f
 80009e8:	08000a39 	.word	0x08000a39
 80009ec:	08000a4b 	.word	0x08000a4b
 80009f0:	08000a8d 	.word	0x08000a8d
 80009f4:	08000a93 	.word	0x08000a93
 80009f8:	08000a93 	.word	0x08000a93
 80009fc:	08000a93 	.word	0x08000a93
 8000a00:	08000a93 	.word	0x08000a93
 8000a04:	08000a93 	.word	0x08000a93
 8000a08:	08000a93 	.word	0x08000a93
 8000a0c:	08000a93 	.word	0x08000a93
 8000a10:	08000a93 	.word	0x08000a93
 8000a14:	08000a93 	.word	0x08000a93
 8000a18:	08000a93 	.word	0x08000a93
 8000a1c:	08000a93 	.word	0x08000a93
 8000a20:	08000a93 	.word	0x08000a93
 8000a24:	08000a93 	.word	0x08000a93
 8000a28:	08000a41 	.word	0x08000a41
 8000a2c:	08000a55 	.word	0x08000a55
 8000a30:	4a76      	ldr	r2, [pc, #472]	; (8000c0c <HAL_GPIO_Init+0x2a8>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d013      	beq.n	8000a5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a36:	e02c      	b.n	8000a92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	623b      	str	r3, [r7, #32]
          break;
 8000a3e:	e029      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	3304      	adds	r3, #4
 8000a46:	623b      	str	r3, [r7, #32]
          break;
 8000a48:	e024      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	3308      	adds	r3, #8
 8000a50:	623b      	str	r3, [r7, #32]
          break;
 8000a52:	e01f      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	330c      	adds	r3, #12
 8000a5a:	623b      	str	r3, [r7, #32]
          break;
 8000a5c:	e01a      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	689b      	ldr	r3, [r3, #8]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d102      	bne.n	8000a6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a66:	2304      	movs	r3, #4
 8000a68:	623b      	str	r3, [r7, #32]
          break;
 8000a6a:	e013      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d105      	bne.n	8000a80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a74:	2308      	movs	r3, #8
 8000a76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	69fa      	ldr	r2, [r7, #28]
 8000a7c:	611a      	str	r2, [r3, #16]
          break;
 8000a7e:	e009      	b.n	8000a94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a80:	2308      	movs	r3, #8
 8000a82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	69fa      	ldr	r2, [r7, #28]
 8000a88:	615a      	str	r2, [r3, #20]
          break;
 8000a8a:	e003      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
          break;
 8000a90:	e000      	b.n	8000a94 <HAL_GPIO_Init+0x130>
          break;
 8000a92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	2bff      	cmp	r3, #255	; 0xff
 8000a98:	d801      	bhi.n	8000a9e <HAL_GPIO_Init+0x13a>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	e001      	b.n	8000aa2 <HAL_GPIO_Init+0x13e>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	2bff      	cmp	r3, #255	; 0xff
 8000aa8:	d802      	bhi.n	8000ab0 <HAL_GPIO_Init+0x14c>
 8000aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aac:	009b      	lsls	r3, r3, #2
 8000aae:	e002      	b.n	8000ab6 <HAL_GPIO_Init+0x152>
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	3b08      	subs	r3, #8
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	210f      	movs	r1, #15
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	6a39      	ldr	r1, [r7, #32]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad0:	431a      	orrs	r2, r3
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f000 80a9 	beq.w	8000c36 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	; (8000c10 <HAL_GPIO_Init+0x2ac>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a49      	ldr	r2, [pc, #292]	; (8000c10 <HAL_GPIO_Init+0x2ac>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b47      	ldr	r3, [pc, #284]	; (8000c10 <HAL_GPIO_Init+0x2ac>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000afc:	4a45      	ldr	r2, [pc, #276]	; (8000c14 <HAL_GPIO_Init+0x2b0>)
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	3302      	adds	r3, #2
 8000b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	220f      	movs	r2, #15
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a3d      	ldr	r2, [pc, #244]	; (8000c18 <HAL_GPIO_Init+0x2b4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d00d      	beq.n	8000b44 <HAL_GPIO_Init+0x1e0>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a3c      	ldr	r2, [pc, #240]	; (8000c1c <HAL_GPIO_Init+0x2b8>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d007      	beq.n	8000b40 <HAL_GPIO_Init+0x1dc>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a3b      	ldr	r2, [pc, #236]	; (8000c20 <HAL_GPIO_Init+0x2bc>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d101      	bne.n	8000b3c <HAL_GPIO_Init+0x1d8>
 8000b38:	2302      	movs	r3, #2
 8000b3a:	e004      	b.n	8000b46 <HAL_GPIO_Init+0x1e2>
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e002      	b.n	8000b46 <HAL_GPIO_Init+0x1e2>
 8000b40:	2301      	movs	r3, #1
 8000b42:	e000      	b.n	8000b46 <HAL_GPIO_Init+0x1e2>
 8000b44:	2300      	movs	r3, #0
 8000b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b48:	f002 0203 	and.w	r2, r2, #3
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	4093      	lsls	r3, r2
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b56:	492f      	ldr	r1, [pc, #188]	; (8000c14 <HAL_GPIO_Init+0x2b0>)
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	089b      	lsrs	r3, r3, #2
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b70:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	492b      	ldr	r1, [pc, #172]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	608b      	str	r3, [r1, #8]
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b7e:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4927      	ldr	r1, [pc, #156]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d006      	beq.n	8000ba6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000b9a:	68da      	ldr	r2, [r3, #12]
 8000b9c:	4921      	ldr	r1, [pc, #132]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	60cb      	str	r3, [r1, #12]
 8000ba4:	e006      	b.n	8000bb4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	43db      	mvns	r3, r3
 8000bae:	491d      	ldr	r1, [pc, #116]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d006      	beq.n	8000bce <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	4917      	ldr	r1, [pc, #92]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	604b      	str	r3, [r1, #4]
 8000bcc:	e006      	b.n	8000bdc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bce:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	4913      	ldr	r1, [pc, #76]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d01f      	beq.n	8000c28 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	490d      	ldr	r1, [pc, #52]	; (8000c24 <HAL_GPIO_Init+0x2c0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	600b      	str	r3, [r1, #0]
 8000bf4:	e01f      	b.n	8000c36 <HAL_GPIO_Init+0x2d2>
 8000bf6:	bf00      	nop
 8000bf8:	10320000 	.word	0x10320000
 8000bfc:	10310000 	.word	0x10310000
 8000c00:	10220000 	.word	0x10220000
 8000c04:	10210000 	.word	0x10210000
 8000c08:	10120000 	.word	0x10120000
 8000c0c:	10110000 	.word	0x10110000
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010000 	.word	0x40010000
 8000c18:	40010800 	.word	0x40010800
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	40011000 	.word	0x40011000
 8000c24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_GPIO_Init+0x2f4>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	4909      	ldr	r1, [pc, #36]	; (8000c58 <HAL_GPIO_Init+0x2f4>)
 8000c32:	4013      	ands	r3, r2
 8000c34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	3301      	adds	r3, #1
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c42:	fa22 f303 	lsr.w	r3, r2, r3
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f47f ae96 	bne.w	8000978 <HAL_GPIO_Init+0x14>
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	bf00      	nop
 8000c50:	372c      	adds	r7, #44	; 0x2c
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	40010400 	.word	0x40010400

08000c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	807b      	strh	r3, [r7, #2]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c6c:	787b      	ldrb	r3, [r7, #1]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c78:	e003      	b.n	8000c82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c7a:	887b      	ldrh	r3, [r7, #2]
 8000c7c:	041a      	lsls	r2, r3, #16
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	611a      	str	r2, [r3, #16]
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e12b      	b.n	8000ef6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d106      	bne.n	8000cb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fc7c 	bl	80005b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2224      	movs	r2, #36	; 0x24
 8000cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f022 0201 	bic.w	r2, r2, #1
 8000cce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cf0:	f001 fcf8 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8000cf4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4a81      	ldr	r2, [pc, #516]	; (8000f00 <HAL_I2C_Init+0x274>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d807      	bhi.n	8000d10 <HAL_I2C_Init+0x84>
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4a80      	ldr	r2, [pc, #512]	; (8000f04 <HAL_I2C_Init+0x278>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	bf94      	ite	ls
 8000d08:	2301      	movls	r3, #1
 8000d0a:	2300      	movhi	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	e006      	b.n	8000d1e <HAL_I2C_Init+0x92>
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4a7d      	ldr	r2, [pc, #500]	; (8000f08 <HAL_I2C_Init+0x27c>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	bf94      	ite	ls
 8000d18:	2301      	movls	r3, #1
 8000d1a:	2300      	movhi	r3, #0
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e0e7      	b.n	8000ef6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	4a78      	ldr	r2, [pc, #480]	; (8000f0c <HAL_I2C_Init+0x280>)
 8000d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2e:	0c9b      	lsrs	r3, r3, #18
 8000d30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	68ba      	ldr	r2, [r7, #8]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	4a6a      	ldr	r2, [pc, #424]	; (8000f00 <HAL_I2C_Init+0x274>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d802      	bhi.n	8000d60 <HAL_I2C_Init+0xd4>
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	e009      	b.n	8000d74 <HAL_I2C_Init+0xe8>
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d66:	fb02 f303 	mul.w	r3, r2, r3
 8000d6a:	4a69      	ldr	r2, [pc, #420]	; (8000f10 <HAL_I2C_Init+0x284>)
 8000d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d70:	099b      	lsrs	r3, r3, #6
 8000d72:	3301      	adds	r3, #1
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	6812      	ldr	r2, [r2, #0]
 8000d78:	430b      	orrs	r3, r1
 8000d7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	495c      	ldr	r1, [pc, #368]	; (8000f00 <HAL_I2C_Init+0x274>)
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d819      	bhi.n	8000dc8 <HAL_I2C_Init+0x13c>
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	1e59      	subs	r1, r3, #1
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000da2:	1c59      	adds	r1, r3, #1
 8000da4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000da8:	400b      	ands	r3, r1
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d00a      	beq.n	8000dc4 <HAL_I2C_Init+0x138>
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1e59      	subs	r1, r3, #1
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dc2:	e051      	b.n	8000e68 <HAL_I2C_Init+0x1dc>
 8000dc4:	2304      	movs	r3, #4
 8000dc6:	e04f      	b.n	8000e68 <HAL_I2C_Init+0x1dc>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d111      	bne.n	8000df4 <HAL_I2C_Init+0x168>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	1e58      	subs	r0, r3, #1
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6859      	ldr	r1, [r3, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	440b      	add	r3, r1
 8000dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8000de2:	3301      	adds	r3, #1
 8000de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	bf0c      	ite	eq
 8000dec:	2301      	moveq	r3, #1
 8000dee:	2300      	movne	r3, #0
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	e012      	b.n	8000e1a <HAL_I2C_Init+0x18e>
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	1e58      	subs	r0, r3, #1
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6859      	ldr	r1, [r3, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	440b      	add	r3, r1
 8000e02:	0099      	lsls	r1, r3, #2
 8000e04:	440b      	add	r3, r1
 8000e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	bf0c      	ite	eq
 8000e14:	2301      	moveq	r3, #1
 8000e16:	2300      	movne	r3, #0
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_I2C_Init+0x196>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e022      	b.n	8000e68 <HAL_I2C_Init+0x1dc>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10e      	bne.n	8000e48 <HAL_I2C_Init+0x1bc>
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	1e58      	subs	r0, r3, #1
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6859      	ldr	r1, [r3, #4]
 8000e32:	460b      	mov	r3, r1
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	440b      	add	r3, r1
 8000e38:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e46:	e00f      	b.n	8000e68 <HAL_I2C_Init+0x1dc>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	1e58      	subs	r0, r3, #1
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6859      	ldr	r1, [r3, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	440b      	add	r3, r1
 8000e56:	0099      	lsls	r1, r3, #2
 8000e58:	440b      	add	r3, r1
 8000e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e5e:	3301      	adds	r3, #1
 8000e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	6809      	ldr	r1, [r1, #0]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69da      	ldr	r2, [r3, #28]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a1b      	ldr	r3, [r3, #32]
 8000e82:	431a      	orrs	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	6911      	ldr	r1, [r2, #16]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	68d2      	ldr	r2, [r2, #12]
 8000ea2:	4311      	orrs	r1, r2
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	6812      	ldr	r2, [r2, #0]
 8000ea8:	430b      	orrs	r3, r1
 8000eaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695a      	ldr	r2, [r3, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 0201 	orr.w	r2, r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2220      	movs	r2, #32
 8000ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	000186a0 	.word	0x000186a0
 8000f04:	001e847f 	.word	0x001e847f
 8000f08:	003d08ff 	.word	0x003d08ff
 8000f0c:	431bde83 	.word	0x431bde83
 8000f10:	10624dd3 	.word	0x10624dd3

08000f14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	460b      	mov	r3, r1
 8000f22:	817b      	strh	r3, [r7, #10]
 8000f24:	4613      	mov	r3, r2
 8000f26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff fc2e 	bl	8000788 <HAL_GetTick>
 8000f2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b20      	cmp	r3, #32
 8000f38:	f040 80e0 	bne.w	80010fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2319      	movs	r3, #25
 8000f42:	2201      	movs	r2, #1
 8000f44:	4970      	ldr	r1, [pc, #448]	; (8001108 <HAL_I2C_Master_Transmit+0x1f4>)
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f000 fdcc 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000f52:	2302      	movs	r3, #2
 8000f54:	e0d3      	b.n	80010fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d101      	bne.n	8000f64 <HAL_I2C_Master_Transmit+0x50>
 8000f60:	2302      	movs	r3, #2
 8000f62:	e0cc      	b.n	80010fe <HAL_I2C_Master_Transmit+0x1ea>
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d007      	beq.n	8000f8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f042 0201 	orr.w	r2, r2, #1
 8000f88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2221      	movs	r2, #33	; 0x21
 8000f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	893a      	ldrh	r2, [r7, #8]
 8000fba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4a50      	ldr	r2, [pc, #320]	; (800110c <HAL_I2C_Master_Transmit+0x1f8>)
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000fcc:	8979      	ldrh	r1, [r7, #10]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	6a3a      	ldr	r2, [r7, #32]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 fc36 	bl	8001844 <I2C_MasterRequestWrite>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e08d      	b.n	80010fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000ff8:	e066      	b.n	80010c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	6a39      	ldr	r1, [r7, #32]
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f000 fe8a 	bl	8001d18 <I2C_WaitOnTXEFlagUntilTimeout>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00d      	beq.n	8001026 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	2b04      	cmp	r3, #4
 8001010:	d107      	bne.n	8001022 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001020:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e06b      	b.n	80010fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001040:	b29b      	uxth	r3, r3
 8001042:	3b01      	subs	r3, #1
 8001044:	b29a      	uxth	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104e:	3b01      	subs	r3, #1
 8001050:	b29a      	uxth	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b04      	cmp	r3, #4
 8001062:	d11b      	bne.n	800109c <HAL_I2C_Master_Transmit+0x188>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001068:	2b00      	cmp	r3, #0
 800106a:	d017      	beq.n	800109c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001070:	781a      	ldrb	r2, [r3, #0]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001086:	b29b      	uxth	r3, r3
 8001088:	3b01      	subs	r3, #1
 800108a:	b29a      	uxth	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001094:	3b01      	subs	r3, #1
 8001096:	b29a      	uxth	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	6a39      	ldr	r1, [r7, #32]
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f000 fe81 	bl	8001da8 <I2C_WaitOnBTFFlagUntilTimeout>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d107      	bne.n	80010c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e01a      	b.n	80010fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d194      	bne.n	8000ffa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2220      	movs	r2, #32
 80010e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e000      	b.n	80010fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80010fc:	2302      	movs	r3, #2
  }
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	00100002 	.word	0x00100002
 800110c:	ffff0000 	.word	0xffff0000

08001110 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	; 0x30
 8001114:	af02      	add	r7, sp, #8
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	461a      	mov	r2, r3
 800111c:	460b      	mov	r3, r1
 800111e:	817b      	strh	r3, [r7, #10]
 8001120:	4613      	mov	r3, r2
 8001122:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001128:	f7ff fb2e 	bl	8000788 <HAL_GetTick>
 800112c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b20      	cmp	r3, #32
 8001138:	f040 824b 	bne.w	80015d2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2319      	movs	r3, #25
 8001142:	2201      	movs	r2, #1
 8001144:	497f      	ldr	r1, [pc, #508]	; (8001344 <HAL_I2C_Master_Receive+0x234>)
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f000 fccc 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001152:	2302      	movs	r3, #2
 8001154:	e23e      	b.n	80015d4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <HAL_I2C_Master_Receive+0x54>
 8001160:	2302      	movs	r3, #2
 8001162:	e237      	b.n	80015d4 <HAL_I2C_Master_Receive+0x4c4>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	2201      	movs	r2, #1
 8001168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b01      	cmp	r3, #1
 8001178:	d007      	beq.n	800118a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 0201 	orr.w	r2, r2, #1
 8001188:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001198:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2222      	movs	r2, #34	; 0x22
 800119e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2210      	movs	r2, #16
 80011a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	2200      	movs	r2, #0
 80011ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	893a      	ldrh	r2, [r7, #8]
 80011ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4a5f      	ldr	r2, [pc, #380]	; (8001348 <HAL_I2C_Master_Receive+0x238>)
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011cc:	8979      	ldrh	r1, [r7, #10]
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f000 fbb8 	bl	8001948 <I2C_MasterRequestRead>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e1f8      	b.n	80015d4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d113      	bne.n	8001212 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e1cc      	b.n	80015ac <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001216:	2b01      	cmp	r3, #1
 8001218:	d11e      	bne.n	8001258 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001228:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800122a:	b672      	cpsid	i
}
 800122c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800122e:	2300      	movs	r3, #0
 8001230:	61bb      	str	r3, [r7, #24]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001252:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001254:	b662      	cpsie	i
}
 8001256:	e035      	b.n	80012c4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800125c:	2b02      	cmp	r3, #2
 800125e:	d11e      	bne.n	800129e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800126e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001298:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800129a:	b662      	cpsie	i
}
 800129c:	e012      	b.n	80012c4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80012ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80012c4:	e172      	b.n	80015ac <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	f200 811f 	bhi.w	800150e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d123      	bne.n	8001320 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f000 fdab 	bl	8001e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e173      	b.n	80015d4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001308:	3b01      	subs	r3, #1
 800130a:	b29a      	uxth	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001314:	b29b      	uxth	r3, r3
 8001316:	3b01      	subs	r3, #1
 8001318:	b29a      	uxth	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800131e:	e145      	b.n	80015ac <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001324:	2b02      	cmp	r3, #2
 8001326:	d152      	bne.n	80013ce <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132e:	2200      	movs	r2, #0
 8001330:	4906      	ldr	r1, [pc, #24]	; (800134c <HAL_I2C_Master_Receive+0x23c>)
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 fbd6 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d008      	beq.n	8001350 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e148      	b.n	80015d4 <HAL_I2C_Master_Receive+0x4c4>
 8001342:	bf00      	nop
 8001344:	00100002 	.word	0x00100002
 8001348:	ffff0000 	.word	0xffff0000
 800134c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001362:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001380:	3b01      	subs	r3, #1
 8001382:	b29a      	uxth	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138c:	b29b      	uxth	r3, r3
 800138e:	3b01      	subs	r3, #1
 8001390:	b29a      	uxth	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001396:	b662      	cpsie	i
}
 8001398:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b6:	3b01      	subs	r3, #1
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80013cc:	e0ee      	b.n	80015ac <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d4:	2200      	movs	r2, #0
 80013d6:	4981      	ldr	r1, [pc, #516]	; (80015dc <HAL_I2C_Master_Receive+0x4cc>)
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 fb83 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0f5      	b.n	80015d4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001418:	3b01      	subs	r3, #1
 800141a:	b29a      	uxth	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001424:	b29b      	uxth	r3, r3
 8001426:	3b01      	subs	r3, #1
 8001428:	b29a      	uxth	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800142e:	4b6c      	ldr	r3, [pc, #432]	; (80015e0 <HAL_I2C_Master_Receive+0x4d0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	08db      	lsrs	r3, r3, #3
 8001434:	4a6b      	ldr	r2, [pc, #428]	; (80015e4 <HAL_I2C_Master_Receive+0x4d4>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	0a1a      	lsrs	r2, r3, #8
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	00da      	lsls	r2, r3, #3
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	3b01      	subs	r3, #1
 800144c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d118      	bne.n	8001486 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2220      	movs	r2, #32
 800145e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f043 0220 	orr.w	r2, r3, #32
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001476:	b662      	cpsie	i
}
 8001478:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0a6      	b.n	80015d4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b04      	cmp	r3, #4
 8001492:	d1d9      	bne.n	8001448 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3b01      	subs	r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80014d6:	b662      	cpsie	i
}
 80014d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	691a      	ldr	r2, [r3, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f6:	3b01      	subs	r3, #1
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001502:	b29b      	uxth	r3, r3
 8001504:	3b01      	subs	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800150c:	e04e      	b.n	80015ac <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800150e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 fc90 	bl	8001e38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e058      	b.n	80015d4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	b2d2      	uxtb	r2, r2
 800152e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153e:	3b01      	subs	r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154a:	b29b      	uxth	r3, r3
 800154c:	3b01      	subs	r3, #1
 800154e:	b29a      	uxth	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	2b04      	cmp	r3, #4
 8001560:	d124      	bne.n	80015ac <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001566:	2b03      	cmp	r3, #3
 8001568:	d107      	bne.n	800157a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001578:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001596:	3b01      	subs	r3, #1
 8001598:	b29a      	uxth	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	3b01      	subs	r3, #1
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f47f ae88 	bne.w	80012c6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2220      	movs	r2, #32
 80015ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80015d2:	2302      	movs	r3, #2
  }
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3728      	adds	r7, #40	; 0x28
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	00010004 	.word	0x00010004
 80015e0:	20000000 	.word	0x20000000
 80015e4:	14f8b589 	.word	0x14f8b589

080015e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	; 0x28
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	460b      	mov	r3, r1
 80015f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff f8c6 	bl	8000788 <HAL_GetTick>
 80015fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b20      	cmp	r3, #32
 800160c:	f040 8111 	bne.w	8001832 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2319      	movs	r3, #25
 8001616:	2201      	movs	r2, #1
 8001618:	4988      	ldr	r1, [pc, #544]	; (800183c <HAL_I2C_IsDeviceReady+0x254>)
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 fa62 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001626:	2302      	movs	r3, #2
 8001628:	e104      	b.n	8001834 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_I2C_IsDeviceReady+0x50>
 8001634:	2302      	movs	r3, #2
 8001636:	e0fd      	b.n	8001834 <HAL_I2C_IsDeviceReady+0x24c>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b01      	cmp	r3, #1
 800164c:	d007      	beq.n	800165e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0201 	orr.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2224      	movs	r2, #36	; 0x24
 8001672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a70      	ldr	r2, [pc, #448]	; (8001840 <HAL_I2C_IsDeviceReady+0x258>)
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001690:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2200      	movs	r2, #0
 800169a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 fa20 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00d      	beq.n	80016c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016b8:	d103      	bne.n	80016c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e0b6      	b.n	8001834 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80016c6:	897b      	ldrh	r3, [r7, #10]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80016d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80016d6:	f7ff f857 	bl	8000788 <HAL_GetTick>
 80016da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	bf0c      	ite	eq
 80016ea:	2301      	moveq	r3, #1
 80016ec:	2300      	movne	r3, #0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001700:	bf0c      	ite	eq
 8001702:	2301      	moveq	r3, #1
 8001704:	2300      	movne	r3, #0
 8001706:	b2db      	uxtb	r3, r3
 8001708:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800170a:	e025      	b.n	8001758 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800170c:	f7ff f83c 	bl	8000788 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d302      	bcc.n	8001722 <HAL_I2C_IsDeviceReady+0x13a>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	22a0      	movs	r2, #160	; 0xa0
 8001726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b02      	cmp	r3, #2
 8001736:	bf0c      	ite	eq
 8001738:	2301      	moveq	r3, #1
 800173a:	2300      	movne	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2ba0      	cmp	r3, #160	; 0xa0
 8001762:	d005      	beq.n	8001770 <HAL_I2C_IsDeviceReady+0x188>
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <HAL_I2C_IsDeviceReady+0x188>
 800176a:	7dbb      	ldrb	r3, [r7, #22]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0cd      	beq.n	800170c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2220      	movs	r2, #32
 8001774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b02      	cmp	r3, #2
 8001784:	d129      	bne.n	80017da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001794:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2319      	movs	r3, #25
 80017b2:	2201      	movs	r2, #1
 80017b4:	4921      	ldr	r1, [pc, #132]	; (800183c <HAL_I2C_IsDeviceReady+0x254>)
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 f994 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e036      	b.n	8001834 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2220      	movs	r2, #32
 80017ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	e02c      	b.n	8001834 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80017f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2319      	movs	r3, #25
 80017fa:	2201      	movs	r2, #1
 80017fc:	490f      	ldr	r1, [pc, #60]	; (800183c <HAL_I2C_IsDeviceReady+0x254>)
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f970 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e012      	b.n	8001834 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	3301      	adds	r3, #1
 8001812:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	f4ff af32 	bcc.w	8001682 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2220      	movs	r2, #32
 8001822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001832:	2302      	movs	r3, #2
  }
}
 8001834:	4618      	mov	r0, r3
 8001836:	3720      	adds	r7, #32
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	00100002 	.word	0x00100002
 8001840:	ffff0000 	.word	0xffff0000

08001844 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	460b      	mov	r3, r1
 8001852:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2b08      	cmp	r3, #8
 800185e:	d006      	beq.n	800186e <I2C_MasterRequestWrite+0x2a>
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d003      	beq.n	800186e <I2C_MasterRequestWrite+0x2a>
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800186c:	d108      	bne.n	8001880 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e00b      	b.n	8001898 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	2b12      	cmp	r3, #18
 8001886:	d107      	bne.n	8001898 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001896:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f000 f91d 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00d      	beq.n	80018cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018be:	d103      	bne.n	80018c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e035      	b.n	8001938 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018d4:	d108      	bne.n	80018e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018d6:	897b      	ldrh	r3, [r7, #10]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	e01b      	b.n	8001920 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018e8:	897b      	ldrh	r3, [r7, #10]
 80018ea:	11db      	asrs	r3, r3, #7
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f003 0306 	and.w	r3, r3, #6
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f063 030f 	orn	r3, r3, #15
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	490e      	ldr	r1, [pc, #56]	; (8001940 <I2C_MasterRequestWrite+0xfc>)
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 f966 	bl	8001bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e010      	b.n	8001938 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001916:	897b      	ldrh	r3, [r7, #10]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <I2C_MasterRequestWrite+0x100>)
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f956 	bl	8001bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	00010008 	.word	0x00010008
 8001944:	00010002 	.word	0x00010002

08001948 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af02      	add	r7, sp, #8
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	460b      	mov	r3, r1
 8001956:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800196c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b08      	cmp	r3, #8
 8001972:	d006      	beq.n	8001982 <I2C_MasterRequestRead+0x3a>
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d003      	beq.n	8001982 <I2C_MasterRequestRead+0x3a>
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001980:	d108      	bne.n	8001994 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	e00b      	b.n	80019ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	2b11      	cmp	r3, #17
 800199a:	d107      	bne.n	80019ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 f893 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00d      	beq.n	80019e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d2:	d103      	bne.n	80019dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e079      	b.n	8001ad4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019e8:	d108      	bne.n	80019fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80019ea:	897b      	ldrh	r3, [r7, #10]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	611a      	str	r2, [r3, #16]
 80019fa:	e05f      	b.n	8001abc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019fc:	897b      	ldrh	r3, [r7, #10]
 80019fe:	11db      	asrs	r3, r3, #7
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f003 0306 	and.w	r3, r3, #6
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	f063 030f 	orn	r3, r3, #15
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	4930      	ldr	r1, [pc, #192]	; (8001adc <I2C_MasterRequestRead+0x194>)
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 f8dc 	bl	8001bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e054      	b.n	8001ad4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001a2a:	897b      	ldrh	r3, [r7, #10]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4929      	ldr	r1, [pc, #164]	; (8001ae0 <I2C_MasterRequestRead+0x198>)
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f8cc 	bl	8001bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e044      	b.n	8001ad4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f831 	bl	8001ae4 <I2C_WaitOnFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00d      	beq.n	8001aa4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a96:	d103      	bne.n	8001aa0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e017      	b.n	8001ad4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001aa4:	897b      	ldrh	r3, [r7, #10]
 8001aa6:	11db      	asrs	r3, r3, #7
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	f003 0306 	and.w	r3, r3, #6
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f063 030e 	orn	r3, r3, #14
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <I2C_MasterRequestRead+0x198>)
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 f888 	bl	8001bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	00010008 	.word	0x00010008
 8001ae0:	00010002 	.word	0x00010002

08001ae4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	603b      	str	r3, [r7, #0]
 8001af0:	4613      	mov	r3, r2
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001af4:	e048      	b.n	8001b88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d044      	beq.n	8001b88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001afe:	f7fe fe43 	bl	8000788 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d302      	bcc.n	8001b14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d139      	bne.n	8001b88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	0c1b      	lsrs	r3, r3, #16
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d10d      	bne.n	8001b3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	43da      	mvns	r2, r3
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	e00c      	b.n	8001b54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	43da      	mvns	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4013      	ands	r3, r2
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d116      	bne.n	8001b88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f043 0220 	orr.w	r2, r3, #32
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e023      	b.n	8001bd0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d10d      	bne.n	8001bae <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	e00c      	b.n	8001bc8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	43da      	mvns	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d093      	beq.n	8001af6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001be6:	e071      	b.n	8001ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf6:	d123      	bne.n	8001c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f043 0204 	orr.w	r2, r3, #4
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e067      	b.n	8001d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c46:	d041      	beq.n	8001ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c48:	f7fe fd9e 	bl	8000788 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d302      	bcc.n	8001c5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d136      	bne.n	8001ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d10c      	bne.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4013      	ands	r3, r2
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bf14      	ite	ne
 8001c7a:	2301      	movne	r3, #1
 8001c7c:	2300      	moveq	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	e00b      	b.n	8001c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	43da      	mvns	r2, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d016      	beq.n	8001ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	f043 0220 	orr.w	r2, r3, #32
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e021      	b.n	8001d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10c      	bne.n	8001cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	43da      	mvns	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	bf14      	ite	ne
 8001ce8:	2301      	movne	r3, #1
 8001cea:	2300      	moveq	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	e00b      	b.n	8001d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	bf14      	ite	ne
 8001d02:	2301      	movne	r3, #1
 8001d04:	2300      	moveq	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f47f af6d 	bne.w	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d24:	e034      	b.n	8001d90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f8e3 	bl	8001ef2 <I2C_IsAcknowledgeFailed>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e034      	b.n	8001da0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d028      	beq.n	8001d90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7fe fd23 	bl	8000788 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d302      	bcc.n	8001d54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d11d      	bne.n	8001d90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5e:	2b80      	cmp	r3, #128	; 0x80
 8001d60:	d016      	beq.n	8001d90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f043 0220 	orr.w	r2, r3, #32
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e007      	b.n	8001da0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9a:	2b80      	cmp	r3, #128	; 0x80
 8001d9c:	d1c3      	bne.n	8001d26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001db4:	e034      	b.n	8001e20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f89b 	bl	8001ef2 <I2C_IsAcknowledgeFailed>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e034      	b.n	8001e30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dcc:	d028      	beq.n	8001e20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dce:	f7fe fcdb 	bl	8000788 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d302      	bcc.n	8001de4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d11d      	bne.n	8001e20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	2b04      	cmp	r3, #4
 8001df0:	d016      	beq.n	8001e20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f043 0220 	orr.w	r2, r3, #32
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e007      	b.n	8001e30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d1c3      	bne.n	8001db6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e44:	e049      	b.n	8001eda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b10      	cmp	r3, #16
 8001e52:	d119      	bne.n	8001e88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0210 	mvn.w	r2, #16
 8001e5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e030      	b.n	8001eea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e88:	f7fe fc7e 	bl	8000788 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d302      	bcc.n	8001e9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d11d      	bne.n	8001eda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	2b40      	cmp	r3, #64	; 0x40
 8001eaa:	d016      	beq.n	8001eda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f043 0220 	orr.w	r2, r3, #32
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e007      	b.n	8001eea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d1ae      	bne.n	8001e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f08:	d11b      	bne.n	8001f42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f043 0204 	orr.w	r2, r3, #4
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
	...

08001f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e272      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8087 	beq.w	800207e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f70:	4b92      	ldr	r3, [pc, #584]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 030c 	and.w	r3, r3, #12
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d00c      	beq.n	8001f96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f7c:	4b8f      	ldr	r3, [pc, #572]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d112      	bne.n	8001fae <HAL_RCC_OscConfig+0x5e>
 8001f88:	4b8c      	ldr	r3, [pc, #560]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f94:	d10b      	bne.n	8001fae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f96:	4b89      	ldr	r3, [pc, #548]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d06c      	beq.n	800207c <HAL_RCC_OscConfig+0x12c>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d168      	bne.n	800207c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e24c      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x76>
 8001fb8:	4b80      	ldr	r3, [pc, #512]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a7f      	ldr	r2, [pc, #508]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e02e      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x98>
 8001fce:	4b7b      	ldr	r3, [pc, #492]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a7a      	ldr	r2, [pc, #488]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	4b78      	ldr	r3, [pc, #480]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a77      	ldr	r2, [pc, #476]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e01d      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0xbc>
 8001ff2:	4b72      	ldr	r3, [pc, #456]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a71      	ldr	r2, [pc, #452]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b6f      	ldr	r3, [pc, #444]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6e      	ldr	r2, [pc, #440]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0xd4>
 800200c:	4b6b      	ldr	r3, [pc, #428]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a6a      	ldr	r2, [pc, #424]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b68      	ldr	r3, [pc, #416]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a67      	ldr	r2, [pc, #412]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 800201e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002022:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7fe fbac 	bl	8000788 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7fe fba8 	bl	8000788 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e200      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0xe4>
 8002052:	e014      	b.n	800207e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7fe fb98 	bl	8000788 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7fe fb94 	bl	8000788 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1ec      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	4b53      	ldr	r3, [pc, #332]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x10c>
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d063      	beq.n	8002152 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800208a:	4b4c      	ldr	r3, [pc, #304]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002096:	4b49      	ldr	r3, [pc, #292]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d11c      	bne.n	80020dc <HAL_RCC_OscConfig+0x18c>
 80020a2:	4b46      	ldr	r3, [pc, #280]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d116      	bne.n	80020dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	4b43      	ldr	r3, [pc, #268]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x176>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e1c0      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c6:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4939      	ldr	r1, [pc, #228]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	e03a      	b.n	8002152 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e4:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7fe fb4d 	bl	8000788 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f2:	f7fe fb49 	bl	8000788 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1a1      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4927      	ldr	r1, [pc, #156]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
 8002124:	e015      	b.n	8002152 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe fb2c 	bl	8000788 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002134:	f7fe fb28 	bl	8000788 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e180      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d03a      	beq.n	80021d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d019      	beq.n	800219a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_RCC_OscConfig+0x274>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800216c:	f7fe fb0c 	bl	8000788 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002174:	f7fe fb08 	bl	8000788 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e160      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_RCC_OscConfig+0x26c>)
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002192:	2001      	movs	r0, #1
 8002194:	f000 faba 	bl	800270c <RCC_Delay>
 8002198:	e01c      	b.n	80021d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_RCC_OscConfig+0x274>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7fe faf2 	bl	8000788 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a6:	e00f      	b.n	80021c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7fe faee 	bl	8000788 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d908      	bls.n	80021c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e146      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	42420000 	.word	0x42420000
 80021c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	4b92      	ldr	r3, [pc, #584]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e9      	bne.n	80021a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80a6 	beq.w	800232e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e6:	4b8b      	ldr	r3, [pc, #556]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10d      	bne.n	800220e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	4b88      	ldr	r3, [pc, #544]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a87      	ldr	r2, [pc, #540]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	61d3      	str	r3, [r2, #28]
 80021fe:	4b85      	ldr	r3, [pc, #532]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220e:	4b82      	ldr	r3, [pc, #520]	; (8002418 <HAL_RCC_OscConfig+0x4c8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800221a:	4b7f      	ldr	r3, [pc, #508]	; (8002418 <HAL_RCC_OscConfig+0x4c8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7e      	ldr	r2, [pc, #504]	; (8002418 <HAL_RCC_OscConfig+0x4c8>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7fe faaf 	bl	8000788 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe faab 	bl	8000788 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	; 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e103      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	4b75      	ldr	r3, [pc, #468]	; (8002418 <HAL_RCC_OscConfig+0x4c8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x312>
 8002254:	4b6f      	ldr	r3, [pc, #444]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a6e      	ldr	r2, [pc, #440]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	e02d      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x334>
 800226a:	4b6a      	ldr	r3, [pc, #424]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4a69      	ldr	r2, [pc, #420]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	6213      	str	r3, [r2, #32]
 8002276:	4b67      	ldr	r3, [pc, #412]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a66      	ldr	r2, [pc, #408]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	e01c      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d10c      	bne.n	80022a6 <HAL_RCC_OscConfig+0x356>
 800228c:	4b61      	ldr	r3, [pc, #388]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4a60      	ldr	r2, [pc, #384]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	f043 0304 	orr.w	r3, r3, #4
 8002296:	6213      	str	r3, [r2, #32]
 8002298:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a5d      	ldr	r2, [pc, #372]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	e00b      	b.n	80022be <HAL_RCC_OscConfig+0x36e>
 80022a6:	4b5b      	ldr	r3, [pc, #364]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4a5a      	ldr	r2, [pc, #360]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	6213      	str	r3, [r2, #32]
 80022b2:	4b58      	ldr	r3, [pc, #352]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a57      	ldr	r2, [pc, #348]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d015      	beq.n	80022f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c6:	f7fe fa5f 	bl	8000788 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe fa5b 	bl	8000788 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0b1      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	f003 0302 	and.w	r3, r3, #2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ee      	beq.n	80022ce <HAL_RCC_OscConfig+0x37e>
 80022f0:	e014      	b.n	800231c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f2:	f7fe fa49 	bl	8000788 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7fe fa45 	bl	8000788 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e09b      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	4b40      	ldr	r3, [pc, #256]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ee      	bne.n	80022fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800231c:	7dfb      	ldrb	r3, [r7, #23]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d105      	bne.n	800232e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002322:	4b3c      	ldr	r3, [pc, #240]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	4a3b      	ldr	r2, [pc, #236]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8087 	beq.w	8002446 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002338:	4b36      	ldr	r3, [pc, #216]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b08      	cmp	r3, #8
 8002342:	d061      	beq.n	8002408 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d146      	bne.n	80023da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002352:	f7fe fa19 	bl	8000788 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235a:	f7fe fa15 	bl	8000788 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e06d      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236c:	4b29      	ldr	r3, [pc, #164]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002380:	d108      	bne.n	8002394 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002382:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	4921      	ldr	r1, [pc, #132]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002394:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a19      	ldr	r1, [r3, #32]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	430b      	orrs	r3, r1
 80023a6:	491b      	ldr	r1, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7fe f9e9 	bl	8000788 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ba:	f7fe f9e5 	bl	8000788 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e03d      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x46a>
 80023d8:	e035      	b.n	8002446 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_RCC_OscConfig+0x4cc>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe f9d2 	bl	8000788 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe f9ce 	bl	8000788 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e026      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x498>
 8002406:	e01e      	b.n	8002446 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d107      	bne.n	8002420 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e019      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
 8002414:	40021000 	.word	0x40021000
 8002418:	40007000 	.word	0x40007000
 800241c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_OscConfig+0x500>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	429a      	cmp	r2, r3
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000

08002454 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0d0      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4b6a      	ldr	r3, [pc, #424]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d910      	bls.n	8002498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b67      	ldr	r3, [pc, #412]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 0207 	bic.w	r2, r3, #7
 800247e:	4965      	ldr	r1, [pc, #404]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b63      	ldr	r3, [pc, #396]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0b8      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b0:	4b59      	ldr	r3, [pc, #356]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4a58      	ldr	r2, [pc, #352]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c8:	4b53      	ldr	r3, [pc, #332]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a52      	ldr	r2, [pc, #328]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d4:	4b50      	ldr	r3, [pc, #320]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	494d      	ldr	r1, [pc, #308]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d040      	beq.n	8002574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d115      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e07f      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e073      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e06b      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002532:	4b39      	ldr	r3, [pc, #228]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f023 0203 	bic.w	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4936      	ldr	r1, [pc, #216]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002544:	f7fe f920 	bl	8000788 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	e00a      	b.n	8002562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7fe f91c 	bl	8000788 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	; 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e053      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 020c 	and.w	r2, r3, #12
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	429a      	cmp	r2, r3
 8002572:	d1eb      	bne.n	800254c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002574:	4b27      	ldr	r3, [pc, #156]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d210      	bcs.n	80025a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0207 	bic.w	r2, r3, #7
 800258a:	4922      	ldr	r1, [pc, #136]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b20      	ldr	r3, [pc, #128]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e032      	b.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4916      	ldr	r1, [pc, #88]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	00db      	lsls	r3, r3, #3
 80025dc:	490e      	ldr	r1, [pc, #56]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025e2:	f000 f821 	bl	8002628 <HAL_RCC_GetSysClockFreq>
 80025e6:	4602      	mov	r2, r0
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	490a      	ldr	r1, [pc, #40]	; (800261c <HAL_RCC_ClockConfig+0x1c8>)
 80025f4:	5ccb      	ldrb	r3, [r1, r3]
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	4a09      	ldr	r2, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x1cc>)
 80025fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025fe:	4b09      	ldr	r3, [pc, #36]	; (8002624 <HAL_RCC_ClockConfig+0x1d0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe f87e 	bl	8000704 <HAL_InitTick>

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40022000 	.word	0x40022000
 8002618:	40021000 	.word	0x40021000
 800261c:	080027c0 	.word	0x080027c0
 8002620:	20000000 	.word	0x20000000
 8002624:	20000004 	.word	0x20000004

08002628 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	2300      	movs	r3, #0
 800263c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b04      	cmp	r3, #4
 8002650:	d002      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0x30>
 8002652:	2b08      	cmp	r3, #8
 8002654:	d003      	beq.n	800265e <HAL_RCC_GetSysClockFreq+0x36>
 8002656:	e027      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800265a:	613b      	str	r3, [r7, #16]
      break;
 800265c:	e027      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	0c9b      	lsrs	r3, r3, #18
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	4a17      	ldr	r2, [pc, #92]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002668:	5cd3      	ldrb	r3, [r2, r3]
 800266a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d010      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002676:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	0c5b      	lsrs	r3, r3, #17
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002682:	5cd3      	ldrb	r3, [r2, r3]
 8002684:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800268a:	fb03 f202 	mul.w	r2, r3, r2
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	e004      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a0c      	ldr	r2, [pc, #48]	; (80026cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800269c:	fb02 f303 	mul.w	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	613b      	str	r3, [r7, #16]
      break;
 80026a6:	e002      	b.n	80026ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80026aa:	613b      	str	r3, [r7, #16]
      break;
 80026ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ae:	693b      	ldr	r3, [r7, #16]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	007a1200 	.word	0x007a1200
 80026c4:	080027d8 	.word	0x080027d8
 80026c8:	080027e8 	.word	0x080027e8
 80026cc:	003d0900 	.word	0x003d0900

080026d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d4:	4b02      	ldr	r3, [pc, #8]	; (80026e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026d6:	681b      	ldr	r3, [r3, #0]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	20000000 	.word	0x20000000

080026e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026e8:	f7ff fff2 	bl	80026d0 <HAL_RCC_GetHCLKFreq>
 80026ec:	4602      	mov	r2, r0
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	4903      	ldr	r1, [pc, #12]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	080027d0 	.word	0x080027d0

0800270c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002714:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <RCC_Delay+0x34>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <RCC_Delay+0x38>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0a5b      	lsrs	r3, r3, #9
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	fb02 f303 	mul.w	r3, r2, r3
 8002726:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002728:	bf00      	nop
  }
  while (Delay --);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1e5a      	subs	r2, r3, #1
 800272e:	60fa      	str	r2, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f9      	bne.n	8002728 <RCC_Delay+0x1c>
}
 8002734:	bf00      	nop
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	20000000 	.word	0x20000000
 8002744:	10624dd3 	.word	0x10624dd3

08002748 <memset>:
 8002748:	4603      	mov	r3, r0
 800274a:	4402      	add	r2, r0
 800274c:	4293      	cmp	r3, r2
 800274e:	d100      	bne.n	8002752 <memset+0xa>
 8002750:	4770      	bx	lr
 8002752:	f803 1b01 	strb.w	r1, [r3], #1
 8002756:	e7f9      	b.n	800274c <memset+0x4>

08002758 <__libc_init_array>:
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	2600      	movs	r6, #0
 800275c:	4d0c      	ldr	r5, [pc, #48]	; (8002790 <__libc_init_array+0x38>)
 800275e:	4c0d      	ldr	r4, [pc, #52]	; (8002794 <__libc_init_array+0x3c>)
 8002760:	1b64      	subs	r4, r4, r5
 8002762:	10a4      	asrs	r4, r4, #2
 8002764:	42a6      	cmp	r6, r4
 8002766:	d109      	bne.n	800277c <__libc_init_array+0x24>
 8002768:	f000 f81a 	bl	80027a0 <_init>
 800276c:	2600      	movs	r6, #0
 800276e:	4d0a      	ldr	r5, [pc, #40]	; (8002798 <__libc_init_array+0x40>)
 8002770:	4c0a      	ldr	r4, [pc, #40]	; (800279c <__libc_init_array+0x44>)
 8002772:	1b64      	subs	r4, r4, r5
 8002774:	10a4      	asrs	r4, r4, #2
 8002776:	42a6      	cmp	r6, r4
 8002778:	d105      	bne.n	8002786 <__libc_init_array+0x2e>
 800277a:	bd70      	pop	{r4, r5, r6, pc}
 800277c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002780:	4798      	blx	r3
 8002782:	3601      	adds	r6, #1
 8002784:	e7ee      	b.n	8002764 <__libc_init_array+0xc>
 8002786:	f855 3b04 	ldr.w	r3, [r5], #4
 800278a:	4798      	blx	r3
 800278c:	3601      	adds	r6, #1
 800278e:	e7f2      	b.n	8002776 <__libc_init_array+0x1e>
 8002790:	080027ec 	.word	0x080027ec
 8002794:	080027ec 	.word	0x080027ec
 8002798:	080027ec 	.word	0x080027ec
 800279c:	080027f0 	.word	0x080027f0

080027a0 <_init>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	bf00      	nop
 80027a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a6:	bc08      	pop	{r3}
 80027a8:	469e      	mov	lr, r3
 80027aa:	4770      	bx	lr

080027ac <_fini>:
 80027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ae:	bf00      	nop
 80027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b2:	bc08      	pop	{r3}
 80027b4:	469e      	mov	lr, r3
 80027b6:	4770      	bx	lr
